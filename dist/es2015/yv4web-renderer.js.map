{
  "version": 3,
  "sources": ["../../obj/rdonly/Renderer/YDataRendererFull.js", "../../obj/rdonly/Renderer/YDataRendererCommon.js", "../../obj/rdonly/Renderer/YAngularGauge.js", "../../obj/rdonly/Renderer/YDigitalDisplay.js", "../../obj/rdonly/Renderer/YGraph.js", "../../obj/rdonly/Renderer/YSolidGauge.js"],
  "sourcesContent": ["export * from \"./YDataRendererCommon.js\";\r\nexport * from \"./YAngularGauge.js\";\r\nexport * from \"./YDigitalDisplay.js\";\r\nexport * from \"./YGraph.js\";\r\nexport * from \"./YSolidGauge.js\";\r\n", "/*\r\n*   Yocto-Visualization (for web), a free web-based application\r\n*   to visualize Yoctopuce Sensors.\r\n*\r\n*  Renderer common functions\r\n*\r\n*   - - - - - - - - - License information: - - - - - - - - -\r\n*\r\n*  Copyright (C) 2021 and beyond by Yoctopuce Sarl, Switzerland.\r\n*\r\n*  Yoctopuce Sarl (hereafter Licensor) grants to you a perpetual\r\n*  non-exclusive license to use, modify, copy and integrate this\r\n*  file into your software for the sole purpose of interfacing\r\n*  with Yoctopuce products.\r\n*\r\n*  You may reproduce and distribute copies of this file in\r\n*  source or object form, as long as the sole purpose of this\r\n*  code is to interface with Yoctopuce products. You must retain\r\n*  this notice in the distributed source file.\r\n*\r\n*  You should refer to Yoctopuce General Terms and Conditions\r\n*  for additional information regarding your rights and\r\n*  obligations.\r\n*\r\n*  THE SOFTWARE AND DOCUMENTATION ARE PROVIDED \"AS IS\" WITHOUT\r\n*  WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING\r\n*  WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, FITNESS\r\n*  FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO\r\n*  EVENT SHALL LICENSOR BE LIABLE FOR ANY INCIDENTAL, SPECIAL,\r\n*  INDIRECT OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA,\r\n*  COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY OR\r\n*  SERVICES, ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT\r\n*  LIMITED TO ANY DEFENSE THEREOF), ANY CLAIMS FOR INDEMNITY OR\r\n*  CONTRIBUTION, OR OTHER SIMILAR COSTS, WHETHER ASSERTED ON THE\r\n*  BASIS OF CONTRACT, TORT (INCLUDING NEGLIGENCE), BREACH OF\r\n*  WARRANTY, OR OTHERWISE.\r\n*/\r\nexport class Vector3 {\r\n    constructor(a, b, c) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n    }\r\n    static FromXYCoord(x, y) { return new Vector3(x, y, 1); }\r\n    multiplyByM(m) {\r\n        return new Vector3(m.a * this.a + m.b * this.b + m.c * this.c, m.d * this.a + m.e * this.b + m.f * this.c, m.g * this.a + m.h * this.b + m.i * this.c);\r\n    }\r\n    multiplyByN(n) {\r\n        return new Vector3(this.a * n, this.b * n, this.c * n);\r\n    }\r\n    AddV(v) {\r\n        return new Vector3(this.a + v.a, this.b + v.b, this.c + v.c);\r\n    }\r\n    SubstractV(v) {\r\n        return new Vector3(this.a - v.a, this.b - v.b, this.c - v.c);\r\n    }\r\n    toPointF() { return new PointF(this.a, this.b); }\r\n    toPoint() { return new Point(this.a, this.b); }\r\n}\r\nexport class Matrix3x3 {\r\n    // don't use the constructor directly but newMatrix, newTranslateMatrix, newRotateMatrix etc...\r\n    constructor(a, b, c, d, e, f, g, h, i, flags) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n        this.d = d;\r\n        this.e = e;\r\n        this.f = f;\r\n        this.g = g;\r\n        this.h = h;\r\n        this.i = i;\r\n        if ((b == 0) && (d == 0) && (a == 1) && (e == 1) && (i == 1) && (g == 0) && (h == 0)) {\r\n            flags |= Matrix3x3.Flag_TRANSLATION;\r\n            if ((c == 0) && (f == 0))\r\n                flags |= Matrix3x3.Flag_IDENTITY;\r\n        }\r\n        this.isTranslation = (flags & Matrix3x3.Flag_TRANSLATION) != 0;\r\n        this.isIdentity = (flags & Matrix3x3.Flag_IDENTITY) != 0;\r\n    }\r\n    clone() {\r\n        let flag = 0;\r\n        if (this.isTranslation)\r\n            flag |= Matrix3x3.Flag_TRANSLATION;\r\n        if (this.isIdentity)\r\n            flag |= Matrix3x3.Flag_IDENTITY;\r\n        return new Matrix3x3(this.a, this.b, this.c, this.d, this.e, this.f, this.g, this.h, this.i, flag);\r\n    }\r\n    get determinant() {\r\n        let detA = this.e * this.i - this.h * this.f;\r\n        let detB = this.d * this.i - this.g * this.f;\r\n        let detC = this.d * this.h - this.g * this.e;\r\n        return this.a * detA + -this.b * detB + this.c * detC;\r\n    }\r\n    get transpose() {\r\n        if (this.isIdentity)\r\n            return Matrix3x3.newIdentityMatrix();\r\n        return new Matrix3x3(this.a, this.d, this.g, this.b, this.e, this.h, this.c, this.f, this.i, Matrix3x3.Flag_NONE);\r\n    }\r\n    multiplyByV(v) {\r\n        if (this.isTranslation)\r\n            return new Vector3(this.c + v.a, this.f + v.b, 1);\r\n        return new Vector3(this.a * v.a + this.b * v.b + this.c * v.c, this.d * v.a + this.e * v.b + this.f * v.c, this.g * v.a + this.h * v.b + this.i * v.c);\r\n    }\r\n    static newMatrix(a, b, c, d, e, f, g, h, i) {\r\n        return new Matrix3x3(a, b, c, d, e, f, g, h, i, Matrix3x3.Flag_NONE);\r\n    }\r\n    static newTranslateMatrix(offsetX, offsetY) {\r\n        let flag = Matrix3x3.Flag_TRANSLATION;\r\n        if ((offsetX == 0) && (offsetY == 0))\r\n            flag |= Matrix3x3.Flag_IDENTITY;\r\n        return new Matrix3x3(1, 0, offsetX, 0, 1, offsetY, 0, 0, 1, flag);\r\n    }\r\n    static newRotateMatrix(AngleDeg) {\r\n        AngleDeg = Math.PI * AngleDeg / 180;\r\n        return new Matrix3x3(Math.cos(AngleDeg), -Math.sin(AngleDeg), 0, Math.sin(AngleDeg), -Math.cos(AngleDeg), 0, 0, 0, 1, Matrix3x3.Flag_NONE);\r\n    }\r\n    static newScaleMatrix(Coef) {\r\n        return new Matrix3x3(Coef, 0, 0, 0, Coef, 0, 0, 0, 1, Matrix3x3.Flag_NONE);\r\n    }\r\n    static newIdentityMatrix() {\r\n        return new Matrix3x3(1, 0, 0, 0, 1, 0, 0, 0, 1, Matrix3x3.Flag_IDENTITY | Matrix3x3.Flag_TRANSLATION);\r\n    }\r\n    toCSS() {\r\n        return \"matrix(\" + this.a.toString() + \",\" + this.d.toString() + \",\"\r\n            + this.b.toString() + \",\" + this.e.toString() + \",\"\r\n            + this.c.toString() + \",\" + this.f.toString() + \")\";\r\n    }\r\n    toString() {\r\n        return \"| \" + this.a.toFixed(2) + \" \" + this.b.toFixed(2) + \" \" + this.c.toFixed(2) + \" |\" + (this.isIdentity ? \" I\" : \"\") + \"\\n\"\r\n            + \"| \" + this.d.toFixed(2) + \" \" + this.e.toFixed(2) + \" \" + this.f.toFixed(2) + \" |\" + (this.isTranslation ? \" T\" : \"\") + \"\\n\"\r\n            + \"| \" + this.g.toFixed(2) + \" \" + this.g.toFixed(2) + \" \" + this.i.toFixed(2) + \" |\\n\";\r\n    }\r\n    multiplyByM(m) {\r\n        // | a b c |\r\n        // | d e f |\r\n        // | g h i |\r\n        if (this.isIdentity)\r\n            return m.clone();\r\n        if (m.isIdentity)\r\n            return this.clone();\r\n        if ((this.isTranslation) && (m.isTranslation))\r\n            return Matrix3x3.newTranslateMatrix(this.c + m.c, this.f + m.f);\r\n        return new Matrix3x3(this.a * m.a + this.b * m.d + this.c * m.g, this.a * m.b + this.b * m.e + this.c * m.h, this.a * m.c + this.b * m.f + this.c * m.i, this.d * m.a + this.e * m.d + this.f * m.g, this.d * m.b + this.e * m.e + this.f * m.h, this.d * m.c + this.e * m.f + this.f * m.i, this.g * m.a + this.h * m.d + this.i * m.g, this.g * m.b + this.h * m.e + this.i * m.h, this.g * m.c + this.h * m.f + this.i * m.i, Matrix3x3.Flag_NONE);\r\n    }\r\n    get inverse() {\r\n        // | a b c |   | a d g |\r\n        // | d e f |   | b e h |\r\n        // | g h i |   | c f i |\r\n        if (this.isIdentity)\r\n            return Matrix3x3.newIdentityMatrix();\r\n        if (this.isTranslation)\r\n            return Matrix3x3.newTranslateMatrix(-this.c, -this.f);\r\n        let det = this.determinant;\r\n        if (det == 0)\r\n            throw \"matrix cannot be inverted\";\r\n        let detA = this.e * this.i - this.f * this.h;\r\n        let detB = this.b * this.i - this.c * this.h;\r\n        let detC = this.b * this.f - this.c * this.e;\r\n        let detD = this.d * this.i - this.f * this.g;\r\n        let detE = this.a * this.i - this.c * this.g;\r\n        let detF = this.a * this.f - this.c * this.d;\r\n        let detG = this.d * this.h - this.e * this.g;\r\n        let detH = this.a * this.h - this.b * this.g;\r\n        let detI = this.a * this.e - this.b * this.d;\r\n        return new Matrix3x3(detA / det, -detB / det, detC / det, -detD / det, detE / det, -detF / det, detG / det, -detH / det, detI / det, Matrix3x3.Flag_NONE);\r\n    }\r\n    log() {\r\n        console.log(this.toString());\r\n    }\r\n}\r\nMatrix3x3.Flag_NONE = 0;\r\nMatrix3x3.Flag_IDENTITY = 1;\r\nMatrix3x3.Flag_TRANSLATION = 2;\r\n// enum emulation (javascript enum are so lame, we had to make ours)\r\n//  usage example\r\n//\r\n//  export class  HrzAlignment extends YDataRendering.YEnum\r\n//      { public static readonly LEFT   = new  YDataRendering.YEnumItem(\"LEFT\",\"Left\");\r\n//        public static readonly CENTER = new  YDataRendering.YEnumItem(\"CENTER\",\"Center\");\r\n//        public static readonly DECIMAL= new  YDataRendering.YEnumItem(\"DECIMAL\",\"Decimal\");\r\n//        public static readonly RIGHT  = new  YDataRendering.YEnumItem(\"RIGHT\",\"Right\");\r\n//     }\r\nexport class YEnum {\r\n    static fromString(container, value) {\r\n        let p = Object.getOwnPropertyNames(container);\r\n        for (let i = 0; i < p.length; i++) {\r\n            if (p[i] == value)\r\n                return container[value];\r\n        }\r\n        throw \"YEnum\" + value + \" is not a \" + container + \" value\";\r\n    }\r\n    static siblings(container) {\r\n        let res = [];\r\n        let p = Object.getOwnPropertyNames(container);\r\n        for (let i = 0; i < p.length; i++) {\r\n            if (container[p[i]] instanceof YEnumItem) {\r\n                res.push(container[p[i]]);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}\r\nexport class YEnumItem {\r\n    constructor(value, humanreadable, container) {\r\n        this._value = value;\r\n        this._container = container;\r\n        this._humanreadable = humanreadable;\r\n    }\r\n    fromString(value) { return YEnum.fromString(this._container, value); }\r\n    get toString() { return this._value.toString(); }\r\n    get description() { return this._humanreadable; }\r\n    get sibblings() { return YEnum.siblings(this._container); }\r\n}\r\nexport class ViewPortSettings {\r\n    constructor() {\r\n        this.IRLx = 0;\r\n        this.IRLy = 0;\r\n        this.zoomx = 0;\r\n        this.zoomy = 0;\r\n        this.Lmargin = 0;\r\n        this.Rmargin = 0;\r\n        this.Tmargin = 0;\r\n        this.Bmargin = 0;\r\n        this.Width = 0;\r\n        this.Height = 0;\r\n        this.Capture = false;\r\n        this.IRLCaptureStartX = 0;\r\n        this.CaptureStartY = 0;\r\n        this.OriginalXAxisMin = 0;\r\n        this.OriginalXAxisMax = 0;\r\n        this.OriginalIRLx = 0;\r\n        this.OriginalLmargin = 0;\r\n        this.OriginalZoomx = 0;\r\n    }\r\n}\r\nexport class YFont {\r\n    constructor(parentRenderer, directParent, size, fontChangeCallback) {\r\n        this._userData = null;\r\n        this._fontChangeCallback = null;\r\n        this._name = \"Arial\";\r\n        this._italic = false;\r\n        this._bold = false;\r\n        this._color = YColor.Black;\r\n        // if alternate color si set, then it will be used instead of regular color\r\n        this._alternateColor = null;\r\n        this._font = null;\r\n        this._brush = new YSolidBrush(YColor.Black);\r\n        this._parentRenderer = parentRenderer;\r\n        this._directParent = directParent;\r\n        this._fontChangeCallback = fontChangeCallback ? fontChangeCallback : null;\r\n        this._size = new Proportional(size ? size : 10, Proportional.ResizeRule.FIXED, parentRenderer, this, this.ResetFont);\r\n    }\r\n    get userData() { return this._userData; }\r\n    set userData(value) { this._userData = value; }\r\n    get directParent() { return this._directParent; }\r\n    ResetFont(source) {\r\n        this._font = null;\r\n        if (source != null)\r\n            this._parentRenderer.ProportionnalValueChanged(source);\r\n    }\r\n    get name() { return this._name; }\r\n    set name(value) {\r\n        this._name = value;\r\n        this.ResetFont(null);\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get hasChanged() { return this._font == null; }\r\n    get size() { return this._size.value; }\r\n    set size(value) {\r\n        if (value <= 0)\r\n            throw new RangeError(\"Size must be a positive value\");\r\n        value = (Math.round(100 * value) / 100);\r\n        this._size.value = value;\r\n        this.ResetFont(null);\r\n        if (this._fontChangeCallback != null)\r\n            this._fontChangeCallback(this);\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get italic() { return this._italic; }\r\n    set italic(value) {\r\n        if (this._italic != value) {\r\n            this._italic = value;\r\n            this.ResetFont(null);\r\n            this._parentRenderer.redraw();\r\n        }\r\n    }\r\n    get bold() { return this._bold; }\r\n    set bold(value) {\r\n        if (this._bold != value) {\r\n            this._bold = value;\r\n            this.ResetFont(null);\r\n            this._parentRenderer.redraw();\r\n        }\r\n    }\r\n    get color() { return this._color; }\r\n    set color(value) {\r\n        if (this._color != value) {\r\n            this._color = value;\r\n            this._brush = null;\r\n            this._parentRenderer.redraw();\r\n        }\r\n    }\r\n    get alternateColor() { return this._alternateColor; }\r\n    set alternateColor(value) {\r\n        if (this._alternateColor != value) {\r\n            this._alternateColor = value;\r\n            this._brush = null;\r\n            this._parentRenderer.redraw();\r\n        }\r\n    }\r\n    get fontObject() { return this._name ? this._name : \"Arial\"; }\r\n    get brush() {\r\n        if (this._brush == null)\r\n            this._brush = new YSolidBrush(this._alternateColor != null ? this._alternateColor : this._color);\r\n        return this._brush;\r\n    }\r\n    get sizeInPoints() { return this._size.value * 0.75; }\r\n    get sizeForCanvas() { return this._size.value * 1.15; }\r\n    get htmlCode() {\r\n        return (this._italic ? \"italic \" : \"\") + (this._bold ? \"bold \" : \"\") + this.sizeForCanvas.toString() + \"px \" + this._name;\r\n    }\r\n}\r\nexport class YSizeF {\r\n    constructor(font, st) {\r\n        this._w = 0;\r\n        this._h = 0;\r\n        this._lines = [];\r\n        this._linesCount = 0;\r\n        this._lineHeight = 0;\r\n        this._firstlineHeight = 0;\r\n        if (font != null) {\r\n            this._lineHeight = font.size * 1.25;\r\n            this._firstlineHeight = this._lineHeight * 0.75;\r\n            if (st.indexOf(\"\\n\") < 0) {\r\n                this._lines = [st];\r\n                this._linesCount = 1;\r\n            }\r\n            else {\r\n                this._lines = st.split(\"\\n\");\r\n                this._linesCount = this._lines.length;\r\n            }\r\n        }\r\n    }\r\n    get lines() { return this._lines; }\r\n    get linesCount() { return this._linesCount; }\r\n    get firstLineHeight() { return this._firstlineHeight; }\r\n    get lineHeight() { return this._lineHeight; }\r\n    get height() { return this._h; }\r\n    get width() { return this._w; }\r\n    set width(value) {\r\n        this._w = value;\r\n    }\r\n    set height(value) {\r\n        this._h = value;\r\n    }\r\n}\r\nexport class YTextRenderingHint {\r\n    constructor(value) {\r\n        this._value = 0;\r\n        this._value = value;\r\n    }\r\n    ;\r\n}\r\nYTextRenderingHint.SystemDefault = new YTextRenderingHint(0);\r\nYTextRenderingHint.SingleBitPerPixelGridFit = new YTextRenderingHint(1);\r\nYTextRenderingHint.SingleBitPerPixel = new YTextRenderingHint(2);\r\nYTextRenderingHint.AntiAliasGridFit = new YTextRenderingHint(3);\r\nYTextRenderingHint.AntiAlias = new YTextRenderingHint(4);\r\nYTextRenderingHint.ClearTypeGridFit = new YTextRenderingHint(5);\r\nexport class YSmoothingMode {\r\n    constructor(value) {\r\n        this._value = 0;\r\n        this._value = value;\r\n    }\r\n    ;\r\n}\r\nYSmoothingMode.Invalid = new YSmoothingMode(-1);\r\nYSmoothingMode.Default = new YSmoothingMode(0);\r\nYSmoothingMode.HighSpeed = new YSmoothingMode(1);\r\nYSmoothingMode.HighQuality = new YSmoothingMode(2);\r\nYSmoothingMode.None = new YSmoothingMode(3);\r\nYSmoothingMode.AntiAlias = new YSmoothingMode(4);\r\nclass YStringBuilder {\r\n    constructor() {\r\n        this._str = \"\";\r\n    }\r\n    AppendLine(s) { this._str += s + \"\\n\"; }\r\n    Append(s) { this._str += s; }\r\n    get contents() { return this._str; }\r\n}\r\nexport class YStringFormat {\r\n    constructor(clip) {\r\n        this._Alignment = 0 /* YStringFormat.StringAlignment.Near */;\r\n        this._LineAlignment = 0 /* YStringFormat.StringAlignment.Near */;\r\n        this._formatFlags = 0 /* YStringFormat.StringFormatFlags.default */;\r\n        this._Trimming = 0 /* YStringFormat.StringTrimming.None */;\r\n        this._clip = 16384 /* YStringFormat.StringFormatFlags.NoClip */;\r\n        this._clip = clip;\r\n    }\r\n    get Alignment() { return this._Alignment; }\r\n    set Alignment(value) { this._Alignment = value; }\r\n    get LineAlignment() { return this._LineAlignment; }\r\n    set LineAlignment(value) { this._LineAlignment = value; }\r\n    get FormatFlags() { return this._formatFlags; }\r\n    set FormatFlags(value) { this._formatFlags = value; }\r\n    get Trimming() { return this._Trimming; }\r\n    set Trimming(value) { this._Trimming = value; }\r\n}\r\nexport class YColor {\r\n    constructor(isHsl, transparency, r_h, g_s, b_l, isPredefined) {\r\n        this.hslConvertionDone = false;\r\n        this.rgbConvertionDone = false;\r\n        this.transparency = 0;\r\n        this.r = 0;\r\n        this.g = 0;\r\n        this.b = 0;\r\n        this.h = 0;\r\n        this.s = 0;\r\n        this.l = 0;\r\n        this._name = \"\";\r\n        this._htmlcode = this.computeHTMLCode();\r\n        this.hslConvertionDone = isHsl;\r\n        this.isHSLColor = isHsl;\r\n        this.transparency = transparency;\r\n        this._isPredefined = isPredefined === true;\r\n        if (isHsl) {\r\n            this.h = r_h;\r\n            this.s = g_s;\r\n            this.l = b_l;\r\n            this.hsl2rgb();\r\n        }\r\n        else {\r\n            this.r = r_h;\r\n            this.g = g_s;\r\n            this.b = b_l;\r\n            this.rgbConvertionDone = true;\r\n        }\r\n        this._htmlcode = this.computeHTMLCode();\r\n    }\r\n    get name() { return this._name; }\r\n    set predefname(value) { this._name = value; }\r\n    static get predefinedColors() {\r\n        if (YColor._predefinedColors == null) {\r\n            YColor._predefinedColors = {};\r\n            let names = Object.getOwnPropertyNames(YColor);\r\n            for (let i = 0; i < names.length; i++) {\r\n                if (YColor[names[i]] instanceof YColor) {\r\n                    YColor._predefinedColors[names[i]] = YColor[names[i]];\r\n                    YColor._predefinedColors[names[i]].predefname = names[i];\r\n                }\r\n            }\r\n        }\r\n        return YColor._predefinedColors;\r\n    }\r\n    static FromString(value) {\r\n        let valueUpper = value.toUpperCase();\r\n        let propNames = Object.getOwnPropertyNames(YColor);\r\n        for (let i = 0; i < propNames.length; i++) {\r\n            if (propNames[i].toUpperCase() == valueUpper) {\r\n                if (YColor[propNames[i]] instanceof YColor) {\r\n                    return YColor[propNames[i]];\r\n                    //let o: object = Reflect.get(YColor, value);\r\n                    //if (o instanceof YColor) return o as YColor;\r\n                }\r\n            }\r\n        }\r\n        if ((value.length == 7) && (value.substr(0, 1).toUpperCase() == '#')) {\r\n            let r = parseInt(value.substr(1, 2), 16);\r\n            let g = parseInt(value.substr(3, 2), 16);\r\n            let b = parseInt(value.substr(5, 2), 16);\r\n            return new YColor(false, 255, r, g, b);\r\n        }\r\n        if (value.length == 12) {\r\n            if (value.substr(0, 4).toUpperCase() == 'RGB:') {\r\n                let alpha = parseInt(value.substr(4, 2), 16);\r\n                let r = parseInt(value.substr(6, 2), 16);\r\n                let g = parseInt(value.substr(8, 2), 16);\r\n                let b = parseInt(value.substr(10, 2), 16);\r\n                return new YColor(false, alpha, r, g, b);\r\n            }\r\n            else if (value.substr(0, 4).toUpperCase() == 'HSL:') {\r\n                let alpha = parseInt(value.substr(4, 2), 16);\r\n                let h = parseInt(value.substr(6, 2), 16);\r\n                let s = parseInt(value.substr(8, 2), 16);\r\n                let l = parseInt(value.substr(10, 2), 16);\r\n                return new YColor(true, alpha, h, s, l);\r\n            }\r\n        }\r\n        return null;\r\n        // return   YColor.Black;  // unknown color, sorry\r\n    }\r\n    static hex(v) {\r\n        let s = v.toString(16);\r\n        if (s.length <= 1)\r\n            return \"0\" + s;\r\n        return s;\r\n    }\r\n    toString() {\r\n        if (this.isHSLColor) {\r\n            return \"HSL:\" + (YColor.hex(this.transparency) + YColor.hex(this.h) + YColor.hex(this.s) + YColor.hex(this.l)).toUpperCase();\r\n        }\r\n        else { // might need some optimization\r\n            let propNames = Object.getOwnPropertyNames(YColor);\r\n            for (let i = 0; i < propNames.length; i++) {\r\n                let o = Reflect.get(YColor, propNames[i]);\r\n                let c = o;\r\n                if ((c.alpha == this.alpha) && (c.red == this.red) && (c.green == this.green) && (c.blue == this.blue))\r\n                    return propNames[i];\r\n            }\r\n        }\r\n        return \"RGB:\" + (YColor.hex(this.transparency) + YColor.hex(this.r) + YColor.hex(this.g) + YColor.hex(this.b)).toUpperCase();\r\n    }\r\n    get svgCode() { return \"rgb(\" + this.r.toString() + \", \" + this.g.toString() + \", \" + this.b.toString() + \")\"; }\r\n    get alphaCode() { return (this.transparency / 255.0).toFixed(3); }\r\n    static hsl2rgbInt(temp1, temp2, temp3) {\r\n        if (temp3 >= 170)\r\n            return ((temp1 + 127) / 255) >> 0;\r\n        if (temp3 > 42) {\r\n            if (temp3 <= 127)\r\n                return ((temp2 + 127) / 255) >> 0;\r\n            temp3 = 170 - temp3;\r\n        }\r\n        return ((temp1 * 255 + (temp2 - temp1) * (6 * temp3) + 32512) / 65025) >> 0;\r\n    }\r\n    hsl2rgb() {\r\n        let temp1;\r\n        let temp2;\r\n        let temp3;\r\n        this.rgbConvertionDone = true;\r\n        if (this.s == 0) {\r\n            this.r = this.l;\r\n            this.g = this.l;\r\n            this.b = this.l;\r\n            return;\r\n        }\r\n        if (this.l <= 127) {\r\n            temp2 = this.l * (255 + this.s);\r\n        }\r\n        else {\r\n            temp2 = (this.l + this.s) * (255) - this.l * this.s;\r\n        }\r\n        temp1 = (510) * this.l - temp2;\r\n        // R\r\n        temp3 = (this.h + 85);\r\n        if (temp3 > 255)\r\n            temp3 = temp3 - 255;\r\n        this.r = YColor.hsl2rgbInt(temp1, temp2, temp3);\r\n        // G\r\n        temp3 = this.h;\r\n        if (temp3 > 255)\r\n            temp3 = temp3 - 255;\r\n        this.g = YColor.hsl2rgbInt(temp1, temp2, temp3);\r\n        // B\r\n        if (this.h >= 85) {\r\n            temp3 = this.h - 85;\r\n        }\r\n        else {\r\n            temp3 = this.h + 170;\r\n        }\r\n        this.b = YColor.hsl2rgbInt(temp1, temp2, temp3);\r\n        if (this.r > 255)\r\n            this.r = 255; // just in case\r\n        if (this.g > 255)\r\n            this.g = 255;\r\n        if (this.b > 255)\r\n            this.b = 255;\r\n    }\r\n    computeHSL() {\r\n        let R = this.r;\r\n        let G = this.g;\r\n        let B = this.b;\r\n        let H;\r\n        let S;\r\n        let L;\r\n        let max = (R > G ? R : G);\r\n        let min = (R < G ? R : G);\r\n        let correction = 0;\r\n        let divisor = 0;\r\n        this.hslConvertionDone = true;\r\n        if (B > max)\r\n            max = B;\r\n        if (B < min)\r\n            min = B;\r\n        L = ((max + min + 1) / 2) >> 0;\r\n        if (max == min) {\r\n            this.h = 0;\r\n            this.s = 0;\r\n            this.l = L;\r\n            return;\r\n        }\r\n        correction = ((max + min) / 2) >> 0;\r\n        if (L <= 127) {\r\n            S = ((255 * (max - min) + correction) / (max + min)) >> 0;\r\n        }\r\n        else {\r\n            S = ((255 * (max - min) + 255 - correction) / (510 - (max + min))) >> 0;\r\n        }\r\n        correction = 3 * (max - min);\r\n        divisor = 2 * correction;\r\n        if (R == max) {\r\n            H = 0;\r\n            R = G;\r\n            G = B;\r\n        }\r\n        else if (G == max) {\r\n            H = 85;\r\n            G = R;\r\n            R = B;\r\n        }\r\n        else {\r\n            H = 170;\r\n        }\r\n        if (R >= G) {\r\n            H += ((255 * (R - G) + correction) / divisor) >> 0;\r\n        }\r\n        else {\r\n            H += 255 - ((255 * (G - R) - correction) / divisor) >> 0;\r\n        }\r\n        if (H > 255)\r\n            H -= 255;\r\n        if (S > 255)\r\n            S = 255; // just in case\r\n        if (L > 255)\r\n            L = 255;\r\n        this.h = H;\r\n        this.s = S;\r\n        this.l = L;\r\n    }\r\n    get hue() {\r\n        if (!this.hslConvertionDone)\r\n            this.computeHSL();\r\n        return this.h;\r\n    }\r\n    get saturation() {\r\n        if (!this.hslConvertionDone)\r\n            this.computeHSL();\r\n        return this.s;\r\n    }\r\n    get luminosity() {\r\n        if (!this.hslConvertionDone)\r\n            this.computeHSL();\r\n        return this.l;\r\n    }\r\n    get red() {\r\n        if (!this.rgbConvertionDone)\r\n            this.hsl2rgb();\r\n        return this.r;\r\n    }\r\n    get green() {\r\n        if (!this.rgbConvertionDone)\r\n            this.hsl2rgb();\r\n        return this.g;\r\n    }\r\n    get blue() {\r\n        if (!this.rgbConvertionDone)\r\n            this.hsl2rgb();\r\n        return this.b;\r\n    }\r\n    get alpha() {\r\n        return this.transparency;\r\n    }\r\n    static FromArgb(a, r, g, b) {\r\n        return new YColor(false, a, r, g, b);\r\n    }\r\n    static FromAhsl(a, h, s, l) {\r\n        return new YColor(true, a, h, s, l);\r\n    }\r\n    get isHSL() { return this.isHSLColor; }\r\n    get isRGB() { return !this.isHSLColor; }\r\n    equal(c) {\r\n        if (this.isHSLColor) {\r\n            if (!c.isHSLColor)\r\n                return false;\r\n            if (c.hue != this.hue)\r\n                return false;\r\n            if (c.saturation != this.saturation)\r\n                return false;\r\n            if (c.luminosity != this.luminosity)\r\n                return false;\r\n            if (c.alpha != this.alpha)\r\n                return false;\r\n        }\r\n        else {\r\n            if (c.isHSLColor)\r\n                return false;\r\n            if (c.red != this.red)\r\n                return false;\r\n            if (c.green != this.green)\r\n                return false;\r\n            if (c.blue != this.blue)\r\n                return false;\r\n            if (c.alpha != this.alpha)\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    clone() {\r\n        if (this.isHSLColor)\r\n            return new YColor(true, this.transparency, this.h, this.s, this.l, this.isPredefined);\r\n        return new YColor(false, this.transparency, this.r, this.g, this.b, this.isPredefined);\r\n    }\r\n    get isPredefined() { return this._isPredefined; }\r\n    computeHTMLCode() {\r\n        let a = this.transparency / 255;\r\n        let r = this.r;\r\n        let g = this.g;\r\n        let b = this.b;\r\n        return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a.toFixed(3) + \")\";\r\n    }\r\n    get htmlCode() { return this._htmlcode; }\r\n}\r\nYColor.AliceBlue = new YColor(false, 0xFF, 0xF0, 0xF8, 0xFF, true);\r\nYColor.AntiqueWhite = new YColor(false, 0xFF, 0xFA, 0xEB, 0xD7, true);\r\nYColor.Aqua = new YColor(false, 0xFF, 0x00, 0xFF, 0xFF, true);\r\nYColor.Aquamarine = new YColor(false, 0xFF, 0x7F, 0xFF, 0xD4, true);\r\nYColor.Azure = new YColor(false, 0xFF, 0xF0, 0xFF, 0xFF, true);\r\nYColor.Beige = new YColor(false, 0xFF, 0xF5, 0xF5, 0xDC, true);\r\nYColor.Bisque = new YColor(false, 0xFF, 0xFF, 0xE4, 0xC4, true);\r\nYColor.Black = new YColor(false, 0xFF, 0x00, 0x00, 0x00, true);\r\nYColor.BlanchedAlmond = new YColor(false, 0xFF, 0xFF, 0xEB, 0xCD, true);\r\nYColor.Blue = new YColor(false, 0xFF, 0x00, 0x00, 0xFF, true);\r\nYColor.BlueViolet = new YColor(false, 0xFF, 0x8A, 0x2B, 0xE2, true);\r\nYColor.Brown = new YColor(false, 0xFF, 0xA5, 0x2A, 0x2A, true);\r\nYColor.BurlyWood = new YColor(false, 0xFF, 0xDE, 0xB8, 0x87, true);\r\nYColor.CadetBlue = new YColor(false, 0xFF, 0x5F, 0x9E, 0xA0, true);\r\nYColor.Chartreuse = new YColor(false, 0xFF, 0x7F, 0xFF, 0x00, true);\r\nYColor.Chocolate = new YColor(false, 0xFF, 0xD2, 0x69, 0x1E, true);\r\nYColor.Coral = new YColor(false, 0xFF, 0xFF, 0x7F, 0x50, true);\r\nYColor.CornflowerBlue = new YColor(false, 0xFF, 0x64, 0x95, 0xED, true);\r\nYColor.Cornsilk = new YColor(false, 0xFF, 0xFF, 0xF8, 0xDC, true);\r\nYColor.Crimson = new YColor(false, 0xFF, 0xDC, 0x14, 0x3C, true);\r\nYColor.Cyan = new YColor(false, 0xFF, 0x00, 0xFF, 0xFF, true);\r\nYColor.DarkBlue = new YColor(false, 0xFF, 0x00, 0x00, 0x8B, true);\r\nYColor.DarkCyan = new YColor(false, 0xFF, 0x00, 0x8B, 0x8B, true);\r\nYColor.DarkGoldenrod = new YColor(false, 0xFF, 0xB8, 0x86, 0x0B, true);\r\nYColor.DarkGray = new YColor(false, 0xFF, 0xA9, 0xA9, 0xA9, true);\r\nYColor.DarkGreen = new YColor(false, 0xFF, 0x00, 0x64, 0x00, true);\r\nYColor.DarkKhaki = new YColor(false, 0xFF, 0xBD, 0xB7, 0x6B, true);\r\nYColor.DarkMagenta = new YColor(false, 0xFF, 0x8B, 0x00, 0x8B, true);\r\nYColor.DarkOliveGreen = new YColor(false, 0xFF, 0x55, 0x6B, 0x2F, true);\r\nYColor.DarkOrange = new YColor(false, 0xFF, 0xFF, 0x8C, 0x00, true);\r\nYColor.DarkOrchid = new YColor(false, 0xFF, 0x99, 0x32, 0xCC, true);\r\nYColor.DarkRed = new YColor(false, 0xFF, 0x8B, 0x00, 0x00, true);\r\nYColor.DarkSalmon = new YColor(false, 0xFF, 0xE9, 0x96, 0x7A, true);\r\nYColor.DarkSeaGreen = new YColor(false, 0xFF, 0x8F, 0xBC, 0x8F, true);\r\nYColor.DarkSlateBlue = new YColor(false, 0xFF, 0x48, 0x3D, 0x8B, true);\r\nYColor.DarkSlateGray = new YColor(false, 0xFF, 0x2F, 0x4F, 0x4F, true);\r\nYColor.DarkTurquoise = new YColor(false, 0xFF, 0x00, 0xCE, 0xD1, true);\r\nYColor.DarkViolet = new YColor(false, 0xFF, 0x94, 0x00, 0xD3, true);\r\nYColor.DeepPink = new YColor(false, 0xFF, 0xFF, 0x14, 0x93, true);\r\nYColor.DeepSkyBlue = new YColor(false, 0xFF, 0x00, 0xBF, 0xFF, true);\r\nYColor.DimGray = new YColor(false, 0xFF, 0x69, 0x69, 0x69, true);\r\nYColor.DodgerBlue = new YColor(false, 0xFF, 0x1E, 0x90, 0xFF, true);\r\nYColor.Firebrick = new YColor(false, 0xFF, 0xB2, 0x22, 0x22, true);\r\nYColor.FloralWhite = new YColor(false, 0xFF, 0xFF, 0xFA, 0xF0, true);\r\nYColor.ForestGreen = new YColor(false, 0xFF, 0x22, 0x8B, 0x22, true);\r\nYColor.Fuchsia = new YColor(false, 0xFF, 0xFF, 0x00, 0xFF, true);\r\nYColor.Gainsboro = new YColor(false, 0xFF, 0xDC, 0xDC, 0xDC, true);\r\nYColor.GhostWhite = new YColor(false, 0xFF, 0xF8, 0xF8, 0xFF, true);\r\nYColor.Gold = new YColor(false, 0xFF, 0xFF, 0xD7, 0x00, true);\r\nYColor.Goldenrod = new YColor(false, 0xFF, 0xDA, 0xA5, 0x20, true);\r\nYColor.Gray = new YColor(false, 0xFF, 0x80, 0x80, 0x80, true);\r\nYColor.Green = new YColor(false, 0xFF, 0x00, 0x80, 0x00, true);\r\nYColor.GreenYellow = new YColor(false, 0xFF, 0xAD, 0xFF, 0x2F, true);\r\nYColor.Honeydew = new YColor(false, 0xFF, 0xF0, 0xFF, 0xF0, true);\r\nYColor.HotPink = new YColor(false, 0xFF, 0xFF, 0x69, 0xB4, true);\r\nYColor.IndianRed = new YColor(false, 0xFF, 0xCD, 0x5C, 0x5C, true);\r\nYColor.Indigo = new YColor(false, 0xFF, 0x4B, 0x00, 0x82, true);\r\nYColor.Ivory = new YColor(false, 0xFF, 0xFF, 0xFF, 0xF0, true);\r\nYColor.Khaki = new YColor(false, 0xFF, 0xF0, 0xE6, 0x8C, true);\r\nYColor.Lavender = new YColor(false, 0xFF, 0xE6, 0xE6, 0xFA, true);\r\nYColor.LavenderBlush = new YColor(false, 0xFF, 0xFF, 0xF0, 0xF5, true);\r\nYColor.LawnGreen = new YColor(false, 0xFF, 0x7C, 0xFC, 0x00, true);\r\nYColor.LemonChiffon = new YColor(false, 0xFF, 0xFF, 0xFA, 0xCD, true);\r\nYColor.LightBlue = new YColor(false, 0xFF, 0xAD, 0xD8, 0xE6, true);\r\nYColor.LightCoral = new YColor(false, 0xFF, 0xF0, 0x80, 0x80, true);\r\nYColor.LightCyan = new YColor(false, 0xFF, 0xE0, 0xFF, 0xFF, true);\r\nYColor.LightGoldenrodYellow = new YColor(false, 0xFF, 0xFA, 0xFA, 0xD2, true);\r\nYColor.LightGray = new YColor(false, 0xFF, 0xD3, 0xD3, 0xD3, true);\r\nYColor.LightGreen = new YColor(false, 0xFF, 0x90, 0xEE, 0x90, true);\r\nYColor.LightPink = new YColor(false, 0xFF, 0xFF, 0xB6, 0xC1, true);\r\nYColor.LightSalmon = new YColor(false, 0xFF, 0xFF, 0xA0, 0x7A, true);\r\nYColor.LightSeaGreen = new YColor(false, 0xFF, 0x20, 0xB2, 0xAA, true);\r\nYColor.LightSkyBlue = new YColor(false, 0xFF, 0x87, 0xCE, 0xFA, true);\r\nYColor.LightSlateGray = new YColor(false, 0xFF, 0x77, 0x88, 0x99, true);\r\nYColor.LightSteelBlue = new YColor(false, 0xFF, 0xB0, 0xC4, 0xDE, true);\r\nYColor.LightYellow = new YColor(false, 0xFF, 0xFF, 0xFF, 0xE0, true);\r\nYColor.Lime = new YColor(false, 0xFF, 0x00, 0xFF, 0x00, true);\r\nYColor.LimeGreen = new YColor(false, 0xFF, 0x32, 0xCD, 0x32, true);\r\nYColor.Linen = new YColor(false, 0xFF, 0xFA, 0xF0, 0xE6, true);\r\nYColor.Magenta = new YColor(false, 0xFF, 0xFF, 0x00, 0xFF, true);\r\nYColor.Maroon = new YColor(false, 0xFF, 0x80, 0x00, 0x00, true);\r\nYColor.MediumAquamarine = new YColor(false, 0xFF, 0x66, 0xCD, 0xAA, true);\r\nYColor.MediumBlue = new YColor(false, 0xFF, 0x00, 0x00, 0xCD, true);\r\nYColor.MediumOrchid = new YColor(false, 0xFF, 0xBA, 0x55, 0xD3, true);\r\nYColor.MediumPurple = new YColor(false, 0xFF, 0x93, 0x70, 0xDB, true);\r\nYColor.MediumSeaGreen = new YColor(false, 0xFF, 0x3C, 0xB3, 0x71, true);\r\nYColor.MediumSlateBlue = new YColor(false, 0xFF, 0x7B, 0x68, 0xEE, true);\r\nYColor.MediumSpringGreen = new YColor(false, 0xFF, 0x00, 0xFA, 0x9A, true);\r\nYColor.MediumTurquoise = new YColor(false, 0xFF, 0x48, 0xD1, 0xCC, true);\r\nYColor.MediumVioletRed = new YColor(false, 0xFF, 0xC7, 0x15, 0x85, true);\r\nYColor.MidnightBlue = new YColor(false, 0xFF, 0x19, 0x19, 0x70, true);\r\nYColor.MintCream = new YColor(false, 0xFF, 0xF5, 0xFF, 0xFA, true);\r\nYColor.MistyRose = new YColor(false, 0xFF, 0xFF, 0xE4, 0xE1, true);\r\nYColor.Moccasin = new YColor(false, 0xFF, 0xFF, 0xE4, 0xB5, true);\r\nYColor.NavajoWhite = new YColor(false, 0xFF, 0xFF, 0xDE, 0xAD, true);\r\nYColor.Navy = new YColor(false, 0xFF, 0x00, 0x00, 0x80, true);\r\nYColor.OldLace = new YColor(false, 0xFF, 0xFD, 0xF5, 0xE6, true);\r\nYColor.Olive = new YColor(false, 0xFF, 0x80, 0x80, 0x00, true);\r\nYColor.OliveDrab = new YColor(false, 0xFF, 0x6B, 0x8E, 0x23, true);\r\nYColor.Orange = new YColor(false, 0xFF, 0xFF, 0xA5, 0x00, true);\r\nYColor.OrangeRed = new YColor(false, 0xFF, 0xFF, 0x45, 0x00, true);\r\nYColor.Orchid = new YColor(false, 0xFF, 0xDA, 0x70, 0xD6, true);\r\nYColor.PaleGoldenrod = new YColor(false, 0xFF, 0xEE, 0xE8, 0xAA, true);\r\nYColor.PaleGreen = new YColor(false, 0xFF, 0x98, 0xFB, 0x98, true);\r\nYColor.PaleTurquoise = new YColor(false, 0xFF, 0xAF, 0xEE, 0xEE, true);\r\nYColor.PaleVioletRed = new YColor(false, 0xFF, 0xDB, 0x70, 0x93, true);\r\nYColor.PapayaWhip = new YColor(false, 0xFF, 0xFF, 0xEF, 0xD5, true);\r\nYColor.PeachPuff = new YColor(false, 0xFF, 0xFF, 0xDA, 0xB9, true);\r\nYColor.Peru = new YColor(false, 0xFF, 0xCD, 0x85, 0x3F, true);\r\nYColor.Pink = new YColor(false, 0xFF, 0xFF, 0xC0, 0xCB, true);\r\nYColor.Plum = new YColor(false, 0xFF, 0xDD, 0xA0, 0xDD, true);\r\nYColor.PowderBlue = new YColor(false, 0xFF, 0xB0, 0xE0, 0xE6, true);\r\nYColor.Purple = new YColor(false, 0xFF, 0x80, 0x00, 0x80, true);\r\nYColor.Red = new YColor(false, 0xFF, 0xFF, 0x00, 0x00, true);\r\nYColor.RosyBrown = new YColor(false, 0xFF, 0xBC, 0x8F, 0x8F, true);\r\nYColor.RoyalBlue = new YColor(false, 0xFF, 0x41, 0x69, 0xE1, true);\r\nYColor.SaddleBrown = new YColor(false, 0xFF, 0x8B, 0x45, 0x13, true);\r\nYColor.Salmon = new YColor(false, 0xFF, 0xFA, 0x80, 0x72, true);\r\nYColor.SandyBrown = new YColor(false, 0xFF, 0xF4, 0xA4, 0x60, true);\r\nYColor.SeaGreen = new YColor(false, 0xFF, 0x2E, 0x8B, 0x57, true);\r\nYColor.SeaShell = new YColor(false, 0xFF, 0xFF, 0xF5, 0xEE, true);\r\nYColor.Sienna = new YColor(false, 0xFF, 0xA0, 0x52, 0x2D, true);\r\nYColor.Silver = new YColor(false, 0xFF, 0xC0, 0xC0, 0xC0, true);\r\nYColor.SkyBlue = new YColor(false, 0xFF, 0x87, 0xCE, 0xEB, true);\r\nYColor.SlateBlue = new YColor(false, 0xFF, 0x6A, 0x5A, 0xCD, true);\r\nYColor.SlateGray = new YColor(false, 0xFF, 0x70, 0x80, 0x90, true);\r\nYColor.Snow = new YColor(false, 0xFF, 0xFF, 0xFA, 0xFA, true);\r\nYColor.SpringGreen = new YColor(false, 0xFF, 0x00, 0xFF, 0x7F, true);\r\nYColor.SteelBlue = new YColor(false, 0xFF, 0x46, 0x82, 0xB4, true);\r\nYColor.Tan = new YColor(false, 0xFF, 0xD2, 0xB4, 0x8C, true);\r\nYColor.Teal = new YColor(false, 0xFF, 0x00, 0x80, 0x80, true);\r\nYColor.Thistle = new YColor(false, 0xFF, 0xD8, 0xBF, 0xD8, true);\r\nYColor.Tomato = new YColor(false, 0xFF, 0xFF, 0x63, 0x47, true);\r\nYColor.Transparent = new YColor(false, 0x00, 0xFF, 0xFF, 0xFF, true);\r\nYColor.Turquoise = new YColor(false, 0xFF, 0x40, 0xE0, 0xD0, true);\r\nYColor.Violet = new YColor(false, 0xFF, 0xEE, 0x82, 0xEE, true);\r\nYColor.Wheat = new YColor(false, 0xFF, 0xF5, 0xDE, 0xB3, true);\r\nYColor.White = new YColor(false, 0xFF, 0xFF, 0xFF, 0xFF, true);\r\nYColor.WhiteSmoke = new YColor(false, 0xFF, 0xF5, 0xF5, 0xF5, true);\r\nYColor.Yellow = new YColor(false, 0xFF, 0xFF, 0xFF, 0x00, true);\r\nYColor.YellowGreen = new YColor(false, 0xFF, 0x9A, 0xCD, 0x32, true);\r\nYColor._predefinedColors = null;\r\nexport class YBrush {\r\n    constructor(c, disableAntialias) {\r\n        this._noAntiAlias = false;\r\n        this._color = c;\r\n        if (typeof (disableAntialias) != \"undefined\") {\r\n            this._noAntiAlias = disableAntialias;\r\n        }\r\n    }\r\n    get noAntiAlias() { return this._noAntiAlias; }\r\n    get color() { return this._color; }\r\n}\r\nexport class YSolidBrush extends YBrush {\r\n}\r\nexport class YLinearGradientBrush extends YBrush {\r\n    constructor(c1, c2) {\r\n        super(c1);\r\n        this._color1 = c1;\r\n        this._color2 = c2;\r\n    }\r\n    get color1() { return this._color1; }\r\n    get color2() { return this._color2; }\r\n}\r\nexport class YPen {\r\n    constructor(color, thickness, disableAntialias) {\r\n        this._thickness = 1.0;\r\n        this._color = YColor.Black;\r\n        this._noAntiAlias = false;\r\n        this._startCap = 1 /* YPen.LineCap.Square */;\r\n        this._endCap = 1 /* YPen.LineCap.Square */;\r\n        this._linejoin = YPen.LineJoin.Miter;\r\n        this._thickness = thickness;\r\n        this._color = thickness > 0 ? color : YColor.Transparent;\r\n        if (typeof (disableAntialias) != \"undefined\") {\r\n            this._noAntiAlias = disableAntialias;\r\n        }\r\n    }\r\n    get noAntiAlias() { return this._noAntiAlias; }\r\n    get lineWidth() { return this._thickness; }\r\n    get strokeStyle() { return this._color.htmlCode; }\r\n    get color() { return this._color; }\r\n    set startCap(value) { this._startCap = value; }\r\n    set endCap(value) { this._endCap = value; }\r\n    set linejoin(value) { this._linejoin = value; }\r\n}\r\n(function (YPen) {\r\n    let LineJoin;\r\n    (function (LineJoin) {\r\n        LineJoin[LineJoin[\"Miter\"] = 0] = \"Miter\";\r\n        LineJoin[LineJoin[\"Bevel\"] = 1] = \"Bevel\";\r\n        LineJoin[LineJoin[\"Round\"] = 2] = \"Round\";\r\n        LineJoin[LineJoin[\"MiterClipped\"] = 3] = \"MiterClipped\";\r\n    })(LineJoin = YPen.LineJoin || (YPen.LineJoin = {}));\r\n})(YPen || (YPen = {}));\r\nexport class YRectangle {\r\n    constructor(x, y, w, h) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.w = w;\r\n        this.h = h;\r\n    }\r\n}\r\nexport class Point {\r\n    constructor(valueX, valueY) {\r\n        this.X = valueX >> 0;\r\n        this.Y = valueY >> 0;\r\n    }\r\n}\r\nexport class PointF {\r\n    constructor(valueX, valueY) {\r\n        this.X = valueX;\r\n        this.Y = valueY;\r\n    }\r\n}\r\nexport class captureParametersSet {\r\n    constructor() {\r\n        this.captureType = YDataRenderer.CaptureType.SVG;\r\n        this.captureFolder = \"/\"; //Environment.GetFolderPath(Environment.SpecialFolder.MyPictures);\r\n        this.captureWidth = 1024;\r\n        this.captureHeight = 1024;\r\n        this.captureDPI = 96;\r\n    }\r\n}\r\nexport class GenericPanel {\r\n    constructor(parent, directParent) {\r\n        this._userData = null;\r\n        this._enabled = false;\r\n        this._panelTextAlign = GenericPanel.TextAlign.LEFT;\r\n        this._text = \"\";\r\n        this._bgColor = new YColor(false, 255, 255, 255, 192);\r\n        this._borderColor = YColor.Black;\r\n        this._borderthickness = 1.0;\r\n        this._padding = 10;\r\n        this._verticalMargin = 10;\r\n        this._horizontalMargin = 10;\r\n        this._bgBrush = null;\r\n        this._pen = null;\r\n        this._font = null;\r\n        this._directParent = directParent;\r\n        this._parentRenderer = parent;\r\n        this._font = new YFont(parent, this, 8, null);\r\n    }\r\n    get userData() { return this._userData; }\r\n    set userData(value) { this._userData = value; }\r\n    get directParent() { return this._directParent; }\r\n    get enabled() {\r\n        return this._enabled;\r\n    }\r\n    set enabled(value) {\r\n        if (this._enabled != value) {\r\n            this._enabled = value;\r\n            this._parentRenderer.clearCachedObjects();\r\n            this._parentRenderer.redraw();\r\n        }\r\n    }\r\n    get panelTextAlign() { return this._panelTextAlign; }\r\n    set panelTextAlign(value) {\r\n        this._panelTextAlign = value;\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get text() { return this._text; }\r\n    set text(value) {\r\n        this._text = value;\r\n        this._parentRenderer.clearCachedObjects();\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get bgColor() { return this._bgColor; }\r\n    set bgColor(value) {\r\n        this._bgColor = value;\r\n        this._bgBrush = null;\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get borderColor() { return this._borderColor; }\r\n    set borderColor(value) {\r\n        this._borderColor = value;\r\n        this._pen = null;\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get borderthickness() { return this._borderthickness; }\r\n    set borderthickness(value) {\r\n        if (value < 0)\r\n            throw \"Border thickness must be a positive value\";\r\n        this._borderthickness = value;\r\n        this._parentRenderer.clearCachedObjects();\r\n        this._pen = null;\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get padding() { return this._padding; }\r\n    set padding(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Padding must be a positive value\");\r\n        this._padding = value;\r\n        this._parentRenderer.clearCachedObjects();\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get verticalMargin() { return this._verticalMargin; }\r\n    set verticalMargin(value) {\r\n        this._verticalMargin = value;\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get horizontalMargin() { return this._horizontalMargin; }\r\n    set horizontalMargin(value) {\r\n        this._horizontalMargin = value;\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get bgBrush() {\r\n        if (this._bgBrush == null)\r\n            this._bgBrush = new YSolidBrush(this._bgColor);\r\n        return this._bgBrush;\r\n    }\r\n    get pen() {\r\n        if (this._pen == null) {\r\n            this._pen = new YPen(this._borderColor, this._borderthickness, true);\r\n        }\r\n        return this._pen;\r\n    }\r\n    get font() { return this._font; }\r\n}\r\n(function (GenericPanel) {\r\n    class HorizontalAlignPosEnumItem extends YEnumItem {\r\n        constructor(value, humanreadable, container) {\r\n            super(value, humanreadable, HorizontalAlignPos);\r\n        }\r\n    }\r\n    GenericPanel.HorizontalAlignPosEnumItem = HorizontalAlignPosEnumItem;\r\n    class HorizontalAlignPos extends YEnum {\r\n    }\r\n    HorizontalAlignPos.LEFT = new HorizontalAlignPosEnumItem(\"LEFT\", \"Left\");\r\n    HorizontalAlignPos.CENTER = new HorizontalAlignPosEnumItem(\"CENTER\", \"Center\");\r\n    HorizontalAlignPos.RIGHT = new HorizontalAlignPosEnumItem(\"RIGHT\", \"Right\");\r\n    GenericPanel.HorizontalAlignPos = HorizontalAlignPos;\r\n    class VerticalAlignPosEnumItem extends YEnumItem {\r\n        constructor(value, humanreadable, container) {\r\n            super(value, humanreadable, VerticalAlignPos);\r\n        }\r\n    }\r\n    GenericPanel.VerticalAlignPosEnumItem = VerticalAlignPosEnumItem;\r\n    class VerticalAlignPos extends YEnum {\r\n    }\r\n    VerticalAlignPos.TOP = new VerticalAlignPosEnumItem(\"TOP\", \"Top\");\r\n    VerticalAlignPos.CENTER = new VerticalAlignPosEnumItem(\"CENTER\", \"Center\");\r\n    VerticalAlignPos.BOTTOM = new VerticalAlignPosEnumItem(\"BOTTOM\", \"Bottom\");\r\n    GenericPanel.VerticalAlignPos = VerticalAlignPos;\r\n    class TextAlignEnumItem extends YEnumItem {\r\n        constructor(value, humanreadable, container) {\r\n            super(value, humanreadable, TextAlign);\r\n        }\r\n    }\r\n    GenericPanel.TextAlignEnumItem = TextAlignEnumItem;\r\n    class TextAlign extends YEnum {\r\n    }\r\n    TextAlign.LEFT = new TextAlignEnumItem(\"LEFT\", \"Left\");\r\n    TextAlign.CENTER = new TextAlignEnumItem(\"CENTER\", \"Center\");\r\n    TextAlign.RIGHT = new TextAlignEnumItem(\"RIGHT\", \"Right\");\r\n    GenericPanel.TextAlign = TextAlign;\r\n})(GenericPanel || (GenericPanel = {}));\r\nexport class MessagePanel extends GenericPanel {\r\n    constructor(parent, directParent) {\r\n        super(parent, directParent);\r\n        this._panelHrzAlign = GenericPanel.HorizontalAlignPos.CENTER;\r\n        this._panelVrtAlign = GenericPanel.VerticalAlignPos.CENTER;\r\n    }\r\n    get panelHrzAlign() { return this._panelHrzAlign; }\r\n    set panelHrzAlign(value) {\r\n        this._panelHrzAlign = value;\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get panelVrtAlign() { return this._panelVrtAlign; }\r\n    set panelVrtAlign(value) {\r\n        this._panelVrtAlign = value;\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n}\r\nexport class AnnotationPanel extends GenericPanel {\r\n    constructor(parent, directParent) {\r\n        super(parent, directParent);\r\n        this._overlap = false;\r\n        this._positionOffsetX = 50;\r\n        this._positionOffsetY = 50;\r\n        this._panelHrzAlign = GenericPanel.HorizontalAlignPos.CENTER;\r\n        this._panelVrtAlign = GenericPanel.VerticalAlignPos.TOP;\r\n    }\r\n    get overlap() { return this._overlap; }\r\n    set overlap(value) {\r\n        if ((!value) && (this._panelHrzAlign == GenericPanel.HorizontalAlignPos.CENTER) && (this._panelVrtAlign == GenericPanel.VerticalAlignPos.CENTER)) {\r\n            this._panelVrtAlign = GenericPanel.VerticalAlignPos.TOP;\r\n        }\r\n        this._overlap = value;\r\n        this._parentRenderer.clearCachedObjects();\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get positionOffsetX() { return this._positionOffsetX; }\r\n    set positionOffsetX(value) {\r\n        this._positionOffsetX = value;\r\n        this._parentRenderer.clearCachedObjects();\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get positionOffsetY() { return this._positionOffsetY; }\r\n    set positionOffsetY(value) {\r\n        this._positionOffsetY = value;\r\n        this._parentRenderer.clearCachedObjects();\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get panelHrzAlign() { return this._panelHrzAlign; }\r\n    set panelHrzAlign(value) {\r\n        if ((!this._overlap) && (value == GenericPanel.HorizontalAlignPos.CENTER) && (this._panelVrtAlign == GenericPanel.VerticalAlignPos.CENTER)) {\r\n            this._panelVrtAlign = GenericPanel.VerticalAlignPos.TOP;\r\n        }\r\n        this._panelHrzAlign = value;\r\n        this._parentRenderer.clearCachedObjects();\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get panelVrtAlign() { return this._panelVrtAlign; }\r\n    set panelVrtAlign(value) {\r\n        if ((!this._overlap) && (value == GenericPanel.VerticalAlignPos.CENTER) && (this._panelHrzAlign == GenericPanel.HorizontalAlignPos.CENTER)) {\r\n            this._panelHrzAlign = GenericPanel.HorizontalAlignPos.RIGHT;\r\n        }\r\n        this._panelVrtAlign = value;\r\n        this._parentRenderer.clearCachedObjects();\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n}\r\nexport class Zone {\r\n    constructor(parentRenderer, directParent) {\r\n        this._userData = null;\r\n        this._zoneBrush = null;\r\n        this._color = YColor.Red;\r\n        this._visible = false;\r\n        this._min = 0;\r\n        this._max = 100;\r\n        this._directParent = directParent;\r\n        this._parentRenderer = parentRenderer;\r\n    }\r\n    get directParent() { return this._directParent; }\r\n    get userData() { return this._userData; }\r\n    set userData(value) { this._userData = value; }\r\n    resetCache() { }\r\n    get zoneBrush() {\r\n        if (this._zoneBrush == null)\r\n            this._zoneBrush = new YSolidBrush(this._color);\r\n        return this._zoneBrush;\r\n    }\r\n    get color() { return this._color; }\r\n    set color(value) {\r\n        this._color = value;\r\n        this._zoneBrush = null;\r\n        if (this.visible)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get visible() { return this._visible; }\r\n    set visible(value) {\r\n        this._visible = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    set_minMax(min, max) {\r\n        if (min > max)\r\n            throw new RangeError(\"Min cannot be greater than max \");\r\n        this._min = min;\r\n        this._max = max;\r\n        this.resetCache();\r\n        if (this.visible)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get min() { return this._min; }\r\n    set min(value) {\r\n        if ((value >= this._max) && !YDataRenderer.minMaxCheckDisabled) {\r\n            throw new RangeError(\"Min cannot be greater than max (\" + this._max.toString() + \")\");\r\n        }\r\n        this._min = value;\r\n        this.resetCache();\r\n        if (this.visible)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get max() { return this._max; }\r\n    set max(value) {\r\n        if ((value <= this._min) && !YDataRenderer.minMaxCheckDisabled) {\r\n            throw new RangeError(\"Max cannot be greater than min (\" + this._min.toString() + \")\");\r\n        }\r\n        this._max = value;\r\n        this.resetCache();\r\n        if (this.visible)\r\n            this._parentRenderer.redraw();\r\n    }\r\n}\r\nexport class Proportional {\r\n    constructor(value, resizeRule, parentRenderer, directParent, resetCallBack) {\r\n        this._reset = null;\r\n        this._refWidth = 1;\r\n        this._refHeight = 1;\r\n        this._refValue = 1;\r\n        this.valueStack = [];\r\n        this._resizeRule = Proportional.ResizeRule.FIXED;\r\n        this._userData = null;\r\n        this._reset = resetCallBack;\r\n        this._parentRenderer = parentRenderer;\r\n        this._value = value;\r\n        this._resizeRule = resizeRule;\r\n        this._directParent = directParent;\r\n        this.set_refPoint();\r\n        this._parentRenderer.AddNewProportionalToSizeValue(this);\r\n    }\r\n    get userData() { return this._userData; }\r\n    set userData(value) { this._userData = value; }\r\n    get directParent() { return this._directParent; }\r\n    get value() { return this._value; }\r\n    set value(v) {\r\n        this._value = v;\r\n        this.set_refPoint();\r\n        if (this._reset != null)\r\n            this._reset(this);\r\n    }\r\n    get resizeRule() { return this._resizeRule; }\r\n    set resizeRule(value) {\r\n        this.set_refPoint();\r\n        this._resizeRule = value;\r\n    }\r\n    set_refPoint() {\r\n        this._refWidth = Math.max(1, this._parentRenderer.usableUiWidth());\r\n        this._refHeight = Math.max(1, this._parentRenderer.usableUiHeight());\r\n        this._refValue = this._value;\r\n    }\r\n    containerResizedPushNewCoef(coef) {\r\n        this.valueStack.push(this._value);\r\n        this._value = Math.round(100 * this._refValue * coef) / 100;\r\n        if (this._reset != null)\r\n            this._reset(this);\r\n    }\r\n    containerResizedPop() {\r\n        if (this.valueStack.length <= 0)\r\n            throw new RangeError(\"Can't pop, empty stack.\");\r\n        this._value = this.valueStack.pop();\r\n        if (this._reset != null)\r\n            this._reset(this);\r\n    }\r\n    static resizeCoef(rule, refWidth, refHeight, newWidth, newHeight) {\r\n        switch (rule) {\r\n            case Proportional.ResizeRule.RELATIVETOWIDTH:\r\n                return newWidth / refWidth;\r\n            case Proportional.ResizeRule.RELATIVETOHEIGHT:\r\n                return newHeight / refHeight;\r\n            case Proportional.ResizeRule.RELATIVETOBOTH:\r\n                return Math.min(newHeight / refHeight, newWidth / refWidth); // original\r\n        }\r\n        return 1.0;\r\n    }\r\n    containerResized(newWidth, newHeight) {\r\n        this._value = Math.round(100 * this._refValue * Proportional.resizeCoef(this._resizeRule, this._refWidth, this._refHeight, newWidth, newHeight)) / 100;\r\n        if (this._reset != null)\r\n            this._reset(this);\r\n    }\r\n    forceChangeCallback() {\r\n        if (this._reset != null)\r\n            this._reset(this);\r\n    }\r\n}\r\n(function (Proportional) {\r\n    class ResizeRuleEnumItem extends YEnumItem {\r\n        constructor(value, humanreadable, container) {\r\n            super(value, humanreadable, ResizeRule);\r\n        }\r\n    }\r\n    Proportional.ResizeRuleEnumItem = ResizeRuleEnumItem;\r\n    class ResizeRule extends YEnum {\r\n    }\r\n    ResizeRule.FIXED = new ResizeRuleEnumItem(\"FIXED\", \"Fixed\");\r\n    ResizeRule.RELATIVETOWIDTH = new ResizeRuleEnumItem(\"RELATIVETOWIDTH\", \"Relative to Width\");\r\n    ResizeRule.RELATIVETOHEIGHT = new ResizeRuleEnumItem(\"RELATIVETOHEIGHT\", \"Relative to height\");\r\n    ResizeRule.RELATIVETOBOTH = new ResizeRuleEnumItem(\"RELATIVETOBOTH\", \"Relative to Width and Height\");\r\n    Proportional.ResizeRule = ResizeRule;\r\n})(Proportional || (Proportional = {}));\r\nexport class YDataRenderer {\r\n    constructor(UIContainer, logFunction) {\r\n        this._redrawAllowed = 1;\r\n        this._refWidth = 1;\r\n        this._refHeight = 1;\r\n        this.rendererTimingTotal = 0;\r\n        this.rendererTimingCount = 0;\r\n        this._PatchAnnotationCallback = null;\r\n        this._logFunction = null;\r\n        this._annotationPanels = [];\r\n        this._userData = null;\r\n        this.documentVisibiltyChangeFct = null;\r\n        this.containerResizedFct = null;\r\n        this._getCaptureParameters = null;\r\n        this.OnDblClick = null;\r\n        this.OnRightClick = null;\r\n        this._messagePanels = [];\r\n        this._Scr2ElmMatrix = null;\r\n        this._Elm2ScrMatrix = null;\r\n        this.ProportionalToSizeValues = [];\r\n        this._proportionnalValueChangeCallback = null;\r\n        this._resizeRule = Proportional.ResizeRule.FIXED;\r\n        this.requestAnimationFrameID = null;\r\n        this._snapshotPanel = null;\r\n        this._snapshotTimer = null;\r\n        this._AllowPrintScreenCapture = false;\r\n        if (!YDataRenderer.globalMouseMoveSet) {\r\n            document.addEventListener(\"mousemove\", e => { YDataRenderer.globalMouseMove(e); });\r\n            YDataRenderer.globalMouseMoveSet = true;\r\n        }\r\n        this.UIContainer = UIContainer;\r\n        this.UIContainer.width = this.getContainerInnerWidth();\r\n        this.UIContainer.height = this.getContainerInnerHeight();\r\n        //this.UIContainer.SizeMode = PictureBoxSizeMode.Normal;\r\n        this._logFunction = logFunction;\r\n        this.parentForm = UIContainer.ownerDocument;\r\n        this._annotationPanels = [];\r\n        this._messagePanels = [];\r\n        this.DisableRedraw();\r\n        this._snapshotPanel = this.addMessagePanel();\r\n        this._snapshotPanel.panelTextAlign = MessagePanel.TextAlign.CENTER;\r\n        this._snapshotPanel.text = \"Captured to clipboard\";\r\n        this._snapshotPanel.panelHrzAlign = MessagePanel.HorizontalAlignPos.CENTER;\r\n        this._snapshotPanel.panelVrtAlign = MessagePanel.VerticalAlignPos.CENTER;\r\n        this._snapshotPanel.bgColor = new YColor(false, 200, 0xcc, 0xf7, 0xa1);\r\n        this._snapshotPanel.font.size = 16;\r\n        this.AllowRedrawNoRefresh();\r\n        this.containerResizedFct = () => { this.containerResize(null, null); };\r\n        document.addEventListener('resize', this.containerResizedFct);\r\n        this.resetRefrenceSize();\r\n        this.documentVisibiltyChangeFct = () => {\r\n            if (document.visibilityState === 'visible') {\r\n                this.redraw();\r\n            }\r\n        };\r\n        document.addEventListener('visibilitychange', this.documentVisibiltyChangeFct);\r\n    }\r\n    get annotationPanels() { return this._annotationPanels; }\r\n    get userData() { return this._userData; }\r\n    static get minMaxCheckDisabled() { return YDataRenderer._disableMinMaxCheck; }\r\n    static set minMaxCheckDisabled(value) { YDataRenderer._disableMinMaxCheck = value; }\r\n    resetlegendPens() { }\r\n    get getCaptureParameters() { return this._getCaptureParameters; }\r\n    set getCaptureParameters(value) { this._getCaptureParameters = value; }\r\n    get messagePanels() { return this._messagePanels; }\r\n    static globalMouseMove(e) {\r\n        YDataRenderer.globalMouseX = e.pageX;\r\n        YDataRenderer.globalMouseY = e.pageY;\r\n    }\r\n    clearTransformationMatrix() {\r\n        this._Scr2ElmMatrix = null;\r\n        this._Elm2ScrMatrix = null;\r\n    }\r\n    // This is the one of the \"magic\" parts, instead on relying\r\n    // on each HTML element offsetLeft and offsetTop coordinates,we\r\n    // compute the whole transformation matrix for the canvas Element,\r\n    // this way, CSS transformations, including scale and rotation are\r\n    // handled property.  This is important since Yocto-Visualization\r\n    // allows in to inject a widget inside an arbitrary DIV. This\r\n    // also importnat to be able to make these convertion from\r\n    // any position on the whole page because of drag operations\r\n    findElementAbsolutePosition(el) {\r\n        let staticFound = false;\r\n        let relativeFound = false;\r\n        let dx = 0;\r\n        let dy = 0;\r\n        while (el != null) {\r\n            let style = window.getComputedStyle(el);\r\n            if ((!relativeFound) && (style.position == \"static\") && (!staticFound)) {\r\n                dx = el.offsetLeft + parseFloat(style.borderLeftWidth);\r\n                dy = el.offsetTop + parseFloat(style.borderTopWidth);\r\n                staticFound = true;\r\n            }\r\n            if ((style.position == \"relative\") || (style.position == \"absolute\")) {\r\n                dx += el.offsetLeft + parseFloat(style.borderLeftWidth);\r\n                dy += el.offsetTop + parseFloat(style.borderTopWidth);\r\n                relativeFound = true;\r\n            }\r\n            el = el.parentElement;\r\n        }\r\n        return new PointF(dx, dy);\r\n    }\r\n    get Elm2ScrMatrix() {\r\n        if (this._Elm2ScrMatrix == null) {\r\n            let el = this.UIContainer;\r\n            // compute el and its parents absolute absolution relative to page origin\r\n            // turns out it is a bit tricky when nested div have diffrent style.position\r\n            // values static/relative/absolute\r\n            let AsolutePositionsStack = [];\r\n            while (el != null) {\r\n                AsolutePositionsStack.push(this.findElementAbsolutePosition(el));\r\n                el = el.parentElement;\r\n            }\r\n            el = this.UIContainer;\r\n            let MatrixStack = [];\r\n            let staticFound = false;\r\n            let relativeFound = false;\r\n            let index = 0;\r\n            while (el != null) { //console.log(\"UP \"+el.id);\r\n                let parent = el.parentElement;\r\n                let style = window.getComputedStyle(el);\r\n                //console.log(el.id+\": position=\"+style.position+\" offset= (\"+el.offsetLeft.toString(2).padStart(16)+\",\"+el.offsetTop.toString(2).padStart(16)+\") (\"+el.offsetLeft+\",\"+el.offsetTop+\")  border= (\"+parseFloat(style.borderLeftWidth)+\",\"+parseFloat(style.borderTopWidth)+\") computed pos=(\"+AsolutePositionsStack[index].X+\",\"+AsolutePositionsStack[index].Y+\")\" );\r\n                let dx = AsolutePositionsStack[index].X;\r\n                let dy = AsolutePositionsStack[index].Y;\r\n                if (index < AsolutePositionsStack.length - 1) {\r\n                    dx -= AsolutePositionsStack[index + 1].X;\r\n                    dy -= AsolutePositionsStack[index + 1].Y;\r\n                }\r\n                //console.log(\"offset=\"+dx.toString()+\",\"+dy.toString());\r\n                let matrix = style['transform'];\r\n                if (matrix != \"none\") { //console.log(\"matrix=\"+matrix)\r\n                    let matrixStr = matrix.match(/matrix.*\\((.+)\\)/)[1].split(', ');\r\n                    let matrixValues = [];\r\n                    for (let i = 0; i < 6; i++) {\r\n                        matrixValues.push(parseFloat(matrixStr[i]));\r\n                    }\r\n                    let OriginMatrixMatrixBefore = null;\r\n                    let TransformMatrix = Matrix3x3.newMatrix(matrixValues[0], matrixValues[2], matrixValues[4], matrixValues[1], matrixValues[3], matrixValues[5], 0, 0, 1);\r\n                    let OriginMatrixMatrixAfter = null;\r\n                    if (style.transformOrigin) { //console.log(\"transformOrigin=\"+style.transformOrigin)\r\n                        let parts = style.transformOrigin.split(\" \");\r\n                        let Ox = Number.parseFloat(parts[0]);\r\n                        let Oy = Number.parseFloat(parts[1]);\r\n                        OriginMatrixMatrixBefore = Matrix3x3.newTranslateMatrix(-Ox, -Oy);\r\n                        OriginMatrixMatrixAfter = Matrix3x3.newTranslateMatrix(Ox, Oy);\r\n                    } //else  console.log(\"No transform\");\r\n                    if (OriginMatrixMatrixBefore != null)\r\n                        MatrixStack.push(OriginMatrixMatrixBefore);\r\n                    if (TransformMatrix != null)\r\n                        MatrixStack.push(TransformMatrix);\r\n                    if (OriginMatrixMatrixAfter != null)\r\n                        MatrixStack.push(OriginMatrixMatrixAfter);\r\n                } // else  console.log(\"No matrix\");\r\n                if ((dx != 0) || (dy != 0))\r\n                    MatrixStack.push(Matrix3x3.newTranslateMatrix(dx, dy));\r\n                el = parent;\r\n                index++;\r\n            }\r\n            this._Elm2ScrMatrix = Matrix3x3.newIdentityMatrix();\r\n            for (let i = MatrixStack.length - 1; i >= 0; i--) {\r\n                this._Elm2ScrMatrix = this._Elm2ScrMatrix.multiplyByM(MatrixStack[i]);\r\n            }\r\n        }\r\n        return this._Elm2ScrMatrix;\r\n    }\r\n    get Scr2ElmMatrix() {\r\n        if (this._Scr2ElmMatrix == null) {\r\n            this._Scr2ElmMatrix = this.Elm2ScrMatrix.inverse;\r\n        }\r\n        return this._Scr2ElmMatrix;\r\n    }\r\n    addAnnotationPanel() {\r\n        let p = new AnnotationPanel(this, this);\r\n        this._annotationPanels.push(p);\r\n        this.redraw();\r\n        return p;\r\n    }\r\n    AllowRedraw() {\r\n        this._redrawAllowed--;\r\n        if (this._redrawAllowed < 0)\r\n            throw new RangeError(\"Too many AllowRedraw calls\");\r\n        if (this._redrawAllowed == 0)\r\n            this.redraw();\r\n    }\r\n    AllowRedrawNoRefresh() {\r\n        this._redrawAllowed--;\r\n        if (this._redrawAllowed < 0)\r\n            throw new RangeError(\"Too many AllowRedraw calls\");\r\n    }\r\n    DisableRedraw() {\r\n        this._redrawAllowed++;\r\n    }\r\n    AddNewProportionalToSizeValue(v) {\r\n        if (this.ProportionalToSizeValues.indexOf(v) < 0)\r\n            this.ProportionalToSizeValues.push(v);\r\n    }\r\n    canRedraw() {\r\n        return (this._redrawAllowed == 0);\r\n    }\r\n    setPatchAnnotationCallback(callback) { this._PatchAnnotationCallback = callback; }\r\n    patchAnnotation(text) {\r\n        text = text.replace(\"\\\\n\", \"\\n\");\r\n        if (text.indexOf('$') < 0)\r\n            return text;\r\n        let now = new Date();\r\n        text = text.replace(\"$DAY$\", now.getDay().toString());\r\n        text = text.replace(\"$MONTH$\", now.getMonth().toString());\r\n        text = text.replace(\"$YEAR$\", now.getFullYear().toString());\r\n        text = text.replace(\"$HOUR$\", now.getHours().toString());\r\n        text = text.replace(\"$MINUTE$\", now.getMinutes().toString());\r\n        text = text.replace(\"$SECOND$\", now.getSeconds().toString());\r\n        if (this._PatchAnnotationCallback != null)\r\n            text = this._PatchAnnotationCallback(text);\r\n        return text;\r\n    }\r\n    mouseLocalPosition() {\r\n        let v = Vector3.FromXYCoord(YDataRenderer.globalMouseX, YDataRenderer.globalMouseY);\r\n        let m = this.Scr2ElmMatrix;\r\n        //   let canvasRect :  ClientRect = this.UIContainer.getBoundingClientRect();\r\n        //   if (YDataRenderer.globalMouseX<= canvasRect.left) return null;\r\n        //   if (YDataRenderer.globalMouseX>= canvasRect.left+canvasRect.width) return null;\r\n        //   if (YDataRenderer.globalMouseY<= canvasRect.top) return null;\r\n        //   if (YDataRenderer.globalMouseY>= canvasRect.top+canvasRect.height) return null;\r\n        let p = m.multiplyByV(v).toPoint();\r\n        //     console.log(\" Traditional : \"+ (YDataRenderer.globalMouseX- canvasRect.left).toString()+\",\"+(YDataRenderer.globalMouseY- canvasRect.top).toString()\r\n        //     +\" Matrix : \"+ p.X.toString()+\", \"+ p.Y.toString());\r\n        if ((p.X < 0) || (p.Y < 0) || (p.X > this.UIContainer.offsetWidth) || (p.Y > this.UIContainer.offsetHeight))\r\n            return null;\r\n        return p;\r\n        //   return new Point( YDataRenderer.globalMouseX- canvasRect.left,\r\n        //                      YDataRenderer.globalMouseY- canvasRect.top);\r\n    }\r\n    set proportionnalValueChangeCallback(value) {\r\n        this._proportionnalValueChangeCallback = value;\r\n    }\r\n    ProportionnalValueChanged(source) {\r\n        if (this._proportionnalValueChangeCallback != null)\r\n            this._proportionnalValueChangeCallback(source);\r\n    }\r\n    getContainerInnerWidth() {\r\n        return this.UIContainer.offsetWidth;\r\n        // let r: DOMRect  = this.UIContainer.getBoundingClientRect();\r\n        //  return r.width;\r\n        // return  this.UIContainer.width;\r\n    }\r\n    getContainerInnerHeight() {\r\n        return this.UIContainer.offsetHeight;\r\n        //let r: DOMRect  = this.UIContainer.getBoundingClientRect();\r\n        //return r.height;\r\n        //return  this.UIContainer.height;\r\n    }\r\n    Draw(timestamp) {\r\n        if (!this.canRedraw())\r\n            return 0;\r\n        let w = this.getContainerInnerWidth();\r\n        let h = this.getContainerInnerHeight();\r\n        if ((w <= 5) || (h <= 5))\r\n            return 0;\r\n        this.DisableRedraw();\r\n        let offscreenCanvas = document.createElement('canvas');\r\n        offscreenCanvas.width = w;\r\n        offscreenCanvas.height = h;\r\n        //let DrawArea : CanvasRenderingContext2D = this.UIContainer.getContext('2d');\r\n        let g = new YGraphics(offscreenCanvas, w, h, 90);\r\n        let start = performance.now();\r\n        try {\r\n            this.Render(g, w, h);\r\n            /*\r\n          let p: Point | null = this.mouseLocalPosition();\r\n          if (p!=null)\r\n          {\r\n            let ctx: CanvasRenderingContext2D = <CanvasRenderingContext2D>offscreenCanvas.getContext(\"2d\");\r\n            ctx.fillStyle = \"red\";\r\n            ctx.font = \" 24px Arial\";\r\n            ctx.fillText(p.X.toString()+\",\"+p.Y.toString(), 1, 1);\r\n          }*/\r\n        }\r\n        catch (e) {\r\n            debugger;\r\n            this.log(\"Rendering error: \" + e.message);\r\n        }\r\n        let elapsed = performance.now() - start;\r\n        let drawArea = this.UIContainer.getContext('2d');\r\n        drawArea.clearRect(0, 0, w, h);\r\n        drawArea.drawImage(offscreenCanvas, 0, 0);\r\n        this.rendererTimingTotal += elapsed;\r\n        this.rendererTimingCount++;\r\n        let avg = this.rendererTimingTotal / this.rendererTimingCount;\r\n        g.Dispose();\r\n        this.AllowRedrawNoRefresh();\r\n        this.renderingPostProcessing();\r\n        return 0;\r\n    }\r\n    renderingPostProcessing() { }\r\n    get resizeRule() { return this._resizeRule; }\r\n    set resizeRule(value) {\r\n        if (value != this._resizeRule) {\r\n            this.DisableRedraw();\r\n            this._resizeRule = value;\r\n            for (let i = 0; i < this.ProportionalToSizeValues.length; i++) {\r\n                this.ProportionalToSizeValues[i].resizeRule = this._resizeRule;\r\n            }\r\n            this.AllowRedraw();\r\n            this.redraw();\r\n        }\r\n    }\r\n    redraw() {\r\n        if (!(document.visibilityState === 'visible'))\r\n            return;\r\n        if (this._redrawAllowed > 0)\r\n            return;\r\n        if (this.getContainerInnerWidth() < 2)\r\n            return;\r\n        if (this.getContainerInnerHeight() < 2)\r\n            return;\r\n        if (this.requestAnimationFrameID != null) {\r\n            window.cancelAnimationFrame(this.requestAnimationFrameID);\r\n            //#ifdef PROFILING\r\n            //            console.log(\"canceled cancelAnimationFrame \");\r\n            //            //#endif\r\n        }\r\n        this.requestAnimationFrameID = window.requestAnimationFrame((timestamp) => {\r\n            try {\r\n                this.Draw(timestamp);\r\n            }\r\n            catch (e) {\r\n                console.log('caught');\r\n                this.requestAnimationFrameID = null;\r\n                throw (e);\r\n            }\r\n            this.requestAnimationFrameID = null;\r\n        });\r\n    }\r\n    usableUiWidth() { return this.getContainerInnerWidth(); }\r\n    usableUiHeight() { return this.getContainerInnerHeight(); }\r\n    resetProportionalSizeObjectsCachePush(newcoef) {\r\n        this.clearCachedObjects();\r\n        if (this._resizeRule != Proportional.ResizeRule.FIXED) {\r\n            for (let i = 0; i < this.ProportionalToSizeValues.length; i++) {\r\n                this.ProportionalToSizeValues[i].containerResizedPushNewCoef(newcoef);\r\n            }\r\n        }\r\n    }\r\n    resetProportionalSizeObjectsCachePop() {\r\n        this.clearCachedObjects();\r\n        if (this._resizeRule != Proportional.ResizeRule.FIXED) {\r\n            for (let i = 0; i < this.ProportionalToSizeValues.length; i++) {\r\n                this.ProportionalToSizeValues[i].containerResizedPop();\r\n            }\r\n        }\r\n    }\r\n    resetProportionalSizeObjectsCache(w, h) {\r\n        this.clearCachedObjects();\r\n        if (this._resizeRule != Proportional.ResizeRule.FIXED) {\r\n            for (let i = 0; i < this.ProportionalToSizeValues.length; i++) {\r\n                this.ProportionalToSizeValues[i].containerResized(w, h);\r\n            }\r\n        }\r\n    }\r\n    containerResized() {\r\n        this.containerResize(null, null);\r\n    }\r\n    containerResize(sender, e) {\r\n        //if (((Form)sender).WindowState == FormWindowState.Minimized) return;\r\n        this.clearTransformationMatrix();\r\n        this.DisableRedraw();\r\n        //let r: DOMRect  = this.UIContainer.getBoundingClientRect();\r\n        this.UIContainer.width = this.UIContainer.offsetWidth;\r\n        this.UIContainer.height = this.UIContainer.offsetHeight;\r\n        // console.log(\"resize \" + this.usableUiWidth().toString() + \"/\" + this.usableUiHeight().toString());\r\n        this.resetProportionalSizeObjectsCache(this.usableUiWidth(), this.usableUiHeight());\r\n        this.AllowRedraw();\r\n        this.redraw();\r\n    }\r\n    proportionnalsizeReset() {\r\n        this.resetProportionalSizeObjectsCache(this.usableUiWidth(), this.usableUiHeight());\r\n    }\r\n    captureAndDownloadImage(captureType, defaultFilename, // or null\r\n    captureWidth, // or null\r\n    captureHeight, // or null\r\n    captureDPI) {\r\n        let error = \"\";\r\n        let w;\r\n        let h;\r\n        let ratio = this.getContainerInnerWidth() / this.getContainerInnerHeight();\r\n        if (captureDPI == null)\r\n            captureDPI = 90;\r\n        if ((defaultFilename == null) || (typeof defaultFilename == \"undefined\")) {\r\n            defaultFilename = \"capture.\";\r\n            if (captureType == YDataRenderer.CaptureType.PNG) {\r\n                defaultFilename = defaultFilename + \"png\";\r\n            }\r\n            if (captureType == YDataRenderer.CaptureType.SVG) {\r\n                defaultFilename = defaultFilename + \"svg\";\r\n            }\r\n        }\r\n        if ((captureWidth == null) || (typeof (captureWidth) == \"undefined\")) {\r\n            w = this.getContainerInnerWidth();\r\n            if ((captureHeight == null) || (typeof (captureHeight) == \"undefined\")) {\r\n                h = this.getContainerInnerHeight();\r\n            }\r\n            else {\r\n                h = captureHeight >> 0;\r\n                w = (h * ratio) >> 0;\r\n            }\r\n        }\r\n        else {\r\n            w = captureWidth >> 0;\r\n            if ((captureHeight == null) || (typeof (captureHeight) == \"undefined\")) {\r\n                h = (w * ratio) >> 0;\r\n            }\r\n            else {\r\n                h = captureHeight >> 0;\r\n            }\r\n        }\r\n        if ((w <= 5) || (h <= 5))\r\n            return;\r\n        this.DisableRedraw();\r\n        let DrawArea = document.createElement('canvas');\r\n        DrawArea.width = w;\r\n        DrawArea.height = h;\r\n        let g;\r\n        switch (captureType) {\r\n            case YDataRenderer.CaptureType.PNG:\r\n                g = new YGraphics(DrawArea, w, h, captureDPI);\r\n                break;\r\n            case YDataRenderer.CaptureType.SVG:\r\n                g = new YGraphicsSVG(DrawArea, w, h, captureDPI);\r\n                break;\r\n            default:\r\n                throw new RangeError(\"capture :unknown type\");\r\n        }\r\n        let newCoef = Proportional.resizeCoef(Proportional.ResizeRule.RELATIVETOBOTH, this.refWidth, this.refHeight, w, h);\r\n        this.log(\"start capture\");\r\n        this.resetProportionalSizeObjectsCachePush(newCoef); // reset all size related cached objects\r\n        let renderok = false;\r\n        this._snapshotPanel.enabled = false;\r\n        try {\r\n            let t = this.Render(g, w, h);\r\n            renderok = true;\r\n        }\r\n        catch (e) {\r\n            error = e.message;\r\n            this.log(\"Render error: \" + error);\r\n        }\r\n        this.log(\"capture completed\");\r\n        this.resetProportionalSizeObjectsCachePop(); // reset all size related cached objects, again\r\n        if (renderok) {\r\n            let element = document.createElement('a');\r\n            let data = g.get_downloadableData();\r\n            element.setAttribute('href', data);\r\n            element.setAttribute('download', defaultFilename);\r\n            element.style.display = 'none';\r\n            document.body.appendChild(element);\r\n            element.click();\r\n            document.body.removeChild(element);\r\n        }\r\n        g.Dispose();\r\n        this.AllowRedraw();\r\n    }\r\n    getFocus(sender, e) {\r\n        this.log(\"got focus\");\r\n    }\r\n    gainFocus() {\r\n        //if (parentForm.Focused) return;\r\n        //this.parentForm.Focus();\r\n    }\r\n    lostFocus(sender, e) {\r\n        //if (_AllowPrintScreenCapture) _RegisKey.StopHotKey();\r\n    }\r\n    get AllowPrintScreenCapture() { return this._AllowPrintScreenCapture; }\r\n    set AllowPrintScreenCapture(value) { this._AllowPrintScreenCapture = value; }\r\n    destroy() {\r\n        document.removeEventListener('visibilitychange', this.documentVisibiltyChangeFct);\r\n        document.removeEventListener('resize', this.containerResized);\r\n        this.UIContainer.parentNode.removeChild(this.UIContainer);\r\n        this.UIContainer = null;\r\n        this.parentForm = null;\r\n        this._annotationPanels = null;\r\n        this._messagePanels = null;\r\n        this._Scr2ElmMatrix = null;\r\n        this._Elm2ScrMatrix = null;\r\n    }\r\n    resetRefrenceSize() {\r\n        this._refWidth = this.getContainerInnerWidth();\r\n        this._refHeight = this.getContainerInnerHeight();\r\n    }\r\n    get refWidth() { return this._refWidth; }\r\n    get refHeight() { return this._refHeight; }\r\n    RendererCanvas_Click(sender, e) {\r\n    }\r\n    RendererCanvas_DoubleClick(sender, e) {\r\n        // MouseEventArgs m = (MouseEventArgs)e;\r\n        // if (OnDblClick != null) OnDblClick(this, m);\r\n    }\r\n    addMessagePanel() {\r\n        let p = new MessagePanel(this, this);\r\n        this._messagePanels.push(p);\r\n        return p;\r\n    }\r\n    DrawMessagePanels(g, viewPortWidth, viewPortHeight) {\r\n        //g.SetClip(new YRectangle(0, 0, viewPortWidth, viewPortHeight));\r\n        for (let i = 0; i < this._messagePanels.length; i++) {\r\n            if (this._messagePanels[i].enabled) {\r\n                let p = this._messagePanels[i];\r\n                let AvailableWidth = viewPortWidth - 2 * p.padding - p.borderthickness;\r\n                if (AvailableWidth < 100)\r\n                    AvailableWidth = 100;\r\n                let ssize = null;\r\n                let sizeok = false;\r\n                // if panel ends up larger than avaliable space, lets reduce font size.\r\n                while (!sizeok) {\r\n                    ssize = g.MeasureString(p.text, p.font, AvailableWidth);\r\n                    if (((ssize.width >= this.UIContainer.width) ||\r\n                        (ssize.height >= this.UIContainer.height))\r\n                        && (p.font.size > 5)) {\r\n                        p.font.size = Math.round(p.font.size * 9) / 10;\r\n                    }\r\n                    else\r\n                        sizeok = true;\r\n                }\r\n                if (ssize == null)\r\n                    return; // not supposed to happen\r\n                let panelWidth = ssize.width + 2 * p.padding + p.borderthickness;\r\n                let panelHeight = ssize.height + 2 * p.padding + p.borderthickness;\r\n                let x = 0;\r\n                switch (p.panelHrzAlign) {\r\n                    case MessagePanel.HorizontalAlignPos.LEFT:\r\n                        x = p.horizontalMargin;\r\n                        break;\r\n                    case MessagePanel.HorizontalAlignPos.RIGHT:\r\n                        x = viewPortWidth - panelWidth - p.horizontalMargin;\r\n                        break;\r\n                    default:\r\n                        x = (viewPortWidth - panelWidth) / 2;\r\n                        break;\r\n                }\r\n                let y = 0;\r\n                switch (p.panelVrtAlign) {\r\n                    case MessagePanel.VerticalAlignPos.TOP:\r\n                        y = p.verticalMargin;\r\n                        break;\r\n                    case MessagePanel.VerticalAlignPos.BOTTOM:\r\n                        y = viewPortHeight - panelHeight - p.verticalMargin;\r\n                        break;\r\n                    default:\r\n                        y = (viewPortHeight - panelHeight) / 2;\r\n                        break;\r\n                }\r\n                g.FillRectangleXYHW(p.bgBrush, x, y, panelWidth, panelHeight);\r\n                if (p.borderthickness > 0)\r\n                    g.DrawRectangleXYHW(p.pen, x, y, panelWidth, panelHeight);\r\n                let sf = new YStringFormat(16384 /* YStringFormat.StringFormatFlags.NoClip */);\r\n                switch (p.panelTextAlign) {\r\n                    case MessagePanel.TextAlign.LEFT:\r\n                        sf.LineAlignment = 0 /* YStringFormat.StringAlignment.Near */;\r\n                        sf.Alignment = 0 /* YStringFormat.StringAlignment.Near */;\r\n                        break;\r\n                    case MessagePanel.TextAlign.RIGHT:\r\n                        sf.LineAlignment = 2 /* YStringFormat.StringAlignment.Far */;\r\n                        sf.Alignment = 2 /* YStringFormat.StringAlignment.Far */;\r\n                        break;\r\n                    default:\r\n                        sf.LineAlignment = 1 /* YStringFormat.StringAlignment.Center */;\r\n                        sf.Alignment = 1 /* YStringFormat.StringAlignment.Center */;\r\n                        break;\r\n                }\r\n                let r = new YRectangle(((x + p.padding + p.borderthickness / 2) >> 0), ((y + p.padding + p.borderthickness / 2) >> 0), ssize.width + 1, ssize.height + 1);\r\n                g.DrawStringRect(p.text, p.font, p.font.brush, r, sf);\r\n            }\r\n        }\r\n    }\r\n    drawAnnotationPanels(g, annotationPanels, viewPortWidth, viewPortHeight, overlap, mainViewPort) {\r\n        //g.TextRenderingHint = YGraphics.TextRenderingHint.SingleBitPerPixelGridFit;\r\n        let active = false;\r\n        for (let i = 0; i < this.annotationPanels.length; i++) {\r\n            if (this.annotationPanels[i].enabled)\r\n                active = true;\r\n        }\r\n        if (!active)\r\n            return;\r\n        //g.SetClip(new YRectangle(0, 0, viewPortWidth, viewPortHeight));\r\n        for (let i = 0; i < this.annotationPanels.length; i++) {\r\n            if ((annotationPanels[i].enabled) && (annotationPanels[i].overlap == overlap)) {\r\n                let p = annotationPanels[i];\r\n                let AvailableWidth = viewPortWidth - 2 * p.padding - p.borderthickness;\r\n                if (AvailableWidth < 100)\r\n                    AvailableWidth = 100;\r\n                let textToDisplay = p.text.replace(\"\\\\n\", \"\\n\");\r\n                if (textToDisplay.indexOf('$') >= 0) {\r\n                    textToDisplay = textToDisplay.replace(\"\\\\n\", \"\\n\");\r\n                    textToDisplay = this.patchAnnotation(textToDisplay);\r\n                }\r\n                let ssize = g.MeasureString(textToDisplay, p.font, AvailableWidth);\r\n                let panelWidth = ssize.width + 2 * p.padding + p.borderthickness;\r\n                let panelHeight = ssize.height + 2 * p.padding + p.borderthickness;\r\n                let x = 0;\r\n                switch (p.panelHrzAlign) {\r\n                    case MessagePanel.HorizontalAlignPos.LEFT:\r\n                        x = p.horizontalMargin;\r\n                        if (!annotationPanels[i].overlap && (mainViewPort.Lmargin < panelWidth + 10)) {\r\n                            mainViewPort.Lmargin = panelWidth + 10;\r\n                        }\r\n                        break;\r\n                    case MessagePanel.HorizontalAlignPos.RIGHT:\r\n                        x = viewPortWidth - panelWidth - p.horizontalMargin;\r\n                        if (!annotationPanels[i].overlap && (mainViewPort.Rmargin < panelWidth + 20)) {\r\n                            mainViewPort.Rmargin = panelWidth + 20;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        x = (viewPortWidth - panelWidth) / 2;\r\n                        break;\r\n                }\r\n                let y = 0;\r\n                switch (p.panelVrtAlign) {\r\n                    case MessagePanel.VerticalAlignPos.TOP:\r\n                        y = p.verticalMargin;\r\n                        if (!annotationPanels[i].overlap && (mainViewPort.Tmargin < panelHeight + 20)) {\r\n                            mainViewPort.Tmargin = panelHeight + 20;\r\n                        }\r\n                        break;\r\n                    case MessagePanel.VerticalAlignPos.BOTTOM:\r\n                        y = viewPortHeight - panelHeight - p.verticalMargin;\r\n                        if (!annotationPanels[i].overlap && (mainViewPort.Bmargin < panelHeight + 20)) {\r\n                            mainViewPort.Bmargin = panelHeight + 20;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        y = (viewPortHeight - panelHeight) / 2;\r\n                        break;\r\n                }\r\n                if (annotationPanels[i].overlap) {\r\n                    x += (annotationPanels[i].positionOffsetX / 100) * (viewPortWidth - panelWidth);\r\n                    y += (annotationPanels[i].positionOffsetY / 100) * (viewPortHeight - panelHeight);\r\n                    if (x < 0)\r\n                        x = 0;\r\n                    if (y < 0)\r\n                        y = 0;\r\n                    if (x > viewPortWidth - panelWidth)\r\n                        x = viewPortWidth - panelWidth;\r\n                    if (y > viewPortHeight - panelHeight)\r\n                        y = viewPortHeight - panelHeight;\r\n                }\r\n                g.FillRectangleXYHW(p.bgBrush, x, y, panelWidth, panelHeight);\r\n                if (p.borderthickness > 0)\r\n                    g.DrawRectangleXYHW(p.pen, x, y, panelWidth, panelHeight);\r\n                //g.TextRenderingHint = YGraphics.TextRenderingHint.AntiAlias;\r\n                let sf = new YStringFormat(16384 /* YStringFormat.StringFormatFlags.NoClip */);\r\n                switch (p.panelTextAlign) {\r\n                    case MessagePanel.TextAlign.LEFT:\r\n                        sf.LineAlignment = 0 /* YStringFormat.StringAlignment.Near */;\r\n                        sf.Alignment = 0 /* YStringFormat.StringAlignment.Near */;\r\n                        break;\r\n                    case MessagePanel.TextAlign.RIGHT:\r\n                        sf.LineAlignment = 2 /* YStringFormat.StringAlignment.Far */;\r\n                        sf.Alignment = 2 /* YStringFormat.StringAlignment.Far */;\r\n                        break;\r\n                    default:\r\n                        sf.LineAlignment = 1 /* YStringFormat.StringAlignment.Center */;\r\n                        sf.Alignment = 1 /* YStringFormat.StringAlignment.Center */;\r\n                        break;\r\n                }\r\n                let r = new YRectangle((x + p.padding + p.borderthickness / 2), (y + p.padding + p.borderthickness / 2), ssize.width + 1, ssize.height + 1);\r\n                g.DrawStringRect(textToDisplay, p.font, p.font.brush, r, sf);\r\n            }\r\n        }\r\n    }\r\n    log(s) {\r\n        if (this._logFunction == null)\r\n            return;\r\n        this._logFunction(s);\r\n    }\r\n}\r\nYDataRenderer.RendererDebug = false;\r\nYDataRenderer.FloatToStrformats = [\"0\", \"0\", \"0\", \"0.0\", \"0.00\", \"0.000\", \"0.0000\"];\r\nYDataRenderer._disableMinMaxCheck = false;\r\nYDataRenderer.globalMouseMoveSet = false;\r\nYDataRenderer.globalMouseX = -1;\r\nYDataRenderer.globalMouseY = -1;\r\n(function (YDataRenderer) {\r\n    class CaptureTypeEnumItem extends YEnumItem {\r\n        constructor(value, humanreadable, container) {\r\n            super(value, humanreadable, CaptureType);\r\n        }\r\n    }\r\n    YDataRenderer.CaptureTypeEnumItem = CaptureTypeEnumItem;\r\n    class CaptureType extends YEnum {\r\n    }\r\n    CaptureType.PNG = new CaptureTypeEnumItem(\"PNG\", \"Bitmap (PNG)\");\r\n    CaptureType.SVG = new CaptureTypeEnumItem(\"SVG\", \"Vector (SVG)\");\r\n    YDataRenderer.CaptureType = CaptureType;\r\n    class CaptureTargetEnumItem extends YEnumItem {\r\n        constructor(value, humanreadable, container) {\r\n            super(value, humanreadable, CaptureTarget);\r\n        }\r\n    }\r\n    YDataRenderer.CaptureTargetEnumItem = CaptureTargetEnumItem;\r\n    class CaptureTarget extends YEnum {\r\n    }\r\n    CaptureTarget.ToClipBoard = new CaptureTargetEnumItem(\"ToClipBoard\", \"ClipBoard\");\r\n    CaptureTarget.ToFile = new CaptureTargetEnumItem(\"ToFile\", \"File\");\r\n    YDataRenderer.CaptureTarget = CaptureTarget;\r\n    class CaptureFormatsEnumItem extends YEnumItem {\r\n        constructor(value, humanreadable, container) {\r\n            super(value, humanreadable, CaptureFormats);\r\n        }\r\n    }\r\n    YDataRenderer.CaptureFormatsEnumItem = CaptureFormatsEnumItem;\r\n    class CaptureFormats extends YEnum {\r\n    }\r\n    CaptureFormats.Keep = new CaptureFormatsEnumItem(\"Keep\", \"Keep original size\");\r\n    CaptureFormats.Fixed = new CaptureFormatsEnumItem(\"Fixed\", \"Fixed size\");\r\n    CaptureFormats.FixedWidth = new CaptureFormatsEnumItem(\"FixedWidth\", \"Fixed width, keep ration aspect\");\r\n    CaptureFormats.FixedHeight = new CaptureFormatsEnumItem(\"FixedHeight\", \"Fixed height, keep ration aspect\");\r\n    YDataRenderer.CaptureFormats = CaptureFormats;\r\n})(YDataRenderer || (YDataRenderer = {}));\r\n/*\r\n    *  abstraction layer allowing to render in both bitmap and Vector(SVG) format\r\n    *\r\n    */\r\nexport class YGraphics {\r\n    constructor(canvas, width, height, dpi) {\r\n        this._c = null;\r\n        this._g = null;\r\n        this._width = 0;\r\n        this._height = 0;\r\n        this._dpi = 0;\r\n        this._image = null;\r\n        this._lastPen = null;\r\n        this._lastBrush = null;\r\n        this._lastFont = null;\r\n        this._clipCounter = 0;\r\n        this._textRenderingHint = null;\r\n        this._smoothingMode = YSmoothingMode.Default;\r\n        this._c = canvas;\r\n        this._g = this._c.getContext(\"2d\");\r\n        this._g.textBaseline = 'top';\r\n        this._width = width;\r\n        this._height = height;\r\n        this._dpi = dpi;\r\n    }\r\n    get_downloadableData() {\r\n        return this._c.toDataURL('image/png');\r\n    }\r\n    get graphics() { return this._g; }\r\n    setPen(p) {\r\n        if (p == this._lastPen)\r\n            return;\r\n        if (p != null) { //if (YDataRenderer.RendererDebug)  console.log(\"set Pen to \"+p.lineWidth+\"/\"+p.strokeStyle)\r\n            this._g.lineWidth = p.lineWidth;\r\n            let st = p.strokeStyle;\r\n            this._g.strokeStyle = p.strokeStyle;\r\n        }\r\n        else {\r\n            this._g.lineWidth = 0;\r\n        }\r\n        this._lastPen = p;\r\n    }\r\n    setBrush(b) {\r\n        if (b == this._lastBrush)\r\n            return;\r\n        if (b instanceof YSolidBrush) {\r\n            this._g.fillStyle = b.color.htmlCode;\r\n        }\r\n        else if (b instanceof YLinearGradientBrush) {\r\n            let lingrad = this._g.createLinearGradient(0, 0, 0, this._height);\r\n            lingrad.addColorStop(0, b.color1.htmlCode);\r\n            lingrad.addColorStop(1, b.color2.htmlCode);\r\n            this._g.fillStyle = lingrad;\r\n        }\r\n        else {\r\n            throw new Error(\"invalid / insupported brush type\");\r\n        }\r\n        this._lastBrush = b;\r\n    }\r\n    setFont(f) {\r\n        if ((f == this._lastFont) && !f.hasChanged)\r\n            return;\r\n        this._g.font = f.htmlCode;\r\n        this._lastFont = f;\r\n    }\r\n    DrawLineXY(p, x1, y1, x2, y2) {\r\n        if (p.noAntiAlias) {\r\n            let offset = (p.lineWidth == p.lineWidth >> 0) && ((p.lineWidth & 1) == 1) ? 0.5 : 0;\r\n            x1 = Math.round(x1) + offset;\r\n            y1 = Math.round(y1) + offset;\r\n            x2 = Math.round(x2) + offset;\r\n            y2 = Math.round(y2) + offset;\r\n        }\r\n        this.setPen(p);\r\n        this._g.beginPath();\r\n        this._g.moveTo(x1, y1);\r\n        this._g.lineTo(x2, y2);\r\n        this._g.stroke();\r\n    }\r\n    DrawLine(p, p1, p2) {\r\n        this.setPen(p);\r\n        this._g.beginPath();\r\n        this._g.moveTo(p1.X, p1.Y);\r\n        this._g.lineTo(p2.X, p2.Y);\r\n        this._g.stroke();\r\n    }\r\n    SetClip(rect) {\r\n        this._g.save(); // save the context\r\n        this._g.beginPath();\r\n        this._g.rect(rect.x, rect.y, rect.w, rect.h);\r\n        this._g.clip();\r\n        this._clipCounter++;\r\n    }\r\n    ResetClip() {\r\n        if (this._clipCounter <= 0)\r\n            throw new Error(\"clipping stack error\");\r\n        this._g.restore(); // restore the context including previous clipping\r\n        this._clipCounter--;\r\n        //console.log(\"-ResetClip , counter = \"+this._clipCounter);\r\n    }\r\n    MeasureString(text, font, width) {\r\n        this.setFont(font);\r\n        let res = new YSizeF(font, text);\r\n        let count = res.linesCount;\r\n        if (count == 0)\r\n            return res;\r\n        res.height = res.firstLineHeight * 1.2 + (count - 1) * res.lineHeight;\r\n        let max = 0;\r\n        let dim;\r\n        for (let i = 0; i < count; i++) {\r\n            dim = this._g.measureText(res.lines[i]);\r\n            max = Math.max(max, dim.width);\r\n        }\r\n        res.width = max;\r\n        return res;\r\n    }\r\n    MeasureStringSF(text, font, width, stringFormat) {\r\n        return this.MeasureString(text, font, width);\r\n    }\r\n    FillRectangle(brush, rect) {\r\n        this.setBrush(brush);\r\n        this._g.beginPath();\r\n        this._g.fillRect(rect.x, rect.y, rect.w, rect.h);\r\n        this._g.fill();\r\n    }\r\n    FillRectangleXYHW(brush, x, y, width, height) {\r\n        this.setBrush(brush);\r\n        this._g.beginPath();\r\n        this._g.fillRect(x, y, width, height);\r\n        this._g.fill();\r\n    }\r\n    DrawRectangle(p, rect) {\r\n        this.setPen(p);\r\n        this._g.beginPath();\r\n        if (p.noAntiAlias) {\r\n            let offset = (p.lineWidth == p.lineWidth >> 0) && ((p.lineWidth & 1) == 1) ? 0.5 : 0;\r\n            this._g.rect(Math.round(rect.x) + offset, Math.round(rect.y) + offset, Math.round(rect.w), Math.round(rect.h));\r\n        }\r\n        else {\r\n            this._g.rect(rect.x, rect.y, rect.w, rect.h);\r\n        }\r\n        this._g.stroke();\r\n    }\r\n    DrawRectangleXYHW(p, x, y, width, height) {\r\n        if (p.noAntiAlias) {\r\n            let offset = (p.lineWidth == p.lineWidth >> 0) && ((p.lineWidth & 1) == 1) ? 0.5 : 0;\r\n            x = Math.round(x) + offset;\r\n            y = Math.round(y) + offset;\r\n            width = Math.round(width);\r\n            height = Math.round(height);\r\n        }\r\n        this.setPen(p);\r\n        this._g.beginPath();\r\n        this._g.rect(x, y, width, height);\r\n        this._g.stroke();\r\n    }\r\n    DrawStringXY(s, font, brush, x, y) {\r\n        this.setPen(null);\r\n        this.setBrush(brush);\r\n        this.setFont(font);\r\n        let totalsz = this.MeasureString(s, font, 0);\r\n        let dy = totalsz.lineHeight;\r\n        for (let i = 0; i < totalsz.linesCount; i++) {\r\n            this._g.fillText(totalsz.lines[i], x, y);\r\n            y += dy;\r\n        }\r\n    }\r\n    DrawStringXYF(s, font, brush, x, y, format) {\r\n        if (YGraphics._debugDrawString) {\r\n            let pen = new YPen(YColor.Red, 1);\r\n            this.DrawLineXY(pen, x - 5, y, x + 5, y);\r\n            this.DrawLineXY(pen, x, y - 5, x, y + 5);\r\n        }\r\n        let sz = this.MeasureString(s, font, 10000);\r\n        if (format.Alignment == 1 /* YStringFormat.StringAlignment.Center */) {\r\n            x -= sz.width >> 1;\r\n        }\r\n        else if (format.Alignment == 2 /* YStringFormat.StringAlignment.Far */)\r\n            x -= sz.width;\r\n        if (format.LineAlignment == 1 /* YStringFormat.StringAlignment.Center */) {\r\n            y -= (sz.height / 2) >> 0;\r\n        }\r\n        else if (format.LineAlignment == 2 /* YStringFormat.StringAlignment.Far */)\r\n            y -= sz.height;\r\n        this.DrawStringXY(s, font, brush, x, y);\r\n    }\r\n    DrawStringPF(s, font, brush, p, format) {\r\n        this.DrawStringXYF(s, font, brush, p.X, p.Y, format);\r\n    }\r\n    DrawString(s, font, brush, p) {\r\n        if (YGraphics._debugDrawString) {\r\n            let pen = new YPen(YColor.Red, 1);\r\n            this.DrawLineXY(pen, p.X - 5, p.Y, p.X + 5, p.Y);\r\n            this.DrawLineXY(pen, p.X, p.Y - 5, p.X, p.Y + 5);\r\n        }\r\n        this.setPen(null);\r\n        this.setBrush(brush);\r\n        this.setFont(font);\r\n        this._g.fillText(s, p.X, p.Y);\r\n    }\r\n    DrawStringRect(s, font, brush, layoutRectangle, format) {\r\n        if (YGraphics._debugDrawString) {\r\n            let pen = new YPen(YColor.Red, 1);\r\n            this.DrawRectangle(pen, layoutRectangle);\r\n        }\r\n        this.setPen(null);\r\n        this.setBrush(brush);\r\n        this.setFont(font);\r\n        let totalsz = this.MeasureString(s, font, 0);\r\n        let dy = totalsz.lineHeight;\r\n        let y = layoutRectangle.y;\r\n        switch (format.LineAlignment) {\r\n            case 0 /* YStringFormat.StringAlignment.Near */:\r\n                break;\r\n            case 1 /* YStringFormat.StringAlignment.Center */:\r\n                y += (layoutRectangle.h - totalsz.height) / 2;\r\n                break;\r\n            case 2 /* YStringFormat.StringAlignment.Far */:\r\n                y += (layoutRectangle.h - totalsz.height);\r\n                break;\r\n        }\r\n        let xOrigin = layoutRectangle.x;\r\n        if (format.FormatFlags & 2 /* YStringFormat.StringFormatFlags.DirectionVertical */) {\r\n            this.Transform(layoutRectangle.x, layoutRectangle.y, Math.PI / 2);\r\n            y -= (layoutRectangle.y + layoutRectangle.w);\r\n            xOrigin -= layoutRectangle.x;\r\n        }\r\n        for (let i = 0; i < totalsz.linesCount; i++) {\r\n            let s = totalsz.lines[i];\r\n            let sz = this.MeasureString(s, font, 0);\r\n            let x = xOrigin;\r\n            switch (format.Alignment) {\r\n                case 0 /* YStringFormat.StringAlignment.Near */:\r\n                    break;\r\n                case 1 /* YStringFormat.StringAlignment.Center */:\r\n                    x += (layoutRectangle.w - sz.width) / 2;\r\n                    break;\r\n                case 2 /* YStringFormat.StringAlignment.Far */:\r\n                    x += (layoutRectangle.w - sz.width);\r\n                    break;\r\n            }\r\n            this._g.fillText(s, x, y);\r\n            y += dy;\r\n        }\r\n        if (format.FormatFlags & 2 /* YStringFormat.StringFormatFlags.DirectionVertical */)\r\n            this.ResetTransform();\r\n    }\r\n    Transform(dx, dy, angle) {\r\n        let sin = Math.sin(angle);\r\n        let cos = Math.cos(angle);\r\n        this._g.save();\r\n        this._g.transform(cos, sin, -sin, cos, dx, dy);\r\n    }\r\n    ResetTransform() {\r\n        this._g.restore();\r\n    }\r\n    FillEllipse(brush, x, y, width, height) {\r\n        this.setBrush(brush);\r\n        this._g.beginPath();\r\n        this._g.ellipse(x + width / 2, y + height / 2, width / 2, height / 2, 0, 0, 2 * Math.PI);\r\n        this._g.fill();\r\n    }\r\n    DrawEllipse(pen, x, y, width, height) {\r\n        this.setPen(pen);\r\n        this._g.beginPath();\r\n        this._g.ellipse(x + width / 2, y + height / 2, width / 2, height / 2, 0, 0, 2 * Math.PI);\r\n        this._g.stroke();\r\n    }\r\n    FillPolygon(brush, points) {\r\n        this.setBrush(brush);\r\n        if (points.length <= 2)\r\n            return;\r\n        this._g.beginPath();\r\n        if (brush.noAntiAlias) {\r\n            this._g.moveTo(Math.round(points[0].X) + 0.5, Math.round(points[0].Y) + 0.5);\r\n            for (let i = 1; i < points.length; i++) {\r\n                this._g.lineTo(Math.round(points[i].X) + 0.5, Math.round(points[i].Y) + 0.5);\r\n            }\r\n        }\r\n        else {\r\n            this._g.moveTo(points[0].X, points[0].Y);\r\n            for (let i = 1; i < points.length; i++) {\r\n                this._g.lineTo(points[i].X, points[i].Y);\r\n            }\r\n        }\r\n        this._g.closePath();\r\n        this._g.fill();\r\n    }\r\n    DrawPolygon(pen, points) {\r\n        this.setPen(pen);\r\n        if (points.length <= 1)\r\n            return;\r\n        this._g.beginPath();\r\n        if (pen.noAntiAlias) {\r\n            let offset = (pen.lineWidth == pen.lineWidth >> 0) && ((pen.lineWidth & 1) == 1) ? 0.5 : 0;\r\n            this._g.moveTo(Math.round(points[0].X) + offset, Math.round(points[0].Y) + offset);\r\n            for (let i = 1; i < points.length; i++) {\r\n                this._g.lineTo(Math.round(points[i].X) + offset, Math.round(points[i].Y) + offset);\r\n            }\r\n        }\r\n        else {\r\n            this._g.moveTo(points[0].X, points[0].Y);\r\n            for (let i = 1; i < points.length; i++) {\r\n                this._g.lineTo(points[i].X, points[i].Y);\r\n            }\r\n        }\r\n        this._g.closePath();\r\n        this._g.stroke();\r\n    }\r\n    DrawLines(pen, points) {\r\n        this.setPen(pen);\r\n        if (points.length <= 1)\r\n            return;\r\n        this._g.beginPath();\r\n        this._g.lineCap = \"round\";\r\n        this._g.lineJoin = \"round\";\r\n        this._g.moveTo(points[0].X, points[0].Y);\r\n        for (let i = 1; i < points.length; i++) {\r\n            this._g.lineTo(points[i].X, points[i].Y);\r\n        }\r\n        this._g.stroke();\r\n    }\r\n    Dispose() {\r\n        this._c = null;\r\n        this._g = null;\r\n        this._width = 0;\r\n        this._height = 0;\r\n        this._dpi = 0;\r\n    }\r\n    get TextRenderingHint() { return this._textRenderingHint; }\r\n    set TextRenderingHint(value) { this._textRenderingHint = value; }\r\n    get SmoothingMode() { return this._smoothingMode; }\r\n    set SmoothingMode(value) { this._smoothingMode = value; }\r\n    DrawImage(srcimage, destRect, srcRect, srcUnit) {\r\n        // implementation is not complete (coordinates and sizes)\r\n        this._g.drawImage(srcimage, srcRect.x, srcRect.y, srcRect.w, srcRect.h, destRect.x, destRect.y, destRect.w, destRect.h);\r\n    }\r\n    comment(s) { }\r\n}\r\nYGraphics._debugDrawString = false;\r\nexport class YGraphicsSVG extends YGraphics {\r\n    constructor(canvas, width, height, dpi) {\r\n        super(canvas, width, height, dpi);\r\n        this._clipcount = 0;\r\n        this._clipSectionsToClose = 0;\r\n        this._transformSectionsToClose = 0;\r\n        this._gradientCount = 0;\r\n        YGraphicsSVG.SVGID++;\r\n        this._SVGdefs = new YStringBuilder();\r\n        this._SVGcontents = new YStringBuilder();\r\n        this._SVGdefs.AppendLine(\"<clipPath id=\\\"pageClip_\" + YGraphicsSVG.SVGID.toString() + \"\\\"><rect x=\\\"0\\\" y=\\\"0\\\"  width=\\\"\" + width.toString() + \"\\\" height=\\\"\" + height.toString() + \"\\\"/></clipPath>\");\r\n    }\r\n    static escapeXml(unsafe) {\r\n        return unsafe.replace(/[^ !#$%(-;=?-z]/g, (c) => '&#' + c.charCodeAt(0) + ';'); // MV power!  :-)\r\n    }\r\n    get_downloadableData() {\r\n        return \"data:image/svg+xml;base64,\" + btoa(this.get_svgContents());\r\n    }\r\n    DrawLineXY(p, x1, y1, x2, y2) {\r\n        this._SVGcontents.AppendLine(\"<line x1=\\\"\" + x1.toString() + \"\\\" \"\r\n            + \" y1 =\\\"\" + y1.toString() + \"\\\" \"\r\n            + \" x2 =\\\"\" + x2.toString() + \"\\\" \"\r\n            + \" y2 =\\\"\" + y2.toString() + \"\\\" \"\r\n            + \"style = \\\"stroke:\" + p.color.svgCode + \";stroke-opacity:\" + p.color.alphaCode + \"; stroke-width:\" + p.lineWidth.toString() + \"\\\"/>\");\r\n    }\r\n    DrawLine(p, p1, p2) { this.DrawLineXY(p, p1.X, p1.Y, p2.X, p2.Y); }\r\n    SetClip(rect) {\r\n        this.ResetClip();\r\n        this._SVGdefs.AppendLine(\"<clipPath id=\\\"clip_\" + YGraphicsSVG.SVGID.toString() + \"_\" + this._clipcount.toString() + \"\\\"><rect x=\\\"\" + rect.x.toString() + \"\\\" y=\\\"\" + rect.y.toString()\r\n            + \"\\\"  width=\\\"\" + rect.w.toString() + \"\\\" height=\\\"\" + rect.h.toString() + \"\\\"/></clipPath>\");\r\n        this._SVGcontents.AppendLine(\"<g clip-path=\\\"url(#clip_\" + YGraphicsSVG.SVGID.toString() + \"_\" + this._clipcount.toString() + \")\\\">\");\r\n        this._clipcount++;\r\n        this._clipSectionsToClose++;\r\n    }\r\n    ResetClip() {\r\n        if (this._clipSectionsToClose > 0) {\r\n            this._SVGcontents.AppendLine(\"</g>\");\r\n            this._clipSectionsToClose--;\r\n        }\r\n    }\r\n    BrushToSVG(brush, revert) {\r\n        let fillParam = \"\";\r\n        if (brush instanceof YSolidBrush) {\r\n            fillParam = \"fill = \\\"\" + brush.color.svgCode + \"\\\" fill-opacity=\\\"\" + brush.color.alphaCode + \"\\\" \";\r\n        }\r\n        else if (brush instanceof YLinearGradientBrush) {\r\n            this._SVGdefs.AppendLine(\"<linearGradient id=\\\"grad_\" + YGraphicsSVG.SVGID.toString() + \"_\" + this._gradientCount + \"\\\" \"\r\n                + \"x1=\\\"0%\\\" \" // over-simplified gradient translation as we only use full size vertical gradients.\r\n                + (revert ? \"y1=\\\"100%\\\" \" : \"y1=\\\"0%\\\" \") // Yes, I know, it's cheap.\r\n                + \"x2=\\\"0%\\\" \"\r\n                + (revert ? \"y2=\\\"0%\\\" \" : \"y2=\\\"100%\\\" \") + \">\\r\\n\"\r\n                + \"<stop offset=\\\"0%\\\" style =\\\"stop-color:\" + brush.color1.svgCode + \";stop-opacity:\" + brush.color1.alphaCode + \"\\\"/>\\r\\n\"\r\n                + \"<stop offset=\\\"100%\\\" style =\\\"stop-color:\" + brush.color2.svgCode + \";stop-opacity:\" + brush.color2.alphaCode + \"\\\"/>\\r\\n\"\r\n                + \"</linearGradient>\");\r\n            fillParam = \"fill=\\\"url(#grad_\" + YGraphicsSVG.SVGID.toString() + \"_\" + this._gradientCount + \")\\\" \";\r\n            this._gradientCount++;\r\n        }\r\n        else {\r\n            throw new ReferenceError(\"unsupported brush type.\");\r\n        }\r\n        return fillParam;\r\n    }\r\n    FillRectangle(brush, rect) {\r\n        this._SVGcontents.AppendLine(\"<rect x=\\\"\" + rect.x.toString() + \"\\\" \"\r\n            + \" y =\\\"\" + rect.y.toString() + \"\\\" \"\r\n            + \" width =\\\"\" + rect.w.toString() + \"\\\" \"\r\n            + \" height =\\\"\" + rect.h.toString() + \"\\\" \"\r\n            + this.BrushToSVG(brush, true)\r\n            + \"style=\\\"stroke-width:0\\\"/>\");\r\n    }\r\n    FillRectangleXYHW(brush, x, y, width, height) { this.FillRectangle(brush, new YRectangle(x, y, width, height)); }\r\n    DrawRectangle(p, rect) {\r\n        this._SVGcontents.AppendLine(\"<rect x=\\\"\" + rect.x.toString() + \"\\\" \"\r\n            + \" y =\\\"\" + rect.y.toString() + \"\\\" \"\r\n            + \" width =\\\"\" + rect.w.toString() + \"\\\" \"\r\n            + \" height =\\\"\" + rect.h.toString() + \"\\\" \"\r\n            + \" fill=\\\"none\\\" \"\r\n            + \"style = \\\"stroke:\" + p.color.svgCode + \";stroke-opacity:\" + p.color.alphaCode + \"; stroke-width:\" + p.lineWidth.toString() + \"\\\"/>\");\r\n    }\r\n    DrawRectangleXYHW(p, x, y, width, height) { this.DrawRectangle(p, new YRectangle(x, y, width, height)); }\r\n    DrawEllipse(pen, x, y, width, height) {\r\n        this._SVGcontents.AppendLine(\"<ellipse  cx=\\\"\" + (x + width / 2.0).toString() + \"\\\" \"\r\n            + \" cy =\\\"\" + (y + height / 2.0).toString() + \"\\\" \"\r\n            + \" rx =\\\"\" + (width / 2).toString() + \"\\\" \"\r\n            + \" ry =\\\"\" + (height / 2).toString() + \"\\\" \"\r\n            + \" fill=\\\"none\\\" \"\r\n            + \"style = \\\"stroke:\" + pen.color.svgCode + \";stroke-opacity:\" + pen.color.alphaCode + \"; stroke-width:\" + pen.lineWidth.toString() + \"\\\"/>\");\r\n    }\r\n    FillEllipse(brush, x, y, width, height) {\r\n        this._SVGcontents.AppendLine(\"<ellipse  cx=\\\"\" + (x + width / 2.0).toString() + \"\\\" \"\r\n            + \" cy =\\\"\" + (y + height / 2.0).toString() + \"\\\" \"\r\n            + \" rx =\\\"\" + (width / 2).toString() + \"\\\" \"\r\n            + \" ry =\\\"\" + (height / 2).toString() + \"\\\" \"\r\n            + this.BrushToSVG(brush, false)\r\n            + \"style=\\\"stroke-width:0\\\"/>\");\r\n    }\r\n    DrawStringXY(s, font, brush, x, y) {\r\n        let tokens = s.split('\\n');\r\n        for (let i = 0; i < tokens.length; i++) {\r\n            s = tokens[i];\r\n            this._SVGcontents.AppendLine(\"<text x=\\\"\" + x.toString() + \"\\\" y=\\\"\" + (y + font.sizeInPoints).toString() + \"\\\" text-anchor=\\\"start\\\" \" // dominant-baseline=\\\"hanging\\\" \" //Not supported in  Inkscape :-(\r\n                + \"font-family=\\\"\" + font.name.toString() + \"\\\" \"\r\n                + \"font-size=\\\"\" + font.sizeInPoints.toString() + \"pt\\\" \"\r\n                + \"font-weight=\\\"\" + (font.bold ? \"bold\" : \"normal\") + \"\\\" \"\r\n                + \"font-style=\\\"\" + (font.italic ? \"italic\" : \"normal\") + \"\\\" \"\r\n                + this.BrushToSVG(brush, false)\r\n                + \"style=\\\"stroke-width:0\\\">\\r\\n\"\r\n                + YGraphicsSVG.escapeXml(s)\r\n                + \"\\r\\n</text>\");\r\n            y += (font.sizeInPoints * 1.75);\r\n        }\r\n    }\r\n    DrawString(s, font, brush, p) {\r\n        if (YGraphics._debugDrawString) {\r\n            let pen = new YPen(YColor.Red, 1);\r\n            this.DrawLineXY(pen, p.X - 5, p.Y, p.X + 5, p.Y);\r\n            this.DrawLineXY(pen, p.X, p.Y - 5, p.X, p.Y + 5);\r\n        }\r\n        this.DrawStringXY(s, font, brush, p.X, p.Y);\r\n    }\r\n    DrawStringF(s, font, brush, point, format) {\r\n        let totalsz = this.MeasureString(s, font, 0);\r\n        let y = point.Y + font.size * 1.25;\r\n        switch (format.LineAlignment) {\r\n            case 0 /* YStringFormat.StringAlignment.Near */:\r\n                break;\r\n            case 1 /* YStringFormat.StringAlignment.Center */:\r\n                y += -totalsz.height / 2;\r\n                break;\r\n            case 2 /* YStringFormat.StringAlignment.Far */:\r\n                y += -totalsz.height;\r\n                break;\r\n        }\r\n        let tokens = s.split('\\n');\r\n        for (let i = 0; i < tokens.length; i++) {\r\n            let s = tokens[i];\r\n            let sz = this.MeasureString(s, font, 0);\r\n            let x = point.X;\r\n            switch (format.Alignment) {\r\n                case 0 /* YStringFormat.StringAlignment.Near */:\r\n                    break;\r\n                case 1 /* YStringFormat.StringAlignment.Center */:\r\n                    x += -sz.width / 2;\r\n                    break;\r\n                case 2 /* YStringFormat.StringAlignment.Far */:\r\n                    x += -sz.width;\r\n                    break;\r\n            }\r\n            this._SVGcontents.AppendLine(\"<text x=\\\"\" + x.toString() + \"\\\" y=\\\"\" + y.toString() + \"\\\" text-anchor=\\\"start\\\" \" // dominant-baseline=\\\"hanging\\\" \" //Not supported in  Inkscape :-(\r\n                + \"font-family=\\\"\" + font.name.toString() + \"\\\" \"\r\n                + \"font-size=\\\"\" + font.sizeInPoints.toString() + \"pt\\\" \"\r\n                + \"font-weight=\\\"\" + (font.bold ? \"bold\" : \"normal\") + \"\\\" \"\r\n                + \"font-style=\\\"\" + (font.italic ? \"italic\" : \"normal\") + \"\\\" \"\r\n                + this.BrushToSVG(brush, false)\r\n                + \"style=\\\"stroke-width:0\\\">\\r\\n\"\r\n                + YGraphicsSVG.escapeXml(s)\r\n                + \"\\r\\n</text>\");\r\n            y += (font.sizeInPoints * 1.75);\r\n        }\r\n    }\r\n    DrawStringRect(s, font, brush, layoutRectangle, format) {\r\n        if (YGraphics._debugDrawString) {\r\n            let pen = new YPen(YColor.Red, 1);\r\n            this.DrawRectangle(pen, layoutRectangle);\r\n        }\r\n        let totalsz = this.MeasureString(s, font, 0);\r\n        let y = layoutRectangle.y + font.sizeInPoints * 1.1;\r\n        switch (format.LineAlignment) {\r\n            case 0 /* YStringFormat.StringAlignment.Near */:\r\n                break;\r\n            case 1 /* YStringFormat.StringAlignment.Center */:\r\n                y += (layoutRectangle.h - totalsz.height) / 2;\r\n                break;\r\n            case 2 /* YStringFormat.StringAlignment.Far */:\r\n                y += (layoutRectangle.h - totalsz.height);\r\n                break;\r\n        }\r\n        let tokens = s.split('\\n');\r\n        for (let i = 0; i < tokens.length; i++) {\r\n            let s = tokens[i];\r\n            let sz = this.MeasureString(s, font, 0);\r\n            let x = layoutRectangle.x;\r\n            switch (format.Alignment) {\r\n                case 0 /* YStringFormat.StringAlignment.Near */:\r\n                    break;\r\n                case 1 /* YStringFormat.StringAlignment.Center */:\r\n                    x += (layoutRectangle.w - sz.width) / 2;\r\n                    break;\r\n                case 2 /* YStringFormat.StringAlignment.Far */:\r\n                    x += (layoutRectangle.w - sz.width);\r\n                    break;\r\n            }\r\n            this._SVGcontents.AppendLine(\"<text x=\\\"\" + x.toString() + \"\\\" y=\\\"\" + y.toString() + \"\\\" text-anchor=\\\"start\\\" \" // dominant-baseline=\\\"hanging\\\" \" //Not supported in  Inkscape :-(\r\n                + \"font-family=\\\"\" + font.name.toString() + \"\\\" \"\r\n                + \"font-size=\\\"\" + (font.sizeInPoints * 1.1).toString() + \"pt\\\" \"\r\n                + \"font-weight=\\\"\" + (font.bold ? \"bold\" : \"normal\") + \"\\\" \"\r\n                + \"font-style=\\\"\" + (font.italic ? \"italic\" : \"normal\") + \"\\\" \"\r\n                + this.BrushToSVG(brush, false)\r\n                + \"style=\\\"stroke-width:0\\\">\\r\\n\"\r\n                + YGraphicsSVG.escapeXml(s)\r\n                + \"\\r\\n</text>\");\r\n            y += (font.sizeInPoints * 1.75);\r\n        }\r\n    }\r\n    Transform(dx, dy, angle) {\r\n        this._SVGcontents.AppendLine(\"<g transform=\\\"translate(\" + dx.toString() + \" \" + dy.toString() + \") rotate(\" + (180 * angle / Math.PI).toString() + \")\\\">\");\r\n        this._transformSectionsToClose++;\r\n    }\r\n    ResetTransform() {\r\n        if (this._transformSectionsToClose > 0) {\r\n            this._SVGcontents.AppendLine(\"</g>\");\r\n            this._transformSectionsToClose--;\r\n        }\r\n    }\r\n    DrawPolygon(pen, points) {\r\n        if (points.length < 2)\r\n            return;\r\n        this._SVGcontents.Append(\"<path  d=\\\"M \" + points[0].X.toString() + \" \" + points[0].Y.toString());\r\n        for (let i = 1; i < points.length; i += 1) {\r\n            this._SVGcontents.Append(\" L \" + points[i].X.toString() + \" \" + points[i].Y.toString());\r\n        }\r\n        this._SVGcontents.AppendLine(\" z\\\" fill=\\\"none\\\" \"\r\n            + \"style=\\\"stroke:\" + pen.color.svgCode + \";stroke-opacity:\" + pen.color.alphaCode + \"; stroke-width:\" + pen.lineWidth.toString() + \"\\\"/>\");\r\n    }\r\n    DrawLines(pen, points) {\r\n        if (points.length < 2)\r\n            return;\r\n        this._SVGcontents.Append(\"<path  d=\\\"M \" + points[0].X.toString() + \" \" + points[0].Y.toString());\r\n        for (let i = 1; i < points.length; i++) {\r\n            this._SVGcontents.Append(\" L \" + points[i].X.toString() + \" \" + points[i].Y.toString());\r\n        }\r\n        this._SVGcontents.AppendLine(\"\\\" fill=\\\"none\\\" \"\r\n            + \"style=\\\"stroke:\" + pen.color.svgCode + \";stroke-opacity:\" + pen.color.alphaCode + \"; stroke-linecap:round; stroke-linejoin:round;stroke-width:\" + pen.lineWidth.toString() + \"\\\"/>\");\r\n    }\r\n    FillPolygon(brush, points) {\r\n        if (points.length < 2)\r\n            return;\r\n        this._SVGcontents.Append(\"<path  d=\\\"M \" + points[0].X.toString() + \" \" + points[0].Y.toString());\r\n        for (let i = 1; i < points.length; i++) {\r\n            this._SVGcontents.Append(\" L \" + points[i].X.toString() + \" \" + points[i].Y.toString());\r\n        }\r\n        this._SVGcontents.AppendLine(\" z\\\" \" + this.BrushToSVG(brush, false)\r\n            + \"style=\\\"stroke-width:0\\\"/>\\r\\n\");\r\n    }\r\n    DrawImage(image, destRect, srcRect, srcUnit) { throw new Error(\"DrawImage not supported, find an other way.\"); }\r\n    save(filename) {\r\n        throw new Error(\"Direct save to file not supported.\");\r\n    }\r\n    comment(s) { this._SVGcontents.AppendLine(\"<!--\" + s + \"-->\"); }\r\n    get_svgContents() {\r\n        let physicalWidth = (2.54 * (this._width / this._dpi)).toFixed(3);\r\n        let physicalheight = (2.54 * (this._height / this._dpi)).toFixed(3);\r\n        while (this._clipSectionsToClose > 0) {\r\n            this._SVGcontents.AppendLine(\"</g>\");\r\n            this._clipSectionsToClose--;\r\n        }\r\n        while (this._transformSectionsToClose > 0) {\r\n            this._SVGcontents.AppendLine(\"</g>\");\r\n            this._transformSectionsToClose--;\r\n        }\r\n        return \"<?xml version = \\\"1.0\\\" standalone = \\\"no\\\" ?>\\r\\n\"\r\n            + \"<!DOCTYPE svg PUBLIC \\\"-//W3C//DTD SVG 1.1//EN\\\" \\\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\\\">\\r\\n\"\r\n            + \"<svg width = \\\"\" + physicalWidth + \"cm\\\" height = \\\"\" + physicalheight + \"cm\\\" viewBox = \\\"0 0 \" + this._width.toString() + \" \" + this._height.toString() + \"\\\" \"\r\n            + \"xmlns = \\\"http://www.w3.org/2000/svg\\\" version = \\\"1.1\\\" >\\r\\n\"\r\n            + \"<defs>\\r\\n\"\r\n            + this._SVGdefs.contents\r\n            + \"</defs>\\r\\n\"\r\n            + \"<g clip-path=\\\"url(#pageClip_\" + YGraphicsSVG.SVGID.toString() + \")\\\">\\r\\n\"\r\n            + this._SVGcontents.contents\r\n            + \"</g>\\r\\n\"\r\n            + \"</svg>\\n\";\r\n    }\r\n}\r\nYGraphicsSVG.SVGID = 0;\r\n", "/*\r\n*   Yocto-Visualization (for web), a free web-based application\r\n*   to visualize Yoctopuce Sensors.\r\n*\r\n*  Solid gauge widget renderer\r\n*\r\n*   - - - - - - - - - License information: - - - - - - - - -\r\n*\r\n*  Copyright (C) 2021 and beyond by Yoctopuce Sarl, Switzerland.\r\n*\r\n*  Yoctopuce Sarl (hereafter Licensor) grants to you a perpetual\r\n*  non-exclusive license to use, modify, copy and integrate this\r\n*  file into your software for the sole purpose of interfacing\r\n*  with Yoctopuce products.\r\n*\r\n*  You may reproduce and distribute copies of this file in\r\n*  source or object form, as long as the sole purpose of this\r\n*  code is to interface with Yoctopuce products. You must retain\r\n*  this notice in the distributed source file.\r\n*\r\n*  You should refer to Yoctopuce General Terms and Conditions\r\n*  for additional information regarding your rights and\r\n*  obligations.\r\n*\r\n*  THE SOFTWARE AND DOCUMENTATION ARE PROVIDED \"AS IS\" WITHOUT\r\n*  WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING\r\n*  WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, FITNESS\r\n*  FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO\r\n*  EVENT SHALL LICENSOR BE LIABLE FOR ANY INCIDENTAL, SPECIAL,\r\n*  INDIRECT OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA,\r\n*  COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY OR\r\n*  SERVICES, ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT\r\n*  LIMITED TO ANY DEFENSE THEREOF), ANY CLAIMS FOR INDEMNITY OR\r\n*  CONTRIBUTION, OR OTHER SIMILAR COSTS, WHETHER ASSERTED ON THE\r\n*  BASIS OF CONTRACT, TORT (INCLUDING NEGLIGENCE), BREACH OF\r\n*  WARRANTY, OR OTHERWISE.\r\n*/\r\nimport * as YDataRendering from \"./YDataRendererCommon.js\";\r\nexport class YAngularZone extends YDataRendering.Zone {\r\n    constructor(parentRenderer, directParent) {\r\n        super(parentRenderer, directParent);\r\n        this._path = null;\r\n        this._width = 10;\r\n        this._outerRadius = 98;\r\n    }\r\n    get path() {\r\n        return this._path;\r\n    }\r\n    setPathSize(count) {\r\n        this._path = new Array(count).fill(null);\r\n    }\r\n    setPathPoint(index, p) {\r\n        this._path[index] = p;\r\n    }\r\n    resetPath() {\r\n        this._path = null;\r\n    }\r\n    resetCache() {\r\n        this.resetPath();\r\n    }\r\n    get width() {\r\n        return this._width;\r\n    }\r\n    set width(value) {\r\n        if (value <= 0)\r\n            throw new RangeError(\"Width must be a positive value\");\r\n        this._width = value;\r\n        this._path = null;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get outerRadius() {\r\n        return this._outerRadius;\r\n    }\r\n    set outerRadius(value) {\r\n        this._outerRadius = Math.max(0, Math.min(100, value));\r\n        this._path = null;\r\n        this._parentRenderer.redraw();\r\n    }\r\n}\r\nexport class YAngularGauge extends YDataRendering.YDataRenderer {\r\n    constructor(UIContainer, logFunction) {\r\n        super(UIContainer, logFunction);\r\n        this._min = 0;\r\n        this._max = 100;\r\n        this.SegmentMaxLength = 8;\r\n        this._borderpen = null;\r\n        this._borderColor = YDataRendering.YColor.Black;\r\n        this._bgBrush = null;\r\n        this._backgroundColor1 = YDataRendering.YColor.FromArgb(255, 240, 240, 240);\r\n        this._backgroundColor2 = YDataRendering.YColor.FromArgb(255, 200, 200, 200);\r\n        this._borderThickness = 5;\r\n        this._valueFormater = null;\r\n        this._minmaxFormater = null;\r\n        this._thickness = 20;\r\n        this._value = 0;\r\n        this._needleValue = 0;\r\n        this._color1 = YDataRendering.YColor.Green;\r\n        this._color2 = YDataRendering.YColor.Red;\r\n        this._graduationPen = null;\r\n        this._graduationColor = YDataRendering.YColor.Black;\r\n        this._graduationThickness = 2;\r\n        this._graduationSize = 10;\r\n        this._graduation = 10;\r\n        this._unitFactor = 1;\r\n        this._unit = \"\";\r\n        this._subgraduationPen = null;\r\n        this._subgraduationColor = YDataRendering.YColor.Black;\r\n        this._subgraduationThickness = 1;\r\n        this._subgraduationSize = 5;\r\n        this._graduationOuterRadiusSize = 98;\r\n        this._subgraduationCount = 5;\r\n        this._statusColor = YDataRendering.YColor.Gray;\r\n        this._statusLine = \"\";\r\n        this._showNeedle = true;\r\n        this._needleBrush = null;\r\n        this._needleColor = YDataRendering.YColor.Red;\r\n        this._needleMaxSpeed = 5;\r\n        this._needleLength1 = 90;\r\n        this._needleLength2 = 5;\r\n        this._needleWidth = 5;\r\n        this._needleContourPen = null;\r\n        this._needleContourColor = YDataRendering.YColor.DarkRed;\r\n        this._needleContourThickness = 1;\r\n        this._showMinMax = true;\r\n        this._path = null;\r\n        this._graduationFont = new YDataRendering.YFont(this, this, Math.min(this.getContainerInnerWidth(), this.getContainerInnerHeight()) / 15, null);\r\n        this._unitFont = new YDataRendering.YFont(this, this, Math.min(this.getContainerInnerWidth(), this.getContainerInnerHeight()) / 20, null);\r\n        this._statusFont = new YDataRendering.YFont(this, this, Math.min(this.getContainerInnerWidth(), this.getContainerInnerHeight()) / 15, null);\r\n        this.unitFont.color = YDataRendering.YColor.DarkGray;\r\n        this._statusFont.color = YDataRendering.YColor.DarkGray;\r\n        this.resizeRule = YDataRendering.Proportional.ResizeRule.RELATIVETOBOTH;\r\n        this._zones = [];\r\n    }\r\n    get min() {\r\n        return this._min;\r\n    }\r\n    set min(value) {\r\n        if ((value >= this._max) && (!YDataRendering.YDataRenderer.minMaxCheckDisabled)) {\r\n            throw new RangeError(\"Min cannot be greater than max (\" + this._max.toString() + \")\");\r\n        }\r\n        this._min = value;\r\n        for (let i = 0; i < this._zones.length; i++) {\r\n            this._zones[i].resetPath();\r\n        }\r\n        if (this._needleValue < this._min) {\r\n            this._needleValue = this._min;\r\n        }\r\n        this.redraw();\r\n    }\r\n    get max() {\r\n        return this._max;\r\n    }\r\n    set max(value) {\r\n        if ((value <= this._min) && (!YDataRendering.YDataRenderer.minMaxCheckDisabled)) {\r\n            throw new RangeError(\"Max cannot be less than min (\" + this._min.toString() + \")\");\r\n        }\r\n        this._max = value;\r\n        for (let i = 0; i < this._zones.length; i++) {\r\n            this._zones[i].resetPath();\r\n        }\r\n        if (this._needleValue > this._max) {\r\n            this._needleValue = this._max;\r\n        }\r\n        this.redraw();\r\n    }\r\n    get borderpen() {\r\n        if (this._borderpen == null) {\r\n            this._borderpen = new YDataRendering.YPen(this._borderColor, this._borderThickness);\r\n            this._borderpen.startCap = 1 /* YDataRendering.YPen.LineCap.Square */;\r\n            this._borderpen.endCap = 1 /* YDataRendering.YPen.LineCap.Square */;\r\n        }\r\n        return this._borderpen;\r\n    }\r\n    get borderColor() {\r\n        return this._borderColor;\r\n    }\r\n    set borderColor(value) {\r\n        this._borderColor = value;\r\n        this._borderpen = null;\r\n        this.redraw();\r\n    }\r\n    get backgroundColor1() {\r\n        return this._backgroundColor1;\r\n    }\r\n    set backgroundColor1(value) {\r\n        this._backgroundColor1 = value;\r\n        this._bgBrush = null;\r\n        this.redraw();\r\n    }\r\n    get backgroundColor2() {\r\n        return this._backgroundColor2;\r\n    }\r\n    set backgroundColor2(value) {\r\n        this._backgroundColor2 = value;\r\n        this._bgBrush = null;\r\n        this.redraw();\r\n    }\r\n    get borderThickness() {\r\n        return this._borderThickness;\r\n    }\r\n    set borderThickness(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"thickness must be a positive value\");\r\n        this._borderThickness = value;\r\n        this._borderpen = null;\r\n        this.redraw();\r\n    }\r\n    get valueFormater() {\r\n        return this._valueFormater;\r\n    }\r\n    set valueFormater(value) {\r\n        this._valueFormater = value;\r\n        this.redraw();\r\n    }\r\n    get minmaxFormater() {\r\n        return this._minmaxFormater;\r\n    }\r\n    set minmaxFormater(value) {\r\n        this._minmaxFormater = value;\r\n        this.redraw();\r\n    }\r\n    get thickness() {\r\n        return this._thickness;\r\n    }\r\n    set thickness(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Thickness must be a positive value\");\r\n        this._thickness = Math.max(Math.min(value, 80), 1);\r\n        this.redraw();\r\n    }\r\n    get value() {\r\n        return this._value;\r\n    }\r\n    set value(value) {\r\n        this._value = value;\r\n        this.redraw();\r\n    }\r\n    get color1() {\r\n        return this._color1;\r\n    }\r\n    set color1(value) {\r\n        this._color1 = value;\r\n        this.redraw();\r\n    }\r\n    get color2() {\r\n        return this._color2;\r\n    }\r\n    set color2(value) {\r\n        this._color2 = value;\r\n        this.redraw();\r\n    }\r\n    get graduationColor() {\r\n        return this._graduationColor;\r\n    }\r\n    set graduationColor(value) {\r\n        this._graduationColor = value;\r\n        this._graduationPen = null;\r\n        this.redraw();\r\n    }\r\n    get graduationThickness() {\r\n        return this._graduationThickness;\r\n    }\r\n    set graduationThickness(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Thickness must be a positive value\");\r\n        this._graduationThickness = value;\r\n        this._graduationPen = null;\r\n        this.redraw();\r\n    }\r\n    get graduationSize() {\r\n        return this._graduationSize;\r\n    }\r\n    set graduationSize(value) {\r\n        if (value <= 0)\r\n            throw new RangeError(\"Graduation size must be a positive value\");\r\n        this._graduationSize = value;\r\n        this.redraw();\r\n    }\r\n    get graduation() {\r\n        return this._graduation;\r\n    }\r\n    set graduation(value) {\r\n        this._graduation = value;\r\n        this.redraw();\r\n    }\r\n    get unitFactor() {\r\n        return this._unitFactor;\r\n    }\r\n    set unitFactor(value) {\r\n        if (value == 0)\r\n            throw new RangeError(\"Factor cannot be zero.\");\r\n        this._unitFactor = value;\r\n        this.redraw();\r\n    }\r\n    get unit() {\r\n        return this._unit;\r\n    }\r\n    set unit(value) {\r\n        this._unit = value;\r\n        this.redraw();\r\n    }\r\n    get unitFont() {\r\n        return this._unitFont;\r\n    }\r\n    get subgraduationColor() {\r\n        return this._subgraduationColor;\r\n    }\r\n    set subgraduationColor(value) {\r\n        this._subgraduationColor = value;\r\n        this._subgraduationPen = null;\r\n        this.redraw();\r\n    }\r\n    get subgraduationThickness() {\r\n        return this._subgraduationThickness;\r\n    }\r\n    set subgraduationThickness(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Thickness must be a positive value\");\r\n        this._subgraduationThickness = value;\r\n        this._subgraduationPen = null;\r\n        this.redraw();\r\n    }\r\n    get subgraduationSize() {\r\n        return this._subgraduationSize;\r\n    }\r\n    set subgraduationSize(value) {\r\n        if (value <= 0)\r\n            throw new RangeError(\"Size must be a positive value\");\r\n        this._subgraduationSize = value;\r\n        this.redraw();\r\n    }\r\n    get graduationOuterRadiusSize() {\r\n        return this._graduationOuterRadiusSize;\r\n    }\r\n    set graduationOuterRadiusSize(value) {\r\n        this._graduationOuterRadiusSize = Math.max(0, Math.min(100, value));\r\n        this.redraw();\r\n    }\r\n    get subgraduationCount() {\r\n        return this._subgraduationCount;\r\n    }\r\n    set subgraduationCount(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Count must be a positive value\");\r\n        this._subgraduationCount = value;\r\n        this.redraw();\r\n    }\r\n    get statusColor() {\r\n        return this._statusColor;\r\n    }\r\n    set statusColor(value) {\r\n        this._statusColor = value;\r\n        this.redraw();\r\n    }\r\n    get statusFont() {\r\n        return this._unitFont;\r\n    }\r\n    get statusLine() {\r\n        return this._statusLine;\r\n    }\r\n    set statusLine(value) {\r\n        this._statusLine = value;\r\n        this.redraw();\r\n    }\r\n    get showNeedle() {\r\n        return this._showNeedle;\r\n    }\r\n    set showNeedle(value) {\r\n        this._showNeedle = value;\r\n        this.redraw();\r\n    }\r\n    get needleColor() {\r\n        return this._needleColor;\r\n    }\r\n    set needleColor(value) {\r\n        this._needleColor = value;\r\n        this._needleBrush = null;\r\n        this.redraw();\r\n    }\r\n    get needleMaxSpeed() {\r\n        return this._needleMaxSpeed;\r\n    }\r\n    set needleMaxSpeed(value) {\r\n        if (value <= 0)\r\n            throw new RangeError(\"Speed must be a positive value\");\r\n        this._needleMaxSpeed = value;\r\n        this.redraw();\r\n    }\r\n    get needleLength1() {\r\n        return this._needleLength1;\r\n    }\r\n    set needleLength1(value) {\r\n        this._needleLength1 = value;\r\n        this.redraw();\r\n    }\r\n    get needleLength2() {\r\n        return this._needleLength2;\r\n    }\r\n    set needleLength2(value) {\r\n        this._needleLength2 = value;\r\n        this.redraw();\r\n    }\r\n    get needleWidth() {\r\n        return this._needleWidth;\r\n    }\r\n    set needleWidth(value) {\r\n        if (value <= 0)\r\n            throw new RangeError(\"Width must be a positive value\");\r\n        this._needleWidth = value;\r\n        this.redraw();\r\n    }\r\n    get needleContourColor() {\r\n        return this._needleContourColor;\r\n    }\r\n    set needleContourColor(value) {\r\n        this._needleContourColor = value;\r\n        this._needleContourPen = null;\r\n        this.redraw();\r\n    }\r\n    get needleContourThickness() {\r\n        return this._needleContourThickness;\r\n    }\r\n    set needleContourThickness(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Thickness must be a positive value\");\r\n        this._needleContourThickness = value;\r\n        this._needleContourPen = null;\r\n        this.redraw();\r\n    }\r\n    get graduationFont() {\r\n        return this._graduationFont;\r\n    }\r\n    get showMinMax() {\r\n        return this._showMinMax;\r\n    }\r\n    set showMinMax(value) {\r\n        this._showMinMax = value;\r\n        this.redraw();\r\n    }\r\n    clearCachedObjects() {\r\n        if (this._zones != null) {\r\n            for (let i = 0; i < this._zones.length; i++) {\r\n                this._zones[i].resetPath();\r\n            }\r\n        }\r\n        this._path = null;\r\n        this._bgBrush = null;\r\n    }\r\n    get zones() {\r\n        return this._zones;\r\n    }\r\n    AddZone() {\r\n        let z = new YAngularZone(this, this);\r\n        this._zones.push(z);\r\n        return z;\r\n    }\r\n    Render(g, w, h) {\r\n        let mainViewPort = new YDataRendering.ViewPortSettings();\r\n        mainViewPort.Lmargin = 0;\r\n        mainViewPort.Rmargin = 0;\r\n        mainViewPort.Tmargin = 0;\r\n        mainViewPort.Bmargin = 0;\r\n        g.SmoothingMode = YDataRendering.YSmoothingMode.HighQuality;\r\n        g.TextRenderingHint = YDataRendering.YTextRenderingHint.AntiAlias;\r\n        let stringFormat4Sizing = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\r\n        let stringFormat = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\r\n        stringFormat.Alignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\r\n        stringFormat.LineAlignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\r\n        this.drawAnnotationPanels(g, this._annotationPanels, w, h, false, mainViewPort);\r\n        g.TextRenderingHint = YDataRendering.YTextRenderingHint.AntiAlias;\r\n        let xcenter = mainViewPort.Lmargin + (w - mainViewPort.Lmargin - mainViewPort.Rmargin) / 2;\r\n        let ycenter = mainViewPort.Tmargin + (h - mainViewPort.Tmargin - mainViewPort.Bmargin) / 2;\r\n        let radius = Math.min((w - mainViewPort.Lmargin - mainViewPort.Rmargin) / 2, (h - mainViewPort.Tmargin - mainViewPort.Bmargin) / 2) - this.borderThickness;\r\n        let circonference = (2 * radius * 3.14) >> 0;\r\n        let AngleAperture = 4 * 2 * Math.PI / 5;\r\n        if (this._path == null) {\r\n            let outterlength = (2 * radius * Math.PI);\r\n            let stepCount = (outterlength / this.SegmentMaxLength) >> 0;\r\n            let stepsize = (2 * Math.PI) / stepCount;\r\n            this._path = new Array(stepCount).fill(null);\r\n            let n = 0;\r\n            for (let i = 0; i < stepCount; i++) {\r\n                let a = (2 * i * Math.PI) / stepCount;\r\n                this._path[n++] = new YDataRendering.PointF((xcenter + radius * Math.cos(a)), (ycenter - radius * Math.sin(a)));\r\n            }\r\n        }\r\n        if (this._bgBrush == null)\r\n            this._bgBrush = new YDataRendering.YLinearGradientBrush(this._backgroundColor1, this._backgroundColor2);\r\n        if (this._borderpen == null) {\r\n            this._borderpen = new YDataRendering.YPen(this._borderColor, this._borderThickness);\r\n            this._borderpen.linejoin = YDataRendering.YPen.LineJoin.Round;\r\n        }\r\n        if (this._path.length > 3)\r\n            g.FillPolygon(this._bgBrush, this._path);\r\n        if (this._graduationPen == null)\r\n            this._graduationPen = new YDataRendering.YPen(this._graduationColor, this._graduationThickness);\r\n        if (this._subgraduationPen == null)\r\n            this._subgraduationPen = new YDataRendering.YPen(this._subgraduationColor, this._subgraduationThickness);\r\n        // draw unit\r\n        let unitDesc = ((this._unitFactor != 1) ? \"x\" + this._unitFactor.toString() + \" \" : \"\") + this._unit;\r\n        let size = g.MeasureStringSF(unitDesc.toString(), this._unitFont, 10000, stringFormat4Sizing);\r\n        let unitPos = new YDataRendering.YRectangle((xcenter - size.width / 2) >> 0, (ycenter + radius / 2 - size.height / 2) >> 0, (size.width + 1) >> 0, (size.height + 1) >> 0);\r\n        g.DrawStringRect(unitDesc, this._unitFont, this._unitFont.brush, unitPos, stringFormat);\r\n        // draw status line\r\n        if (this._statusLine != \"\") {\r\n            size = g.MeasureStringSF(this._statusLine, this._statusFont, 10000, stringFormat4Sizing);\r\n            let statusPos = new YDataRendering.YRectangle((xcenter - size.width / 2) >> 0, (ycenter - radius / 3 - size.height / 2) >> 0, (size.width + 1), (size.height + 1));\r\n            g.DrawStringRect(this._statusLine, this._statusFont, this._statusFont.brush, statusPos, stringFormat);\r\n        }\r\n        let firstGraduation;\r\n        let gratuationCount;\r\n        let Angle, C, S, R1, R2;\r\n        let outerCoef = this._graduationOuterRadiusSize / 100;\r\n        // draw zones\r\n        for (let i = 0; i < this._zones.length; i++) {\r\n            if (this._zones[i].visible) {\r\n                if (this._zones[i].path == null) {\r\n                    let zmin = Math.max(this._min, Math.min(this._max, this._zones[i].min));\r\n                    let zmax = Math.max(this._min, Math.min(this._max, this._zones[i].max));\r\n                    if (zmax > zmin) {\r\n                        let zOuterCoef = this._zones[i].outerRadius / 100;\r\n                        let Angle1 = ((Math.PI - AngleAperture) / 2) + AngleAperture * (zmin - this._min) / (this._max - this._min);\r\n                        let Angle2 = ((Math.PI - AngleAperture) / 2) + AngleAperture * (zmax - this._min) / (this._max - this._min);\r\n                        let outterlength = (Angle2 - Angle1) * radius;\r\n                        let stepCount = (outterlength / this.SegmentMaxLength) >> 0;\r\n                        if (stepCount < 2)\r\n                            stepCount = 2;\r\n                        this._zones[i].setPathSize(2 * stepCount + 2);\r\n                        // let Path: YDataRendering.PointF[] = new Array(2 * stepCount + 2).fill(null);\r\n                        for (let j = 0; j <= stepCount; j++) {\r\n                            let A = Angle1 + ((Angle2 - Angle1) * j) / stepCount;\r\n                            this._zones[i].setPathPoint(j, new YDataRendering.PointF((xcenter - radius * zOuterCoef * Math.cos(A)), (ycenter - radius * zOuterCoef * Math.sin(A))));\r\n                        }\r\n                        let innerRadiusCoef = zOuterCoef - (this._zones[i].width / 100);\r\n                        for (let j = stepCount; j >= 0; j--) {\r\n                            let A = Angle1 + ((Angle2 - Angle1) * j) / stepCount;\r\n                            this._zones[i].setPathPoint(2 * stepCount + 1 - j, new YDataRendering.PointF((xcenter - radius * innerRadiusCoef * Math.cos(A)), (ycenter - radius * innerRadiusCoef * Math.sin(A))));\r\n                        }\r\n                    }\r\n                }\r\n                if (this._zones[i].path != null)\r\n                    g.FillPolygon(this._zones[i].zoneBrush, this._zones[i].path);\r\n            }\r\n        }\r\n        firstGraduation = this._graduation * (this._min / this._graduation) >> 0;\r\n        if (this._min < 0)\r\n            firstGraduation -= this._graduation;\r\n        while (firstGraduation < this._min) {\r\n            firstGraduation += this._graduation;\r\n        }\r\n        gratuationCount = 1 + ((this._max - this._min) / this._graduation) >> 0;\r\n        // draw sub graduations\r\n        if ((this._subgraduationCount > 0) && ((this._subgraduationCount * gratuationCount) < circonference)) {\r\n            let subgraduation = this._graduation / this._subgraduationCount;\r\n            firstGraduation = subgraduation * ((this._min / subgraduation) >> 0);\r\n            if (this._min < 0)\r\n                firstGraduation -= subgraduation;\r\n            while (firstGraduation < this._min) {\r\n                firstGraduation += subgraduation;\r\n            }\r\n            gratuationCount = 1 + ((this._max - this._min) / subgraduation) >> 0;\r\n            for (let i = 0; i < gratuationCount; i++) {\r\n                let value = firstGraduation + i * subgraduation;\r\n                if (value <= this._max) {\r\n                    Angle = ((Math.PI - AngleAperture) / 2) + AngleAperture * (value - this._min) / (this._max - this._min);\r\n                    C = Math.cos(Angle);\r\n                    S = Math.sin(Angle);\r\n                    R1 = (outerCoef * (radius - this._borderThickness / 2));\r\n                    R2 = (100 - this._subgraduationSize) * (outerCoef * (radius - this._borderThickness / 2)) / 100;\r\n                    g.DrawLineXY(this._subgraduationPen, (xcenter - R1 * C), (ycenter - R1 * S), (xcenter - R2 * C), (ycenter - R2 * S));\r\n                }\r\n            }\r\n        }\r\n        // draw Main graduations\r\n        if (gratuationCount < circonference) // stop drawing graduation if too many\r\n         {\r\n            for (let i = 0; i < gratuationCount; i++) {\r\n                let gvalue = firstGraduation + i * this._graduation;\r\n                if (gvalue <= this._max) {\r\n                    Angle = ((Math.PI - AngleAperture) / 2) + AngleAperture * (gvalue - this._min) / (this._max - this._min);\r\n                    C = Math.cos(Angle);\r\n                    S = Math.sin(Angle);\r\n                    R1 = (outerCoef * (radius - this._borderThickness / 2));\r\n                    R2 = (100 - this._graduationSize) * (outerCoef * (radius - this._borderThickness / 2)) / 100;\r\n                    g.DrawLineXY(this._graduationPen, (xcenter - R1 * C), (ycenter - R1 * S), (xcenter - R2 * C), (ycenter - R2 * S));\r\n                    size = g.MeasureStringSF(gvalue.toString().trim(), this._graduationFont, 1000, stringFormat4Sizing);\r\n                    let HalfDiagonal = 0.4 * Math.sqrt(size.width * size.width + size.height * size.height);\r\n                    let position = new YDataRendering.YRectangle((xcenter - (R2 - HalfDiagonal) * C - (size.width / 2)) >> 0, (ycenter - (R2 - HalfDiagonal) * S - (size.height / 2)) >> 0, (size.width >> 0) + 1, size.height >> 0);\r\n                    //  g.DrawRectangle(new YDataRendering.YPen(Color.Red, 1), position);\r\n                    g.DrawStringRect(gvalue.toString(), this._graduationFont, this._graduationFont.brush, position, stringFormat);\r\n                }\r\n            }\r\n        }\r\n        // draw Border\r\n        if ((this._borderThickness > 0) && (this._path.length > 3))\r\n            g.DrawPolygon(this._borderpen, this._path);\r\n        this.drawAnnotationPanels(g, this._annotationPanels, w, h, true, mainViewPort);\r\n        // draw Needle\r\n        if (this._showNeedle) {\r\n            if (this._needleValue != this._value) {\r\n                let step = this._unitFactor * this._needleMaxSpeed * (this._max - this._min) / 100;\r\n                if (Math.abs(this._value - this._needleValue) < step) {\r\n                    this._needleValue = this._value;\r\n                }\r\n                else if (this._needleValue < this.value) {\r\n                    this._needleValue += step;\r\n                }\r\n                else {\r\n                    this._needleValue -= step;\r\n                }\r\n            }\r\n            let needlevalue = this._needleValue / this._unitFactor;\r\n            let allowedOverflow = (this._max - this.min) * 0.05;\r\n            if (needlevalue < this._min - allowedOverflow)\r\n                needlevalue = this._min - allowedOverflow;\r\n            if (needlevalue > this._max + allowedOverflow)\r\n                needlevalue = this._max + allowedOverflow;\r\n            Angle = ((Math.PI - AngleAperture) / 2) + AngleAperture * (needlevalue - this._min) / (this._max - this._min);\r\n            C = Math.cos(Angle);\r\n            S = Math.sin(Angle);\r\n            R1 = (radius * this._needleLength1) / 100;\r\n            R2 = (radius * this._needleLength2) / 100;\r\n            let R3 = (radius * this._needleWidth) / 200;\r\n            let needlepath = new Array(4).fill(null);\r\n            needlepath[0] = new YDataRendering.PointF((xcenter - R1 * C), (ycenter - R1 * S));\r\n            needlepath[1] = new YDataRendering.PointF((xcenter + R3 * S), (ycenter - R3 * C));\r\n            needlepath[2] = new YDataRendering.PointF((xcenter + R2 * C), (ycenter + R2 * S));\r\n            needlepath[3] = new YDataRendering.PointF((xcenter - R3 * S), (ycenter + R3 * C));\r\n            if (this._needleBrush == null)\r\n                this._needleBrush = new YDataRendering.YSolidBrush(this._needleColor);\r\n            g.FillPolygon(this._needleBrush, needlepath);\r\n            if (this._needleContourThickness > 0) {\r\n                if (this._needleContourPen == null) {\r\n                    this._needleContourPen = new YDataRendering.YPen(this._needleContourColor, this._needleContourThickness);\r\n                    this._needleContourPen.startCap = 2 /* YDataRendering.YPen.LineCap.Round */;\r\n                    this._needleContourPen.endCap = 2 /* YDataRendering.YPen.LineCap.Round */;\r\n                    this._needleContourPen.linejoin = YDataRendering.YPen.LineJoin.Round;\r\n                }\r\n                let needlepath2 = new Array(5).fill(null);\r\n                needlepath2[0] = needlepath[0];\r\n                needlepath2[1] = needlepath[1];\r\n                needlepath2[2] = needlepath[2];\r\n                needlepath2[3] = needlepath[3];\r\n                needlepath2[4] = needlepath[0];\r\n                g.DrawLines(this._needleContourPen, needlepath2);\r\n            }\r\n        }\r\n        this.DrawMessagePanels(g, w, h);\r\n        return 0;\r\n    }\r\n    renderingPostProcessing() {\r\n        if (this._needleValue != this._value)\r\n            this.redraw();\r\n    }\r\n}\r\n", "/*\r\n*   Yocto-Visualization (for web), a free web-based application\r\n*   to visualize Yoctopuce Sensors.\r\n*\r\n*  Digital display  widget renderer\r\n*\r\n*   - - - - - - - - - License information: - - - - - - - - -\r\n*\r\n*  Copyright (C) 2021 and beyond by Yoctopuce Sarl, Switzerland.\r\n*\r\n*  Yoctopuce Sarl (hereafter Licensor) grants to you a perpetual\r\n*  non-exclusive license to use, modify, copy and integrate this\r\n*  file into your software for the sole purpose of interfacing\r\n*  with Yoctopuce products.\r\n*\r\n*  You may reproduce and distribute copies of this file in\r\n*  source or object form, as long as the sole purpose of this\r\n*  code is to interface with Yoctopuce products. You must retain\r\n*  this notice in the distributed source file.\r\n*\r\n*  You should refer to Yoctopuce General Terms and Conditions\r\n*  for additional information regarding your rights and\r\n*  obligations.\r\n*\r\n*  THE SOFTWARE AND DOCUMENTATION ARE PROVIDED \"AS IS\" WITHOUT\r\n*  WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING\r\n*  WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, FITNESS\r\n*  FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO\r\n*  EVENT SHALL LICENSOR BE LIABLE FOR ANY INCIDENTAL, SPECIAL,\r\n*  INDIRECT OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA,\r\n*  COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY OR\r\n*  SERVICES, ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT\r\n*  LIMITED TO ANY DEFENSE THEREOF), ANY CLAIMS FOR INDEMNITY OR\r\n*  CONTRIBUTION, OR OTHER SIMILAR COSTS, WHETHER ASSERTED ON THE\r\n*  BASIS OF CONTRACT, TORT (INCLUDING NEGLIGENCE), BREACH OF\r\n*  WARRANTY, OR OTHERWISE.\r\n*/\r\nimport * as YDataRendering from \"./YDataRendererCommon.js\";\r\nexport class YDigitalDisplay extends YDataRendering.YDataRenderer {\r\n    constructor(UIContainer, logFunction) {\r\n        super(UIContainer, logFunction);\r\n        this._bgBrush = null;\r\n        this._backgroundColor1 = YDataRendering.YColor.Black;\r\n        this._backgroundColor2 = YDataRendering.YColor.FromArgb(255, 48, 48, 48);\r\n        this._alternateValue = null;\r\n        this._valueFormater = null;\r\n        this._hrzAlignmentOfset = 5.0;\r\n        this._hrzAlignment = YDigitalDisplay.HrzAlignment.DECIMAL;\r\n        this._outOfRangeMin = Number.NaN;\r\n        this._outOfRangeMax = Number.NaN;\r\n        this._outOfRangeColor = YDataRendering.YColor.Red;\r\n        this._value = 0.0;\r\n        this._font = new YDataRendering.YFont(this, this, Math.min(UIContainer.width / 5, UIContainer.height / 2), null);\r\n        this._font.color = YDataRendering.YColor.LightGreen;\r\n        this.resizeRule = YDataRendering.Proportional.ResizeRule.RELATIVETOBOTH;\r\n    }\r\n    get backgroundColor1() { return this._backgroundColor1; }\r\n    set backgroundColor1(value) {\r\n        this._backgroundColor1 = value;\r\n        this._bgBrush = null;\r\n        this.redraw();\r\n    }\r\n    get backgroundColor2() { return this._backgroundColor2; }\r\n    set backgroundColor2(value) {\r\n        this._backgroundColor2 = value;\r\n        this._bgBrush = null;\r\n        this.redraw();\r\n    }\r\n    get alternateValue() { return this._alternateValue; }\r\n    set alternateValue(value) {\r\n        this._alternateValue = value;\r\n        this.redraw();\r\n    }\r\n    get valueFormater() { return this._valueFormater; }\r\n    set valueFormater(value) {\r\n        this._valueFormater = value;\r\n        this.redraw();\r\n    }\r\n    get hrzAlignmentOfset() { return this._hrzAlignmentOfset; }\r\n    set hrzAlignmentOfset(value) {\r\n        this._hrzAlignmentOfset = value;\r\n        this.redraw();\r\n    }\r\n    get hrzAlignment() { return this._hrzAlignment; }\r\n    set hrzAlignment(value) {\r\n        this._hrzAlignment = value;\r\n        this.redraw();\r\n    }\r\n    get outOfRangeMin() { return this._outOfRangeMin; }\r\n    set outOfRangeMin(value) {\r\n        if (!Number.isNaN(value) && !Number.isNaN(this._outOfRangeMax) && !YDataRendering.YDataRenderer.minMaxCheckDisabled) {\r\n            if (value >= this._outOfRangeMax)\r\n                throw new RangeError(\"Min cannot be greater than max (\" + this._outOfRangeMax.toString() + \")\");\r\n        }\r\n        this._outOfRangeMin = value;\r\n        this.redraw();\r\n    }\r\n    get outOfRangeMax() { return this._outOfRangeMax; }\r\n    set outOfRangeMax(value) {\r\n        if (!Number.isNaN(value) && !Number.isNaN(this._outOfRangeMin) && !YDataRendering.YDataRenderer.minMaxCheckDisabled) {\r\n            if (value <= this._outOfRangeMin)\r\n                throw new RangeError(\"Min cannot be less than max (\" + this._outOfRangeMin.toString() + \")\");\r\n        }\r\n        this._outOfRangeMax = value;\r\n        this.redraw();\r\n    }\r\n    get outOfRangeColor() { return this._outOfRangeColor; }\r\n    set outOfRangeColor(value) {\r\n        this._outOfRangeColor = value;\r\n        this.redraw();\r\n    }\r\n    get value() { return this._value; }\r\n    set value(value) {\r\n        this._value = value;\r\n        this.redraw();\r\n    }\r\n    get font() { return this._font; }\r\n    clearCachedObjects() {\r\n        if (this.font != null)\r\n            this.font.ResetFont(null);\r\n        this._bgBrush = null;\r\n    }\r\n    Render(g, w, h) {\r\n        let mainViewPort = new YDataRendering.ViewPortSettings();\r\n        mainViewPort.Lmargin = 0;\r\n        mainViewPort.Rmargin = 0;\r\n        mainViewPort.Tmargin = 0;\r\n        mainViewPort.Bmargin = 0;\r\n        g.SmoothingMode = YDataRendering.YSmoothingMode.HighQuality;\r\n        g.TextRenderingHint = YDataRendering.YTextRenderingHint.AntiAlias;\r\n        let stringFormat = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\r\n        stringFormat.Alignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\r\n        stringFormat.LineAlignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\r\n        if (this._bgBrush == null) {\r\n            this._bgBrush = new YDataRendering.YLinearGradientBrush(this._backgroundColor1, this._backgroundColor2);\r\n        }\r\n        g.FillRectangleXYHW(this._bgBrush, 0, 0, w, h);\r\n        this.drawAnnotationPanels(g, this._annotationPanels, w, h, false, mainViewPort);\r\n        if (mainViewPort.Tmargin >= 20)\r\n            mainViewPort.Tmargin -= 10; // AnnotationPanels adds at least 20px warnings\r\n        if (mainViewPort.Bmargin >= 20)\r\n            mainViewPort.Bmargin -= 10; // which is a bit much for digital display\r\n        g.TextRenderingHint = YDataRendering.YTextRenderingHint.AntiAlias;\r\n        let availWidth = w - (mainViewPort.Lmargin + mainViewPort.Rmargin);\r\n        let availHeight = h - (mainViewPort.Tmargin + mainViewPort.Bmargin);\r\n        if ((availWidth > 10) && (availHeight > 10)) { // draw unit\r\n            let svalue;\r\n            if (this._alternateValue == null) {\r\n                svalue = this._valueFormater == null ? this.value.toFixed(3) : this._valueFormater(this, this.value);\r\n                if ((!Number.isNaN(this._outOfRangeMin)) && (this.value < this._outOfRangeMin)) {\r\n                    this.font.alternateColor = this._outOfRangeColor;\r\n                }\r\n                else if ((!Number.isNaN(this._outOfRangeMax)) && (this.value > this._outOfRangeMax)) {\r\n                    this.font.alternateColor = this._outOfRangeColor;\r\n                }\r\n                else {\r\n                    this.font.alternateColor = null;\r\n                }\r\n            }\r\n            else {\r\n                this._font.alternateColor = null;\r\n                svalue = this._alternateValue;\r\n            }\r\n            let size = g.MeasureStringSF(svalue, this.font, 10000, stringFormat);\r\n            let pos;\r\n            let align = this._hrzAlignment;\r\n            if ((this._alternateValue != null) && (align == YDigitalDisplay.HrzAlignment.DECIMAL))\r\n                align = YDigitalDisplay.HrzAlignment.RIGHT;\r\n            if ((align == YDigitalDisplay.HrzAlignment.DECIMAL) && (svalue.indexOf(\".\") < 0))\r\n                align = YDigitalDisplay.HrzAlignment.RIGHT;\r\n            switch (align) {\r\n                case YDigitalDisplay.HrzAlignment.LEFT:\r\n                    pos = new YDataRendering.YRectangle(mainViewPort.Lmargin + ((availWidth * this.hrzAlignmentOfset / 100) >> 0), mainViewPort.Tmargin + ((availHeight - size.height) / 2) >> 0, (size.width + 1) >> 0, (size.height + 1) >> 0);\r\n                    g.DrawStringRect(svalue, this.font, this.font.brush, pos, stringFormat);\r\n                    break;\r\n                case YDigitalDisplay.HrzAlignment.CENTER:\r\n                    pos = new YDataRendering.YRectangle(mainViewPort.Lmargin + ((availWidth - size.width) / 2) >> 0, mainViewPort.Tmargin + ((availHeight - size.height) / 2) >> 0, (size.width + 1) >> 0, (size.height + 1) >> 0);\r\n                    g.DrawStringRect(svalue, this.font, this.font.brush, pos, stringFormat);\r\n                    break;\r\n                case YDigitalDisplay.HrzAlignment.DECIMAL:\r\n                    let left = \"\";\r\n                    let p = svalue.lastIndexOf(',');\r\n                    if (p < 0)\r\n                        p = svalue.lastIndexOf('.');\r\n                    if (p >= 0) {\r\n                        left = svalue.substring(0, p + 1);\r\n                    }\r\n                    else {\r\n                        p = 0;\r\n                        while ((p < svalue.length) && ((svalue[p] >= '0' && svalue[p] <= '9') || (svalue[p] == '-') || (svalue[p] == '\\'') || (svalue[p] == ' '))) {\r\n                            p++;\r\n                        }\r\n                        left = svalue.substring(0, p);\r\n                    }\r\n                    let lsize = g.MeasureStringSF(left, this.font, 10000, stringFormat);\r\n                    pos = new YDataRendering.YRectangle(mainViewPort.Lmargin + (availWidth - lsize.width - availWidth * this.hrzAlignmentOfset / 100) >> 0, mainViewPort.Tmargin + ((availHeight - size.height) / 2) >> 0, (size.width + 1) >> 0, (size.height + 1) >> 0);\r\n                    g.DrawStringRect(svalue, this.font, this.font.brush, pos, stringFormat);\r\n                    break;\r\n                case YDigitalDisplay.HrzAlignment.RIGHT:\r\n                    pos = new YDataRendering.YRectangle(mainViewPort.Lmargin + (availWidth - size.width - availWidth * this.hrzAlignmentOfset / 100) >> 0, mainViewPort.Tmargin + ((availHeight - size.height) / 2) >> 0, (size.width + 1) >> 0, (size.height + 1) >> 0);\r\n                    g.DrawStringRect(svalue, this.font, this.font.brush, pos, stringFormat);\r\n                    break;\r\n            }\r\n        }\r\n        this.drawAnnotationPanels(g, this._annotationPanels, w, h, true, mainViewPort);\r\n        this.DrawMessagePanels(g, w, h);\r\n        return 0;\r\n    }\r\n}\r\n(function (YDigitalDisplay) {\r\n    class HrzAlignmentEnumItem extends YDataRendering.YEnumItem {\r\n        constructor(value, humanreadable, container) {\r\n            super(value, humanreadable, HrzAlignment);\r\n        }\r\n    }\r\n    YDigitalDisplay.HrzAlignmentEnumItem = HrzAlignmentEnumItem;\r\n    class HrzAlignment extends YDataRendering.YEnum {\r\n    }\r\n    HrzAlignment.LEFT = new HrzAlignmentEnumItem(\"LEFT\", \"Left\");\r\n    HrzAlignment.CENTER = new HrzAlignmentEnumItem(\"CENTER\", \"Center\");\r\n    HrzAlignment.DECIMAL = new HrzAlignmentEnumItem(\"DECIMAL\", \"Decimal\");\r\n    HrzAlignment.RIGHT = new HrzAlignmentEnumItem(\"RIGHT\", \"Right\");\r\n    YDigitalDisplay.HrzAlignment = HrzAlignment;\r\n    //export const enum HrzAlignment { LEFT = \"Left\", CENTER = \"Center\", DECIMAL=\"Decimal\", RIGHT =\"Right\"  }\r\n})(YDigitalDisplay || (YDigitalDisplay = {}));\r\n", "/*\r\n*   Yocto-Visualization (for web), a free web-based application\r\n*   to visualize Yoctopuce Sensors.\r\n*\r\n*  Graph widget renderer\r\n*\r\n*   - - - - - - - - - License information: - - - - - - - - -\r\n*\r\n*  Copyright (C) 2021 and beyond by Yoctopuce Sarl, Switzerland.\r\n*\r\n*  Yoctopuce Sarl (hereafter Licensor) grants to you a perpetual\r\n*  non-exclusive license to use, modify, copy and integrate this\r\n*  file into your software for the sole purpose of interfacing\r\n*  with Yoctopuce products.\r\n*\r\n*  You may reproduce and distribute copies of this file in\r\n*  source or object form, as long as the sole purpose of this\r\n*  code is to interface with Yoctopuce products. You must retain\r\n*  this notice in the distributed source file.\r\n*\r\n*  You should refer to Yoctopuce General Terms and Conditions\r\n*  for additional information regarding your rights and\r\n*  obligations.\r\n*\r\n*  THE SOFTWARE AND DOCUMENTATION ARE PROVIDED \"AS IS\" WITHOUT\r\n*  WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING\r\n*  WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, FITNESS\r\n*  FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO\r\n*  EVENT SHALL LICENSOR BE LIABLE FOR ANY INCIDENTAL, SPECIAL,\r\n*  INDIRECT OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA,\r\n*  COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY OR\r\n*  SERVICES, ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT\r\n*  LIMITED TO ANY DEFENSE THEREOF), ANY CLAIMS FOR INDEMNITY OR\r\n*  CONTRIBUTION, OR OTHER SIMILAR COSTS, WHETHER ASSERTED ON THE\r\n*  BASIS OF CONTRACT, TORT (INCLUDING NEGLIGENCE), BREACH OF\r\n*  WARRANTY, OR OTHERWISE.\r\n*/\r\nimport * as YDataRendering from \"./YDataRendererCommon.js\";\r\nexport class pointXY {\r\n    constructor(X, Y) {\r\n        this.x = X === undefined ? 0 : X;\r\n        this.y = Y === undefined ? 0 : Y;\r\n    }\r\n    clone() { return new pointXY(this.x, this.y); }\r\n}\r\nexport class TimeConverterParseResult {\r\n    constructor() {\r\n        this.success = false;\r\n        this.result = 0;\r\n    }\r\n}\r\nclass TimeResolution {\r\n    constructor() {\r\n        this.step = 0;\r\n        this.format = 0;\r\n    }\r\n}\r\nexport class YDate extends Date {\r\n    ToString(format) {\r\n        let res = \"\";\r\n        let ampm = \"\";\r\n        if (format & YDate.D)\r\n            res = res + this.getDate() + \" \";\r\n        if (format & YDate.M)\r\n            res = res + YDate.months[this.getMonth()] + \" \";\r\n        if (format & YDate.YY) {\r\n            let y = this.getFullYear().toString();\r\n            res = res + y.substr(y.length - 2) + \" \";\r\n        }\r\n        else if (format & YDate.YYYY) {\r\n            let y = this.getFullYear().toString();\r\n            res = res + y + \" \";\r\n        }\r\n        if (format & YDate.CR)\r\n            res = res + \"\\n\";\r\n        if (format & YDate.h) {\r\n            if (YDate.use24Hformat) {\r\n                let h = \"0\" + this.getHours().toString();\r\n                res = res + h.substring(h.length - 2);\r\n                if (!(format & YDate.m))\r\n                    res = res + \"H\";\r\n            }\r\n            else {\r\n                let hour = this.getHours();\r\n                ampm = \"AM\";\r\n                if (hour > 11)\r\n                    ampm = \"PM\";\r\n                if (hour > 12)\r\n                    hour = hour - 12;\r\n                if (hour == 0)\r\n                    hour = 12;\r\n                res = res + hour.toString();\r\n            }\r\n        }\r\n        if (format & YDate.m) {\r\n            let m = \"0\" + this.getMinutes().toString();\r\n            res = res + \":\" + m.substring(m.length - 2);\r\n        }\r\n        if (format & YDate.s) {\r\n            let s = \"0\" + this.getSeconds().toString();\r\n            res = res + \":\" + s.substring(s.length - 2);\r\n        }\r\n        if (format & YDate.ms1) {\r\n            let ms = \"00\" + this.getMilliseconds().toString();\r\n            res = res + \".\" + ms.substring(ms.length - 3).substring(1);\r\n        }\r\n        else if (format & YDate.ms01) {\r\n            let ms = \"00\" + this.getMilliseconds().toString();\r\n            res = res + \".\" + ms.substring(ms.length - 3).substring(2);\r\n        }\r\n        else if (format & YDate.ms001) {\r\n            let ms = \"00\" + this.getMilliseconds().toString();\r\n            res = res + \".\" + ms.substring(ms.length - 3).substring(3);\r\n        }\r\n        if ((format & YDate.h) && !YDate.use24Hformat) {\r\n            res = res + ampm;\r\n        }\r\n        return res;\r\n    }\r\n}\r\nYDate.D = 1;\r\nYDate.DD = 2;\r\nYDate.M = 4;\r\nYDate.YY = 8;\r\nYDate.h = 16;\r\nYDate.m = 32;\r\nYDate.s = 64;\r\nYDate.ms1 = 128;\r\nYDate.ms01 = 256;\r\nYDate.ms001 = 512;\r\nYDate.CR = 1024;\r\nYDate.isRelative = 2048;\r\nYDate.YYYY = 4096;\r\nYDate.d = (new Date()).toLocaleTimeString().toUpperCase();\r\nYDate.use24Hformat = (YDate.d.indexOf(\"AM\") < 0) && (YDate.d.indexOf(\"PM\") < 0);\r\nYDate.months = [\"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"];\r\nexport class TimeConverter {\r\n    static UTCNow() { return new YDate(); }\r\n    static ToUnixTime(datetime) { return datetime.getTime() / 1000.0; }\r\n    static FromUnixTime(unixtime) {\r\n        let t = new YDate();\r\n        t.setTime(unixtime * 1000);\r\n        return t;\r\n    }\r\n    static tryParseStringToAbsDateTime(str) {\r\n        let res = new TimeConverterParseResult();\r\n        res.success = false;\r\n        let date = new Date();\r\n        let year = date.getFullYear();\r\n        let month = date.getMonth();\r\n        let day = date.getDate();\r\n        let hours = 0;\r\n        let minutes = 0;\r\n        let seconds = 0;\r\n        str = str.trim();\r\n        while (str.indexOf(\"  \") > 0) {\r\n            str = str.replace(\"  \", \" \");\r\n        }\r\n        let dateFound = false;\r\n        let timeFound = false;\r\n        let it = str.split(\" \");\r\n        if (it.length <= 0)\r\n            return res;\r\n        for (let i = 0; i < (it.length) && (i < 2); i++) {\r\n            if (it[i].indexOf(\"-\") > 0) {\r\n                let tokens = it[i].split(\"-\");\r\n                if (tokens.length == 1) {\r\n                    day = parseInt(tokens[0]);\r\n                }\r\n                else if (tokens.length == 2) {\r\n                    day = parseInt(tokens[1]);\r\n                    month = parseInt(tokens[0]) - 1;\r\n                }\r\n                else {\r\n                    day = parseInt(tokens[2]);\r\n                    month = parseInt(tokens[1]) - 1;\r\n                    year = parseInt(tokens[0]);\r\n                }\r\n                dateFound = true;\r\n            }\r\n            else if (it[i].indexOf(\":\") > 0) {\r\n                let tokens = it[i].split(\":\");\r\n                if (tokens.length == 1) {\r\n                    hours = parseInt(tokens[0]);\r\n                }\r\n                else if (tokens.length == 2) {\r\n                    hours = parseInt(tokens[0]);\r\n                    minutes = parseInt(tokens[1]);\r\n                }\r\n                else {\r\n                    hours = parseInt(tokens[0]);\r\n                    minutes = parseInt(tokens[1]);\r\n                    seconds = parseFloat(tokens[2]);\r\n                }\r\n                timeFound = true;\r\n            }\r\n        }\r\n        if ((!timeFound) && (!dateFound))\r\n            return res;\r\n        if (isNaN(year) || isNaN(month) || isNaN(day) || isNaN(hours) || isNaN(minutes) || isNaN(seconds))\r\n            return res;\r\n        date.setFullYear(year, month, day);\r\n        date.setHours(hours, minutes, seconds >> 0, (1000 * (seconds % 1)) >> 0);\r\n        res.result = date.getTime() / 1000; //- 60*date.getTimezoneOffset();\r\n        res.success = true;\r\n        return res;\r\n    }\r\n    static tryParseStringToSecTimeSpan(st) {\r\n        let res = new TimeConverterParseResult();\r\n        let d = 0;\r\n        st = st.toUpperCase();\r\n        let n = st.indexOf(\"D\");\r\n        if (n > 0) {\r\n            d = parseFloat(st.substring(0, n));\r\n            if (isNaN(d)) {\r\n                return res;\r\n            }\r\n            res.result += +d * 86400;\r\n            if (n == st.length - 1) {\r\n                res.success = true;\r\n                return res;\r\n            }\r\n            st = st.substring(n + 1);\r\n        }\r\n        n = st.indexOf(\"H\");\r\n        if (n > 0) {\r\n            d = parseFloat(st.substring(0, n));\r\n            if (isNaN(d)) {\r\n                return res;\r\n            }\r\n            res.result += d * 3600;\r\n            if (n == st.length - 1) {\r\n                res.success = true;\r\n                return res;\r\n            }\r\n            st = st.substring(n + 1);\r\n        }\r\n        n = st.indexOf(\"M\");\r\n        if (n > 0) {\r\n            d = parseFloat(st.substring(0, n));\r\n            if (isNaN(d)) {\r\n                return res;\r\n            }\r\n            res.result += d * 60;\r\n            if (n == st.length - 1) {\r\n                res.success = true;\r\n                return res;\r\n            }\r\n            st = st.substring(n + 1);\r\n        }\r\n        n = st.indexOf(\"S\");\r\n        if (n < 0)\r\n            n = st.length;\r\n        d = parseFloat(st.substring(0, n));\r\n        if (isNaN(d)) {\r\n            return res;\r\n        }\r\n        res.result += d;\r\n        res.success = true;\r\n        return res;\r\n    }\r\n    //public static  secTimeSpanToString( timespan:number):string\r\n    //  { return TimeConverter.secTimeSpanToString( timespan, 0); }\r\n    static secTimeSpanToString(timespan, resolution) {\r\n        let started = false;\r\n        let res = \"\";\r\n        if (timespan < 0) {\r\n            res = \"-\";\r\n            timespan = -timespan;\r\n        }\r\n        if (timespan >= 86400) {\r\n            let d = (timespan / 86400) >> 0;\r\n            res = res + d.toString() + \"d\";\r\n            timespan -= 86400 * d;\r\n            started = true;\r\n        }\r\n        if (resolution >= 86400)\r\n            return res != \"\" ? res : \"0d\";\r\n        if (timespan >= 3600) {\r\n            let d = ((timespan / 3600) >> 0);\r\n            let ds = d.toString();\r\n            if (started && ds.length == 1)\r\n                ds = \"0\" + ds;\r\n            res = res + ds + \"h\";\r\n            timespan -= 3600 * d;\r\n            started = true;\r\n        }\r\n        if (resolution >= 3600)\r\n            return res != \"\" ? res : \"0h\";\r\n        if (timespan < resolution)\r\n            return res != \"\" ? res : \"0h\";\r\n        if (timespan >= 60) {\r\n            let d = (timespan / 60) >> 0;\r\n            let ds = d.toString();\r\n            if (started && ds.length == 1)\r\n                ds = \"0\" + ds;\r\n            res = res + ds + \"m\";\r\n            timespan -= 60 * d;\r\n            started = true;\r\n        }\r\n        if (resolution >= 60)\r\n            return res != \"\" ? res : \"0m\";\r\n        if (timespan < resolution)\r\n            return res != \"\" ? res : \"0m\";\r\n        timespan = Math.round(timespan * 100) / 100;\r\n        let s;\r\n        if (resolution > 0.1) {\r\n            s = timespan.toFixed(0);\r\n        }\r\n        else if (resolution > 0.01) {\r\n            s = timespan.toFixed(1);\r\n        }\r\n        else if (resolution > 0.001) {\r\n            s = timespan.toFixed(2);\r\n        }\r\n        else {\r\n            s = timespan.toString();\r\n        }\r\n        if (started && timespan < 10)\r\n            s = \"0\" + s;\r\n        res = res + s + \"s\";\r\n        return res;\r\n    }\r\n    static RelativeFormat(dataDeltaTime, viewportDeltaTime, resolution) {\r\n        let ShowSecondsTenth = true;\r\n        let ShowSecondsHundredth = true;\r\n        let ShowSeconds = true;\r\n        let ShowMinutes = false;\r\n        let ShowHours = false;\r\n        let ShowDays = false;\r\n        if (dataDeltaTime <= 0.10) {\r\n            ShowSecondsHundredth = true;\r\n        }\r\n        if (dataDeltaTime <= 1) {\r\n            ShowSecondsTenth = true;\r\n        }\r\n        if ((dataDeltaTime >= 60) || (viewportDeltaTime >= 60)) {\r\n            ShowMinutes = true;\r\n        }\r\n        if ((dataDeltaTime >= 3600) || (viewportDeltaTime >= 3600)) {\r\n            ShowHours = true;\r\n        }\r\n        if ((dataDeltaTime >= 86400) || (viewportDeltaTime >= 86400)) {\r\n            ShowDays = true;\r\n        }\r\n        if (resolution >= .1)\r\n            ShowSecondsHundredth = false;\r\n        if (resolution >= 1)\r\n            ShowSecondsTenth = false;\r\n        if (resolution >= 60)\r\n            ShowSeconds = false;\r\n        if (resolution >= 3600)\r\n            ShowMinutes = false;\r\n        if (resolution >= 86400)\r\n            ShowHours = false;\r\n        let format = 0;\r\n        format |= YDate.isRelative;\r\n        if (ShowSecondsTenth)\r\n            format |= YDate.ms1;\r\n        if (ShowSecondsHundredth)\r\n            format |= YDate.ms01;\r\n        if (ShowSeconds)\r\n            format |= YDate.s;\r\n        if (ShowMinutes)\r\n            format |= YDate.m;\r\n        if (ShowHours)\r\n            format |= YDate.h;\r\n        if (ShowDays)\r\n            format |= YDate.D;\r\n        return format;\r\n    }\r\n    static BestTimeformat(dataDeltaTime, viewportDeltaTime, tref) {\r\n        let res = new TimeResolution();\r\n        let ShowSecondsTenth = true;\r\n        let ShowSecondsHundredth = true;\r\n        let ShowSeconds = true;\r\n        let ShowMinutes = false;\r\n        let ShowHours = false;\r\n        let ShowDays = false;\r\n        let ShowMonths = false;\r\n        let ShowYears = false;\r\n        if (viewportDeltaTime <= 0.10) {\r\n            res.step = 0.01;\r\n        }\r\n        else if (viewportDeltaTime <= 1) {\r\n            res.step = 0.1;\r\n        }\r\n        else if (viewportDeltaTime <= 2) {\r\n            res.step = 0.2;\r\n        }\r\n        else if (viewportDeltaTime <= 5) {\r\n            res.step = 0.5;\r\n        }\r\n        else if (viewportDeltaTime <= 10) {\r\n            res.step = 1;\r\n        }\r\n        else if (viewportDeltaTime <= 20) {\r\n            res.step = 2;\r\n        }\r\n        else if (viewportDeltaTime <= 30) {\r\n            res.step = 3;\r\n        }\r\n        else if (viewportDeltaTime <= 40) {\r\n            res.step = 4;\r\n        }\r\n        else if (viewportDeltaTime <= 60) {\r\n            res.step = 5;\r\n        }\r\n        else if (viewportDeltaTime <= 120) {\r\n            res.step = 10;\r\n        }\r\n        else if (viewportDeltaTime <= 300) {\r\n            res.step = 30;\r\n        }\r\n        else if (viewportDeltaTime <= 900) {\r\n            res.step = 60;\r\n        }\r\n        else if (viewportDeltaTime <= 1800) {\r\n            res.step = 180;\r\n        }\r\n        else if (viewportDeltaTime <= 3600) {\r\n            res.step = 300;\r\n        }\r\n        else if (viewportDeltaTime <= 7200) {\r\n            res.step = 600;\r\n        }\r\n        else if (viewportDeltaTime <= 14000) {\r\n            res.step = 900;\r\n        }\r\n        else if (viewportDeltaTime <= 21600) {\r\n            res.step = 1800;\r\n        }\r\n        else if (viewportDeltaTime <= 43200) {\r\n            res.step = 3600;\r\n        }\r\n        else if (viewportDeltaTime <= 86400) {\r\n            res.step = 7200;\r\n        }\r\n        else if (viewportDeltaTime <= 2 * 86400) {\r\n            res.step = 2 * 7200;\r\n        }\r\n        else if (viewportDeltaTime <= 4 * 86400) {\r\n            res.step = 4 * 7200;\r\n        }\r\n        else if (viewportDeltaTime <= 7 * 86400) {\r\n            res.step = 86400;\r\n        }\r\n        else if (viewportDeltaTime <= 14 * 86400) {\r\n            res.step = 2 * 86400;\r\n        }\r\n        else if (viewportDeltaTime <= 28 * 86400) {\r\n            res.step = 4 * 86400;\r\n        }\r\n        else if (viewportDeltaTime <= 56 * 86400) {\r\n            res.step = 7 * 86400;\r\n        }\r\n        else if (viewportDeltaTime <= 112 * 86400) {\r\n            res.step = 14 * 86400;\r\n        }\r\n        else if (viewportDeltaTime <= 224 * 86400) {\r\n            res.step = 31 * 86400;\r\n        }\r\n        else if (viewportDeltaTime <= 448 * 86400) {\r\n            res.step = 62 * 86400;\r\n        }\r\n        else if (viewportDeltaTime <= 896 * 86400) {\r\n            res.step = 93 * 86400;\r\n        }\r\n        else {\r\n            res.step = 365 * 86400;\r\n        }\r\n        if (tref == TimeConverter.TimeReference.ABSOLUTE) {\r\n            ShowSecondsHundredth = true;\r\n            ShowSecondsTenth = true;\r\n            ShowMinutes = true;\r\n            ShowHours = true;\r\n            ShowDays = dataDeltaTime > 86400;\r\n            ShowMonths = dataDeltaTime > 86400;\r\n            ShowYears = dataDeltaTime > 28 * 6 * 86400;\r\n            if (res.step >= .1)\r\n                ShowSecondsHundredth = false;\r\n            if (res.step >= 1)\r\n                ShowSecondsTenth = false;\r\n            if (res.step >= 60)\r\n                ShowSeconds = false;\r\n            if (res.step >= 3600)\r\n                ShowMinutes = false;\r\n            if (res.step >= 86400)\r\n                ShowHours = false;\r\n            if (res.step >= 31 * 86400)\r\n                ShowDays = false;\r\n            if (res.step >= 365 * 86400)\r\n                ShowMonths = false;\r\n            res.format = 0;\r\n            if (ShowSecondsHundredth)\r\n                res.format |= YDate.ms01;\r\n            if (ShowSecondsTenth)\r\n                res.format |= YDate.ms1;\r\n            if (ShowSeconds)\r\n                res.format |= YDate.s;\r\n            if (ShowMinutes)\r\n                res.format = res.format |= YDate.m;\r\n            if (ShowHours)\r\n                res.format = res.format |= YDate.h;\r\n            if ((res.format != 0) && (ShowDays || ShowMonths))\r\n                res.format |= YDate.CR;\r\n            if (ShowDays)\r\n                res.format |= YDate.D;\r\n            if (ShowMonths)\r\n                res.format |= YDate.M;\r\n            if (ShowYears)\r\n                res.format |= YDate.YY;\r\n            if (res.format == YDate.YY)\r\n                res.format = YDate.YYYY;\r\n            /*\r\n      res.format = \"\";\r\n      if (ShowSecondsHundredth) res.format = \".ff\";\r\n      if (ShowSecondsTenth) res.format = \".f\";\r\n      if (ShowSeconds) res.format = \"ss\" + res.format;\r\n      if (ShowMinutes) res.format = \"mm\" + (res.format == \"\" ? \"\" : \":\") + res.format;\r\n      if (ShowHours) res.format = \"HH\" + (res.format == \"\" ? \"\\\\H\" : \":\") + res.format;\r\n      if ((res.format != \"\") && (ShowDays || ShowMonths)) res.format += \"\\n\";\r\n      if (ShowDays) res.format = res.format + \"d\";\r\n      if (ShowMonths) res.format = res.format + \" MMM\";\r\n      if (ShowYears) res.format = res.format + \" yyyy\";\r\n  */\r\n        }\r\n        else {\r\n            res.format = TimeConverter.RelativeFormat(dataDeltaTime, viewportDeltaTime, res.step);\r\n        }\r\n        return res;\r\n    }\r\n}\r\n(function (TimeConverter) {\r\n    class TimeReferenceEnumItem extends YDataRendering.YEnumItem {\r\n        constructor(value, humanreadable, container) {\r\n            super(value, humanreadable, TimeReference);\r\n        }\r\n    }\r\n    TimeConverter.TimeReferenceEnumItem = TimeReferenceEnumItem;\r\n    // export const enum TimeReference {ABSOLUTE = \"Absolute\", RELATIVE = \"Relative to first data\" }\r\n    class TimeReference extends YDataRendering.YEnum {\r\n    }\r\n    TimeReference.ABSOLUTE = new TimeReferenceEnumItem(\"ABSOLUTE\", \"Absolute\");\r\n    TimeReference.RELATIVE = new TimeReferenceEnumItem(\"RELATIVE\", \"Relative to first data\");\r\n    TimeConverter.TimeReference = TimeReference;\r\n})(TimeConverter || (TimeConverter = {}));\r\nexport class MinMax {\r\n    constructor(minimum, maximum) {\r\n        this.Min = 0;\r\n        this.Max = 0;\r\n        this.Min = minimum;\r\n        this.Max = maximum;\r\n    }\r\n}\r\nexport class MinMaxHandler {\r\n    static extend(M, factor) {\r\n        if (isNaN(M.Min))\r\n            return M;\r\n        let delta = M.Max - M.Min;\r\n        return new MinMax(M.Min - (delta * (factor - 1)) / 2, M.Max + (delta * (factor - 1)) / 2);\r\n    }\r\n    static DefaultValue(value1, value2) {\r\n        if (typeof value2 === \"undefined\") {\r\n            if (typeof value1 === \"undefined\")\r\n                return new MinMax(Number.NaN, Number.NaN);\r\n            return new MinMax(value1, value1);\r\n        }\r\n        if (typeof value1 === \"undefined\")\r\n            return new MinMax(value2, value2);\r\n        if (value2 < value1)\r\n            throw new RangeError(\"MinMax invalid parameters (\" + value1.toString() + \">\" + value2.toString());\r\n        return new MinMax(value1, value2);\r\n    }\r\n    static isDefined(v) {\r\n        return !isNaN(v.Min);\r\n    }\r\n    static Combine(M1, M2) {\r\n        if (isNaN(M1.Min))\r\n            return new MinMax(M2.Min, M2.Max);\r\n        if (isNaN(M2.Min))\r\n            return new MinMax(M1.Min, M1.Max);\r\n        let res = new MinMax(M2.Min, M2.Max);\r\n        if (M1.Min < res.Min)\r\n            res.Min = M1.Min;\r\n        if (M1.Max < res.Min)\r\n            res.Min = M1.Max;\r\n        if (M1.Min > res.Max)\r\n            res.Max = M1.Min;\r\n        if (M1.Max > res.Max)\r\n            res.Max = M1.Max;\r\n        return res;\r\n    }\r\n    static CombineWithNumber(M1, value) {\r\n        if (isNaN(M1.Min))\r\n            return new MinMax(value, value);\r\n        if (value < M1.Min)\r\n            return new MinMax(value, M1.Max);\r\n        if (value > M1.Max)\r\n            return new MinMax(M1.Min, value);\r\n        return new MinMax(M1.Min, M1.Max);\r\n    }\r\n}\r\nexport class DataSegment {\r\n    constructor(p) {\r\n        this.data = [];\r\n        this.count = 0;\r\n        if (p instanceof Array) {\r\n            this.data = new Array(p.length);\r\n            DataSegment.ArrayCopy(p, 0, this.data, 0, p.length);\r\n            this.count = p.length;\r\n        }\r\n        else if (p instanceof pointXY) { /*\r\n       this.data = new Array();\r\n       this.data.push(p);\r\n       this.count =1;\r\n       while (this.data.length <  DataSegment.SegmentGranularity) { this.data.push(new pointXY()); }\r\n       */\r\n            this.data = new Array(DataSegment.SegmentGranularity);\r\n            this.data[0] = p;\r\n            this.count = 1;\r\n        }\r\n        else {\r\n            throw new Error(\"invalid constructor paramter type\");\r\n        }\r\n    }\r\n    static ArrayCopy(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {\r\n        for (let i = 0; i < length; i++) {\r\n            destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i].clone();\r\n        }\r\n    }\r\n    grow() {\r\n        let targetCount = this.data.length + DataSegment.SegmentGranularity;\r\n        while (this.data.length < targetCount) {\r\n            this.data.push(null);\r\n        }\r\n    }\r\n}\r\nDataSegment.SegmentGranularity = 1000;\r\nexport class DataSerie {\r\n    constructor(parent) {\r\n        this.totalPointCount = 0;\r\n        this._userData = null;\r\n        this._yAxisIndex = 0;\r\n        this._pen = null;\r\n        this._legendPen = null;\r\n        this._brush = null;\r\n        this._navigatorpen = null;\r\n        this._visible = true; // whet not visible, series is  not shown but still intervene in Axis auto range calculus\r\n        this._disabled = false; // when series is disabled,rendering acts just like to series does not exists\r\n        this._color = YDataRendering.YColor.Black;\r\n        this._thickness = 1.0;\r\n        this._legend = \"\";\r\n        this._unit = \"\";\r\n        this.segments = [];\r\n        if (parent.yAxes.length <= 0)\r\n            throw new Error(\"Define at least one yAxis\");\r\n        this._timeRange = MinMaxHandler.DefaultValue();\r\n        this._valueRange = MinMaxHandler.DefaultValue();\r\n        this.parent = parent;\r\n    }\r\n    get userData() { return this._userData; }\r\n    set userData(value) { this._userData = value; }\r\n    static get MaxPointsPerSeries() { return DataSerie._MaxPointsPerSeries; }\r\n    static set MaxPointsPerSeries(value) { DataSerie._MaxPointsPerSeries = value; }\r\n    get timeRange() { return this._timeRange; }\r\n    get valueRange() { return this._valueRange; }\r\n    get yAxisIndex() { return this._yAxisIndex; }\r\n    set yAxisIndex(value) {\r\n        if (value >= this.parent.yAxes.length)\r\n            throw new RangeError(\"No such yAxis (\" + value.toString() + \")\");\r\n        this._yAxisIndex = value;\r\n        this.parent.yAxes[this._yAxisIndex].AutoShow();\r\n    }\r\n    get pen() {\r\n        if (this._pen == null) {\r\n            this._pen = new YDataRendering.YPen(this._color, this._thickness);\r\n            this._pen.endCap = 2 /* YDataRendering.YPen.LineCap.Round */;\r\n            this._pen.linejoin = YDataRendering.YPen.LineJoin.Round;\r\n        }\r\n        return this._pen;\r\n    }\r\n    get legendPen() {\r\n        if (this._legendPen == null) {\r\n            this._legendPen = new YDataRendering.YPen(this._color, this._thickness * this.parent.legendPanel.traceWidthFactor);\r\n        }\r\n        return this._legendPen;\r\n    }\r\n    resetlegendPen() { this._legendPen = null; }\r\n    get brush() {\r\n        if (this._brush == null)\r\n            this._brush = new YDataRendering.YSolidBrush(this._color);\r\n        return this._brush;\r\n    }\r\n    get navigatorpen() {\r\n        if (this._navigatorpen == null) {\r\n            this._navigatorpen = new YDataRendering.YPen(YDataRendering.YColor.FromArgb(100, this._color.red, this._color.green, this._color.blue), 1.0);\r\n        }\r\n        return this._navigatorpen;\r\n    }\r\n    get visible() { return this._visible; }\r\n    set visible(value) {\r\n        this._visible = value;\r\n        this.parent.redraw();\r\n    }\r\n    get disabled() { return this._disabled; }\r\n    set disabled(value) {\r\n        this._disabled = value;\r\n        this.parent.redraw();\r\n    }\r\n    get color() { return this._color; }\r\n    set color(value) {\r\n        this._color = value;\r\n        this._pen = null;\r\n        this._legendPen = null;\r\n        this._brush = null;\r\n        this._navigatorpen = null;\r\n        this.parent.redraw();\r\n    }\r\n    get thickness() { return this._thickness; }\r\n    set thickness(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Thickness must be a positive value\");\r\n        this._thickness = value;\r\n        this._pen = null;\r\n        this._legendPen = null;\r\n        this.parent.redraw();\r\n    }\r\n    get legend() { return this._legend; }\r\n    set legend(value) {\r\n        this._legend = value;\r\n        this.parent.redraw();\r\n    }\r\n    get unit() { return this._unit; }\r\n    set unit(value) {\r\n        this._unit = value;\r\n        this.parent.redraw();\r\n    }\r\n    AddNewSegment(p) {\r\n        this.segments.splice(0, 0, new DataSegment(p));\r\n    }\r\n    getlastPoint() {\r\n        if (this.segments.length <= 0) {\r\n            return new pointXY(NaN, NaN);\r\n        }\r\n        return this.segments[this.segments.length - 1].data[this.segments[this.segments.length - 1].count - 1];\r\n    }\r\n    AddPoint(p) {\r\n        this._timeRange = MinMaxHandler.CombineWithNumber(this._timeRange, p.x);\r\n        this._valueRange = MinMaxHandler.CombineWithNumber(this._valueRange, p.y);\r\n        if (this.segments.length <= 0) {\r\n            this.AddNewSegment(p);\r\n            this.totalPointCount++;\r\n            return;\r\n        }\r\n        else if (this.segments[0].count > 1) {\r\n            let delta1 = this.segments[0].data[this.segments[0].count - 1].x - this.segments[0].data[this.segments[0].count - 2].x;\r\n            let delta2 = p.x - this.segments[0].data[this.segments[0].count - 1].x;\r\n            if ((delta2 > 0.1) && ((delta2 < 0) || (delta2 > 2 * delta1))) {\r\n                this.AddNewSegment(p);\r\n                return;\r\n            }\r\n            else if (this.segments[0].count >= this.segments[0].data.length)\r\n                this.segments[0].grow();\r\n        }\r\n        this.segments[0].data[this.segments[0].count] = p;\r\n        this.segments[0].count++;\r\n        this.totalPointCount++;\r\n        if ((DataSerie._MaxPointsPerSeries > 0) && (this.totalPointCount > DataSerie._MaxPointsPerSeries))\r\n            this.dataCleanUp();\r\n        this.parent.adjustGlobalTimeRange(p.x);\r\n        this.parent.redraw();\r\n    }\r\n    dataCleanUp() {\r\n        if (this.segments.length <= 0)\r\n            return;\r\n        let newLimit = ((DataSerie._MaxPointsPerSeries * 90) / 100);\r\n        while (this.segments[this.segments.length - 1].count <= (this.totalPointCount - newLimit)) {\r\n            this.totalPointCount -= this.segments[this.segments.length - 1].count;\r\n            this.segments.splice(this.segments.length - 1, 1);\r\n        }\r\n        if (this.totalPointCount > newLimit) {\r\n            let delta = this.totalPointCount - newLimit;\r\n            let newsize = this.segments[this.segments.length - 1].count - delta;\r\n            let newdata = new Array(newsize);\r\n            DataSegment.ArrayCopy(this.segments[this.segments.length - 1].data, delta, newdata, 0, this.segments[this.segments.length - 1].count - delta);\r\n            this.segments[this.segments.length - 1].data = newdata;\r\n            this.segments[this.segments.length - 1].count -= delta;\r\n            this.totalPointCount -= delta;\r\n        }\r\n        let tmin = this.segments[0].data[0].x;\r\n        let tmax = this.segments[0].data[0].x;\r\n        let ymin = this.segments[0].data[0].y;\r\n        let ymax = this.segments[0].data[0].y;\r\n        for (let i = 0; i < this.segments.length; i++) {\r\n            let count = this.segments[i].count;\r\n            if (tmin > this.segments[i].data[0].x)\r\n                tmin = this.segments[i].data[0].x;\r\n            if (tmax < this.segments[i].data[count - 1].x)\r\n                tmax = this.segments[i].data[count - 1].x;\r\n            for (let j = 0; j < count; j++) {\r\n                if (ymin > this.segments[i].data[j].y)\r\n                    ymin = this.segments[i].data[j].y;\r\n                if (ymax < this.segments[i].data[j].y)\r\n                    ymax = this.segments[i].data[j].y;\r\n            }\r\n        }\r\n        this._timeRange.Min = tmin;\r\n        this._timeRange.Max = tmax;\r\n        this._valueRange.Min = ymin;\r\n        this._valueRange.Max = ymax;\r\n    }\r\n    InsertPoints(points) {\r\n        if (points.length == 0)\r\n            return;\r\n        if (points.length == 1) {\r\n            this._timeRange = MinMaxHandler.CombineWithNumber(this._timeRange, points[0].x);\r\n            this._valueRange = MinMaxHandler.CombineWithNumber(this._valueRange, points[0].y);\r\n            return;\r\n        }\r\n        let FirstStep = points[1].x - points[0].x;\r\n        let LastStep = points[points.length - 1].x - points[points.length - 2].x;\r\n        let InsertAtBegining = -1;\r\n        let InsertAtEnd = -1;\r\n        //int sz = System.Runtime.InteropServices.Marshal.SizeOf(typeof(pointXY));\r\n        // can we merge with one already existing segment ?\r\n        for (let i = 0; i < this.segments.length; i++) {\r\n            if (this.segments[i].count > 1) {\r\n                let DeltaInsertAtBegining = this.segments[i].data[0].x - points[points.length - 1].x;\r\n                let DeltaInsertAtEnd = points[0].x - this.segments[i].data[this.segments[i].count - 1].x;\r\n                if ((DeltaInsertAtBegining > 0) && (DeltaInsertAtBegining < 2 * FirstStep))\r\n                    InsertAtBegining = i;\r\n                if ((DeltaInsertAtEnd > 0) && (DeltaInsertAtEnd < 2 * LastStep))\r\n                    InsertAtEnd = i;\r\n            }\r\n        }\r\n        if (InsertAtBegining >= 0) // insert at the beginning of segments[InsertAtBeginning]\r\n         {\r\n            if (this.segments[InsertAtBegining].count + points.length >= this.segments[InsertAtBegining].data.length)\r\n                this.segments[InsertAtBegining].grow();\r\n            DataSegment.ArrayCopy(this.segments[InsertAtBegining].data, 0, this.segments[InsertAtBegining].data, points.length, this.segments[InsertAtBegining].count);\r\n            DataSegment.ArrayCopy(points, 0, this.segments[InsertAtBegining].data, 0, points.length);\r\n            this.segments[InsertAtBegining].count += points.length;\r\n            this.totalPointCount += points.length;\r\n        }\r\n        else if (InsertAtEnd >= 0) // insert at the end of segments[InsertAtEnd]\r\n         {\r\n            if (this.segments[InsertAtEnd].count + points.length >= this.segments[InsertAtEnd].data.length)\r\n                this.segments[InsertAtEnd].grow();\r\n            DataSegment.ArrayCopy(points, 0, this.segments[InsertAtEnd].data, this.segments[InsertAtEnd].count, points.length);\r\n            this.segments[InsertAtEnd].count += points.length;\r\n            this.totalPointCount += points.length;\r\n        }\r\n        else // create a whole new segment\r\n         {\r\n            this.segments.push(new DataSegment(points));\r\n            this.totalPointCount += points.length;\r\n        }\r\n        this._timeRange = MinMaxHandler.CombineWithNumber(this._timeRange, points[0].x);\r\n        this._timeRange = MinMaxHandler.CombineWithNumber(this._timeRange, points[points.length - 1].x);\r\n        for (let i = 0; i < points.length; i++) {\r\n            this._valueRange = MinMaxHandler.CombineWithNumber(this._valueRange, points[i].y);\r\n        }\r\n        if ((DataSerie._MaxPointsPerSeries > 0) && (this.totalPointCount > DataSerie._MaxPointsPerSeries))\r\n            this.dataCleanUp();\r\n        this.parent.redraw();\r\n    }\r\n    static CompareSegments(a, b) {\r\n        if (a.data[0].x > b.data[0].x)\r\n            return -1;\r\n        if (a.data[0].x < b.data[0].x)\r\n            return 1;\r\n        return 0;\r\n    }\r\n    getData() {\r\n        let res = [];\r\n        this.segments.sort(DataSerie.CompareSegments);\r\n        for (let i = this.segments.length - 1; i >= 0; i--) {\r\n            for (let j = 0; j < this.segments[i].count; j++) {\r\n                res.push(this.segments[i].data[j]);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    findClosestValue(x, AllowInterpolation) {\r\n        let N1 = 0;\r\n        let N2 = 0;\r\n        let Pos = 0;\r\n        if (this.segments.length <= 0)\r\n            return null;\r\n        // check for best match inside segments\r\n        for (let i = 0; i < this.segments.length; i++) {\r\n            if ((x >= this.segments[i].data[0].x) && (x <= this.segments[i].data[this.segments[i].count - 1].x)) {\r\n                let data = this.segments[i].data;\r\n                N1 = 0;\r\n                N2 = this.segments[i].count - 1;\r\n                while (N2 - N1 > 1) {\r\n                    let N = (N1 + N2) >> 1;\r\n                    if (data[N].x > x)\r\n                        N2 = N;\r\n                    else\r\n                        N1 = N;\r\n                }\r\n                Pos = N1 - 1;\r\n                if (Pos < 0)\r\n                    Pos = 0;\r\n                if (!AllowInterpolation) {\r\n                    if (x - data[Pos].x < data[Pos + 1].x - x)\r\n                        return data[Pos];\r\n                    else\r\n                        return data[Pos + 1];\r\n                }\r\n                else {\r\n                    Pos++;\r\n                    if (x == data[Pos].x)\r\n                        return data[Pos];\r\n                    if (x == data[Pos + 1].x)\r\n                        return data[Pos + 1];\r\n                    let p = new pointXY();\r\n                    p.x = x;\r\n                    p.y = data[Pos].y + (data[Pos + 1].y - data[Pos].y) * (x - data[Pos].x) / (data[Pos + 1].x - data[Pos].x);\r\n                    return p;\r\n                }\r\n            }\r\n        }\r\n        if (AllowInterpolation)\r\n            return null;\r\n        // check for best match outside segments\r\n        try {\r\n            this.segments[0].data[0].clone();\r\n        }\r\n        catch (e) {\r\n            debugger;\r\n        }\r\n        let match = this.segments[0].data[0];\r\n        let delta = Math.abs(this.segments[0].data[0].x - x);\r\n        for (let i = 0; i < this.segments.length; i++) {\r\n            let d1 = Math.abs(this.segments[i].data[0].x - x);\r\n            let d2 = Math.abs(this.segments[i].data[this.segments[i].count - 1].x - x);\r\n            if (d1 < delta) {\r\n                match = this.segments[i].data[0];\r\n                delta = d1;\r\n            }\r\n            if (d2 < delta) {\r\n                match = this.segments[i].data[this.segments[i].count - 1];\r\n                delta = d2;\r\n            }\r\n        }\r\n        return match.clone();\r\n    }\r\n    clear() {\r\n        this.segments = [];\r\n        this._timeRange = MinMaxHandler.DefaultValue();\r\n        this._valueRange = MinMaxHandler.DefaultValue();\r\n        this.parent.clearCachedObjects();\r\n        this.totalPointCount = 0;\r\n    }\r\n}\r\nDataSerie._MaxPointsPerSeries = 0;\r\nexport class DataTracker {\r\n    constructor(parent, directParent) {\r\n        this._userData = null;\r\n        this._enabled = false;\r\n        this._showSerieName = false;\r\n        this._showTimeStamp = false;\r\n        this._dataPrecisionString = \"\";\r\n        this._dataPrecision = DataTracker.DataPrecision.PRECISION_NOLIMIT;\r\n        this._diameter = 5;\r\n        this._handleLength = 25;\r\n        this._detectionDistance = 50;\r\n        this._bgColor = YDataRendering.YColor.FromArgb(200, 255, 255, 255);\r\n        this._borderColor = YDataRendering.YColor.Black;\r\n        this._borderthickness = 1.0;\r\n        this._padding = 10;\r\n        this._verticalMargin = 10;\r\n        this._horizontalMargin = 10;\r\n        this._bgBrush = null;\r\n        this._pen = null;\r\n        this._font = null;\r\n        this._directParent = directParent;\r\n        this._parentRenderer = parent;\r\n        this._font = new YDataRendering.YFont(parent, this, 8, null);\r\n    }\r\n    get directParent() { return this._directParent; }\r\n    get userData() { return this._userData; }\r\n    set userData(value) { this._userData = value; }\r\n    get enabled() { return this._enabled; }\r\n    set enabled(value) {\r\n        this._enabled = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get showSerieName() { return this._showSerieName; }\r\n    set showSerieName(value) {\r\n        this._showSerieName = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get showTimeStamp() { return this._showTimeStamp; }\r\n    set showTimeStamp(value) {\r\n        this._showTimeStamp = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get dataPrecisionString() { return this._dataPrecisionString; }\r\n    get dataPrecision() { return this._dataPrecision; }\r\n    set dataPrecision(value) {\r\n        this._dataPrecision = value;\r\n        this.compute_dataPrecisionString();\r\n        this._parentRenderer.redraw();\r\n    }\r\n    compute_dataPrecisionString() {\r\n        if (this._dataPrecision == DataTracker.DataPrecision.PRECISION_NOLIMIT) {\r\n            this._dataPrecisionString = \"\";\r\n            return;\r\n        }\r\n        this._dataPrecisionString = \"0.\";\r\n        // FIXME\r\n        // for (let i: number = 1; i < this._dataPrecision; i++) this._dataPrecisionString += \"#\";\r\n    }\r\n    get diameter() { return this._diameter; }\r\n    set diameter(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Diameter must be a positive value\");\r\n        this._diameter = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get handleLength() { return this._handleLength; }\r\n    set handleLength(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Hanle length must be a positive value\");\r\n        this._handleLength = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get detectionDistance() { return this._detectionDistance; }\r\n    set detectionDistance(value) {\r\n        if (value <= 0)\r\n            throw new RangeError(\"Distance must be a positive value\");\r\n        this._detectionDistance = value;\r\n    }\r\n    get bgColor() { return this._bgColor; }\r\n    set bgColor(value) {\r\n        this._bgColor = value;\r\n        this._bgBrush = null;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get borderColor() { return this._borderColor; }\r\n    set borderColor(value) {\r\n        this._borderColor = value;\r\n        this._pen = null;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get borderthickness() { return this._borderthickness; }\r\n    set borderthickness(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Thickness must be a positive value\");\r\n        this._borderthickness = value;\r\n        this._pen = null;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get padding() { return this._padding; }\r\n    set padding(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Padding must be a positive value\");\r\n        this._padding = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get verticalMargin() { return this._verticalMargin; }\r\n    set verticalMargin(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Margin must be a positive value\");\r\n        this._verticalMargin = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get horizontalMargin() { return this._horizontalMargin; }\r\n    set horizontalMargin(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Margin must be a positive value\");\r\n        this._horizontalMargin = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get bgBrush() {\r\n        if (this._bgBrush == null) {\r\n            this._bgBrush = new YDataRendering.YSolidBrush(this._bgColor);\r\n        }\r\n        return this._bgBrush;\r\n    }\r\n    get pen() {\r\n        if (this._pen == null)\r\n            this._pen = new YDataRendering.YPen(this._borderColor, this._borderthickness, true);\r\n        return this._pen;\r\n    }\r\n    get font() { return this._font; }\r\n}\r\n(function (DataTracker) {\r\n    class DataPrecisionEnumItem extends YDataRendering.YEnumItem {\r\n        constructor(value, humanreadable, container) {\r\n            super(value, humanreadable, DataPrecision);\r\n        }\r\n    }\r\n    DataTracker.DataPrecisionEnumItem = DataPrecisionEnumItem;\r\n    class DataPrecision extends YDataRendering.YEnum {\r\n    }\r\n    DataPrecision.PRECISION_NOLIMIT = new DataPrecisionEnumItem(\"PRECISION_NOLIMIT\", \"As is\");\r\n    DataPrecision.PRECISION_1 = new DataPrecisionEnumItem(\"PRECISION_1\", \"1\");\r\n    DataPrecision.PRECISION_01 = new DataPrecisionEnumItem(\"PRECISION_01\", \"0.1\");\r\n    DataPrecision.PRECISION_001 = new DataPrecisionEnumItem(\"PRECISION_001\", \"0.01\");\r\n    DataPrecision.PRECISION_0001 = new DataPrecisionEnumItem(\"PRECISION_0001\", \"0.001\");\r\n    DataPrecision.PRECISION_00001 = new DataPrecisionEnumItem(\"PRECISION_00001\", \"0.0001\");\r\n    DataPrecision.PRECISION_000001 = new DataPrecisionEnumItem(\"PRECISION_000001\", \"0.00001\");\r\n    DataPrecision.PRECISION_0000001 = new DataPrecisionEnumItem(\"PRECISION_0000001\", \"0.000001\");\r\n    DataPrecision.PRECISION_00000001 = new DataPrecisionEnumItem(\"PRECISION_00000001\", \"0.0000001\");\r\n    DataPrecision.PRECISION_000000001 = new DataPrecisionEnumItem(\"PRECISION_000000001\", \"0.00000001\");\r\n    DataPrecision.PRECISION_0000000001 = new DataPrecisionEnumItem(\"PRECISION_0000000001\", \"0.000000001\");\r\n    DataTracker.DataPrecision = DataPrecision;\r\n})(DataTracker || (DataTracker = {}));\r\nexport class LegendPanel {\r\n    constructor(parent, directParent) {\r\n        this._userData = null;\r\n        this._traceWidth = 1.0;\r\n        this._enabled = false;\r\n        this._position = LegendPanel.Position.BOTTOM;\r\n        this._overlap = false;\r\n        this._bgColor = YDataRendering.YColor.FromArgb(200, 255, 255, 255);\r\n        this._borderColor = YDataRendering.YColor.Black;\r\n        this._borderthickness = 1.0;\r\n        this._padding = 10;\r\n        this._verticalMargin = 10;\r\n        this._horizontalMargin = 10;\r\n        this._bgBrush = null;\r\n        this._pen = null;\r\n        this._font = null;\r\n        this._directParent = directParent;\r\n        this._parentRenderer = parent;\r\n        this._font = new YDataRendering.YFont(parent, this, 8, null);\r\n    }\r\n    get directParent() { return this._directParent; }\r\n    get userData() { return this._userData; }\r\n    set userData(value) { this._userData = value; }\r\n    get traceWidthFactor() { return this._traceWidth; }\r\n    set traceWidthFactor(value) {\r\n        if (value <= 0)\r\n            throw new RangeError(\"This has to be a strictly positive value\");\r\n        this._traceWidth = value;\r\n        this._parentRenderer.resetlegendPens();\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get enabled() { return this._enabled; }\r\n    set enabled(value) {\r\n        this._enabled = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get position() { return this._position; }\r\n    set position(value) {\r\n        this._position = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get overlap() { return this._overlap; }\r\n    set overlap(value) {\r\n        this._overlap = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get bgColor() { return this._bgColor; }\r\n    set bgColor(value) {\r\n        this._bgColor = value;\r\n        this._bgBrush = null;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get borderColor() { return this._borderColor; }\r\n    set borderColor(value) {\r\n        this._borderColor = value;\r\n        this._pen = null;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get borderthickness() { return this._borderthickness; }\r\n    set borderthickness(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Thickness must be a positive value\");\r\n        this._borderthickness = value;\r\n        this._pen = null;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get padding() { return this._padding; }\r\n    set padding(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Padding must be a positive value\");\r\n        this._padding = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get verticalMargin() { return this._verticalMargin; }\r\n    set verticalMargin(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Margin must be a positive value\");\r\n        this._verticalMargin = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get horizontalMargin() { return this._horizontalMargin; }\r\n    set horizontalMargin(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Margin must be a positive value\");\r\n        this._horizontalMargin = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get bgBrush() {\r\n        if (this._bgBrush == null) {\r\n            this._bgBrush = new YDataRendering.YSolidBrush(this._bgColor);\r\n        }\r\n        return this._bgBrush;\r\n    }\r\n    get pen() {\r\n        if (this._pen == null)\r\n            this._pen = new YDataRendering.YPen(this._borderColor, this._borderthickness, true);\r\n        return this._pen;\r\n    }\r\n    get font() { return this._font; }\r\n}\r\n(function (LegendPanel) {\r\n    class PositionEnumItem extends YDataRendering.YEnumItem {\r\n        constructor(value, humanreadable, container) {\r\n            super(value, humanreadable, Position);\r\n        }\r\n    }\r\n    LegendPanel.PositionEnumItem = PositionEnumItem;\r\n    class Position extends YDataRendering.YEnum {\r\n    }\r\n    Position.LEFT = new PositionEnumItem(\"LEFT\", \"Left\");\r\n    Position.TOPLEFT = new PositionEnumItem(\"TOPLEFT\", \"Top-Left\");\r\n    Position.TOP = new PositionEnumItem(\"TOP\", \"Top\");\r\n    Position.TOPRIGHT = new PositionEnumItem(\"TOPRIGHT\", \"Top-Right\");\r\n    Position.RIGHT = new PositionEnumItem(\"RIGHT\", \"Right\");\r\n    Position.BOTTOMRIGHT = new PositionEnumItem(\"BOTTOMRIGHT\", \"Bottom-Right\");\r\n    Position.BOTTOM = new PositionEnumItem(\"BOTTOM\", \"Bottom\");\r\n    Position.BOTTOMLEFT = new PositionEnumItem(\"BOTTOMLEFT\", \"Bottom-Left\");\r\n    LegendPanel.Position = Position;\r\n})(LegendPanel || (LegendPanel = {}));\r\nexport class Navigator {\r\n    constructor(parent, directParent) {\r\n        this._userData = null;\r\n        this._viewport = new YDataRendering.ViewPortSettings();\r\n        this.Xrange = null;\r\n        this._showXAxisZones = true;\r\n        this._relativeheight = 10;\r\n        this._enabled = false;\r\n        this._bgColor1 = YDataRendering.YColor.FromArgb(255, 225, 225, 225);\r\n        this._cursorBorderColor = YDataRendering.YColor.FromArgb(255, 40, 40, 40);\r\n        this._yAxisHandling = Navigator.YAxisHandling.AUTO;\r\n        this._bgColor2 = YDataRendering.YColor.FromArgb(255, 225, 225, 225);\r\n        this._cursorColor = YDataRendering.YColor.FromArgb(100, 0, 255, 0);\r\n        this._cursorBrush = null;\r\n        this._pen = null;\r\n        this._cursorBorderPen = null;\r\n        this._xAxisColor = YDataRendering.YColor.Black;\r\n        this._xAxisThickness = 1.0;\r\n        this._borderPen = null;\r\n        this._borderColor = YDataRendering.YColor.DimGray;\r\n        this._borderThickness = 1.0;\r\n        this._bgBrush = null;\r\n        this._font = null;\r\n        this._directParent = directParent;\r\n        this._parentRenderer = parent;\r\n        this._font = new YDataRendering.YFont(parent, this, 8, null);\r\n    }\r\n    get directParent() { return this._directParent; }\r\n    get userData() { return this._userData; }\r\n    set userData(value) { this._userData = value; }\r\n    get showXAxisZones() { return this._showXAxisZones; }\r\n    set showXAxisZones(value) { this._showXAxisZones = value; }\r\n    get relativeheight() { return this._relativeheight; }\r\n    set relativeheight(value) {\r\n        if (value < 10)\r\n            value = 10;\r\n        if (value > 50)\r\n            value = 50;\r\n        this._relativeheight = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get enabled() { return this._enabled; }\r\n    set enabled(value) {\r\n        this._enabled = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get bgColor1() { return this._bgColor1; }\r\n    set bgColor1(value) {\r\n        this._bgColor1 = value;\r\n        this._bgBrush = null;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get cursorBorderColor() { return this._cursorBorderColor; }\r\n    set cursorBorderColor(value) {\r\n        this._cursorBorderColor = value;\r\n        this._cursorBorderPen = null;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get yAxisHandling() { return this._yAxisHandling; }\r\n    set yAxisHandling(value) {\r\n        this._yAxisHandling = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get bgColor2() { return this._bgColor2; }\r\n    set bgColor2(value) {\r\n        this._bgColor2 = value;\r\n        this._bgBrush = null;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get cursorColor() { return this._cursorColor; }\r\n    set cursorColor(value) {\r\n        this._cursorColor = value;\r\n        this._cursorBrush = null;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get cursorBrush() {\r\n        if (this._cursorBrush == null) {\r\n            this._cursorBrush = new YDataRendering.YSolidBrush(this._cursorColor);\r\n        }\r\n        return this._cursorBrush;\r\n    }\r\n    get pen() {\r\n        if (this._pen == null)\r\n            this._pen = new YDataRendering.YPen(this._xAxisColor, this._xAxisThickness, true);\r\n        return this._pen;\r\n    }\r\n    get cursorBorderPen() {\r\n        if (this._cursorBorderPen == null)\r\n            this._cursorBorderPen = new YDataRendering.YPen(this._cursorBorderColor, 1, true);\r\n        return this._cursorBorderPen;\r\n    }\r\n    get xAxisColor() { return this._xAxisColor; }\r\n    set xAxisColor(value) {\r\n        this._xAxisColor = value;\r\n        this._pen = null;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get xAxisThickness() { return this._xAxisThickness; }\r\n    set xAxisThickness(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Thickness must be a positive value\");\r\n        this._xAxisThickness = value;\r\n        this._pen = null;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get borderPen() {\r\n        if (this._borderPen == null)\r\n            this._borderPen = new YDataRendering.YPen(this._borderColor, this._borderThickness, true);\r\n        return this._borderPen;\r\n    }\r\n    get borderColor() { return this._borderColor; }\r\n    set borderColor(value) {\r\n        this._borderColor = value;\r\n        this._borderPen = null;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get borderThickness() { return this._borderThickness; }\r\n    set borderThickness(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Thickness must be a positive value\");\r\n        this._borderThickness = value;\r\n        this._borderPen = null;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    setPosition(ParentWidth, ParentHeight, Lmargin, Rmargin, Tmargin, Bmargin) {\r\n        if ((this._viewport.Lmargin != Lmargin) || (this._viewport.Rmargin != Rmargin)\r\n            || (this._viewport.Tmargin != Tmargin) || (this._viewport.Bmargin != Bmargin)) {\r\n            this._bgBrush = null;\r\n        }\r\n        this._viewport.Lmargin = Lmargin;\r\n        this._viewport.Rmargin = Rmargin;\r\n        this._viewport.Bmargin = Bmargin;\r\n        this._viewport.Tmargin = Tmargin;\r\n        this._viewport.Width = ParentWidth;\r\n        this._viewport.Height = ParentHeight;\r\n    }\r\n    setIRLPosition(IRLx, IRLy, xZoom, yZoom) {\r\n        this._viewport.IRLx = IRLx;\r\n        this._viewport.IRLy = IRLy;\r\n        this._viewport.zoomx = xZoom;\r\n        this._viewport.zoomy = yZoom;\r\n    }\r\n    startCapture(IRLStartPoint, xAxisMin, xAxisMax) {\r\n        this._viewport.OriginalXAxisMin = xAxisMin;\r\n        this._viewport.OriginalXAxisMax = xAxisMax;\r\n        this._viewport.OriginalIRLx = this._viewport.IRLx;\r\n        this._viewport.OriginalLmargin = this._viewport.Lmargin;\r\n        this._viewport.OriginalZoomx = this._viewport.zoomx;\r\n        this._viewport.IRLCaptureStartX = IRLStartPoint.x;\r\n        this._viewport.Capture = true;\r\n    }\r\n    get Capture() { return this._viewport.Capture; }\r\n    stopCapture() { this._viewport.Capture = false; }\r\n    get viewport() { return this._viewport; }\r\n    get bgBrush() {\r\n        if (this._bgBrush == null) {\r\n            this._bgBrush = new YDataRendering.YLinearGradientBrush(this._bgColor1, this._bgColor2);\r\n        }\r\n        return this._bgBrush;\r\n    }\r\n    get font() { return this._font; }\r\n}\r\n(function (Navigator) {\r\n    class YAxisHandlingEnumItem extends YDataRendering.YEnumItem {\r\n        constructor(value, humanreadable, container) {\r\n            super(value, humanreadable, YAxisHandling);\r\n        }\r\n    }\r\n    Navigator.YAxisHandlingEnumItem = YAxisHandlingEnumItem;\r\n    class YAxisHandling extends YDataRendering.YEnum {\r\n    }\r\n    YAxisHandling.AUTO = new YAxisHandlingEnumItem(\"AUTO\", \"Automatic\");\r\n    YAxisHandling.INHERIT = new YAxisHandlingEnumItem(\"INHERIT\", \"Inherit from main view\");\r\n    Navigator.YAxisHandling = YAxisHandling;\r\n})(Navigator || (Navigator = {}));\r\nexport class Marker {\r\n    constructor(parent, directParent) {\r\n        this._userData = null;\r\n        this._stringFormat = null;\r\n        this._MarkerTextCallback = null;\r\n        this._enabled = false;\r\n        this._xposition = 0.0;\r\n        this._xpositionIsRelative = false;\r\n        this._yposition = 92.0;\r\n        this._text = \"Marker\";\r\n        this._textAlign = Marker.TextAlign.CENTER;\r\n        this._bgColor = YDataRendering.YColor.FromArgb(255, 255, 255, 192);\r\n        this._borderColor = YDataRendering.YColor.DarkRed;\r\n        this._borderthickness = 1;\r\n        this._arrowSize = 5;\r\n        this._padding = 5;\r\n        this._verticalMargin = 5;\r\n        this._horizontalMargin = 5;\r\n        this._bgBrush = null;\r\n        this._arrowBrush = null;\r\n        this._pen = null;\r\n        this._navigatorpen = null;\r\n        this._font = null;\r\n        this._directParent = directParent;\r\n        this._parentRenderer = parent;\r\n        this._font = new YDataRendering.YFont(parent, this, 8, null);\r\n    }\r\n    get userData() { return this._userData; }\r\n    set userData(value) { this._userData = value; }\r\n    static _round100(v) { return Math.round(100 * v) / 100; }\r\n    get stringFormat() {\r\n        if (this._stringFormat != null)\r\n            return this._stringFormat;\r\n        this._stringFormat = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\r\n        this._stringFormat.LineAlignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\r\n        switch (this._textAlign) {\r\n            case Marker.TextAlign.LEFT:\r\n                this._stringFormat.Alignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\r\n                break;\r\n            case Marker.TextAlign.CENTER:\r\n                this._stringFormat.Alignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\r\n                break;\r\n            case Marker.TextAlign.RIGHT:\r\n                this._stringFormat.Alignment = 2 /* YDataRendering.YStringFormat.StringAlignment.Far */;\r\n                break;\r\n        }\r\n        return this._stringFormat;\r\n    }\r\n    get PatchTextCallback() { return this._MarkerTextCallback; }\r\n    set PatchTextCallback(callback) { this._MarkerTextCallback = callback; }\r\n    get directParent() { return this._directParent; }\r\n    startCapture() {\r\n        this._parentRenderer.startMarkerCapture(this);\r\n    }\r\n    setCapturedPosition(position, axis) {\r\n        this.enabled = true;\r\n        this._xpositionIsRelative = (axis.timeReference == TimeConverter.TimeReference.RELATIVE) && axis.zeroTime > 0;\r\n        this._xposition = Marker._round100(this._xpositionIsRelative ? position - axis.zeroTime : position);\r\n        this._parentRenderer.clearCachedObjects();\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get enabled() { return this._enabled; }\r\n    set enabled(value) {\r\n        if (this._enabled != value) {\r\n            this._enabled = value;\r\n            this._parentRenderer.clearCachedObjects();\r\n            this._parentRenderer.redraw();\r\n        }\r\n    }\r\n    get xposition() { return this._xposition; }\r\n    set xposition(value) {\r\n        this._xposition = Marker._round100(value);\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get timereference() { return this._xpositionIsRelative ? TimeConverter.TimeReference.RELATIVE : TimeConverter.TimeReference.ABSOLUTE; }\r\n    set timereference(value) {\r\n        let v = value == TimeConverter.TimeReference.RELATIVE;\r\n        if (this._xpositionIsRelative != v) {\r\n            let ZeroPosition = this._directParent.zeroTime;\r\n            if (isNaN(ZeroPosition))\r\n                ZeroPosition = 0;\r\n            if (v) {\r\n                this._xpositionIsRelative = true;\r\n                this._xposition -= ZeroPosition;\r\n            }\r\n            else {\r\n                this._xpositionIsRelative = false;\r\n                this._xposition += ZeroPosition;\r\n            }\r\n            this._xposition = Marker._round100(this._xposition);\r\n            this._parentRenderer.redraw();\r\n        }\r\n    }\r\n    // a special variant which also to get/set both xposition and xpositionIsRelative at the same time\r\n    // and allow to start position capture as well.\r\n    get positionOnXAxis() { return new xAxisPosition(this._xposition, this._xpositionIsRelative); }\r\n    set positionOnXAxis(value) {\r\n        if (value.capture) {\r\n            this.startCapture();\r\n        }\r\n        else {\r\n            let v = Marker._round100(value.value);\r\n            if ((this._xpositionIsRelative != value.relative) || (this._xposition != v)) {\r\n                this._xposition = v;\r\n                this._xpositionIsRelative = value.relative;\r\n                if (this._enabled)\r\n                    this._parentRenderer.redraw();\r\n            }\r\n        }\r\n    }\r\n    get yposition() { return this._yposition; }\r\n    set yposition(value) {\r\n        this._yposition = Math.min(100, Math.max(0, value));\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get text() { return this._text; }\r\n    set text(value) {\r\n        this._text = value;\r\n        this._parentRenderer.clearCachedObjects();\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get textAlign() { return this._textAlign; }\r\n    set textAlign(value) {\r\n        this._textAlign = value;\r\n        this._stringFormat = null;\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get shortText() {\r\n        if (this._text.length <= 20)\r\n            return this._text;\r\n        return this._text.substring(0, 18) + \"..\";\r\n    }\r\n    get bgColor() { return this._bgColor; }\r\n    set bgColor(value) {\r\n        this._bgColor = value;\r\n        this._bgBrush = null;\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get borderColor() { return this._borderColor; }\r\n    set borderColor(value) {\r\n        this._borderColor = value;\r\n        this._arrowBrush = null;\r\n        this._pen = null;\r\n        this._navigatorpen = null;\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get borderthickness() { return this._borderthickness; }\r\n    set borderthickness(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"thickness must be a positive value\");\r\n        this._borderthickness = value;\r\n        this._parentRenderer.clearCachedObjects();\r\n        this._pen = null;\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get arrowSize() { return this._arrowSize; }\r\n    set arrowSize(value) {\r\n        this._arrowSize = value;\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get padding() { return this._padding; }\r\n    set padding(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Padding must be a positive value\");\r\n        this._padding = value;\r\n        this._parentRenderer.clearCachedObjects();\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get verticalMargin() { return this._verticalMargin; }\r\n    set verticalMargin(value) {\r\n        this._verticalMargin = value;\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get horizontalMargin() { return this._horizontalMargin; }\r\n    set horizontalMargin(value) {\r\n        this._horizontalMargin = value;\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get bgBrush() {\r\n        if (this._bgBrush == null) {\r\n            this._bgBrush = new YDataRendering.YSolidBrush(this._bgColor);\r\n        }\r\n        return this._bgBrush;\r\n    }\r\n    get arrowBrush() {\r\n        if (this._arrowBrush == null) {\r\n            this._arrowBrush = new YDataRendering.YSolidBrush(this._borderColor, true);\r\n        }\r\n        return this._arrowBrush;\r\n    }\r\n    get pen() {\r\n        if (this._pen == null)\r\n            this._pen = new YDataRendering.YPen(this._borderColor, this._borderthickness, true);\r\n        return this._pen;\r\n    }\r\n    get navigatorpen() {\r\n        if (this._navigatorpen == null)\r\n            this._navigatorpen = new YDataRendering.YPen(this._borderColor, 1.0);\r\n        return this._navigatorpen;\r\n    }\r\n    get font() { return this._font; }\r\n}\r\n(function (Marker) {\r\n    /* export enum TextAlign\r\n  {\r\n    LEFT = \"Left\", CENTER = \"Center\", RIGHT = \"Right\"\r\n  }*/\r\n    class TextAlignEnumItem extends YDataRendering.YEnumItem {\r\n        constructor(value, humanreadable, container) {\r\n            super(value, humanreadable, TextAlign);\r\n        }\r\n    }\r\n    Marker.TextAlignEnumItem = TextAlignEnumItem;\r\n    class TextAlign extends YDataRendering.YEnum {\r\n    }\r\n    TextAlign.LEFT = new TextAlignEnumItem(\"LEFT\", \"Left\");\r\n    TextAlign.CENTER = new TextAlignEnumItem(\"CENTER\", \"Center\");\r\n    TextAlign.RIGHT = new TextAlignEnumItem(\"RIGHT\", \"Right\");\r\n    Marker.TextAlign = TextAlign;\r\n})(Marker || (Marker = {}));\r\nexport class Legend {\r\n    constructor(parent, directParent) {\r\n        this._userData = null;\r\n        this._title = \"\";\r\n        this._font = null;\r\n        this._directParent = directParent;\r\n        this._parentRenderer = parent;\r\n        this._font = new YDataRendering.YFont(parent, this, 12, null);\r\n    }\r\n    get directParent() { return this._directParent; }\r\n    get userData() { return this._userData; }\r\n    set userData(value) { this._userData = value; }\r\n    get title() { return this._title; }\r\n    set title(value) {\r\n        this._title = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get font() { return this._font; }\r\n}\r\nexport class GenericAxis {\r\n    constructor(parent, directParent) {\r\n        this._userData = null;\r\n        this._AxisChanged = null;\r\n        this._pen = null;\r\n        this._gridPen = null;\r\n        this._visible = true;\r\n        this._AllowAutoShow = false;\r\n        this._min = Number.NaN;\r\n        this._max = Number.NaN;\r\n        this._step = Number.NaN;\r\n        this._thickness = 1.0;\r\n        this._color = YDataRendering.YColor.Black;\r\n        this._showGrid = false;\r\n        this._gridColor = YDataRendering.YColor.FromArgb(50, 0, 0, 0);\r\n        this._gridThickness = 1.0;\r\n        this._font = null;\r\n        this._zones = [];\r\n        this._directParent = directParent;\r\n        this._parentRenderer = parent;\r\n        this._legend = new Legend(parent, this);\r\n        this._font = new YDataRendering.YFont(parent, this);\r\n    }\r\n    get directParent() { return this._directParent; }\r\n    get zones() { return this._zones; }\r\n    AddZone() {\r\n        let z = new YDataRendering.Zone(this._parentRenderer, this);\r\n        this._zones.push(z);\r\n        return z;\r\n    }\r\n    get userData() { return this._userData; }\r\n    set userData(value) { this._userData = value; }\r\n    get AxisChanged() { return this._AxisChanged; }\r\n    set AxisChanged(value) { this._AxisChanged = value; }\r\n    get pen() {\r\n        if (this._pen == null)\r\n            this._pen = new YDataRendering.YPen(this._color, this._thickness, true);\r\n        return this._pen;\r\n    }\r\n    get gridPen() {\r\n        if (this._gridPen == null)\r\n            this._gridPen = new YDataRendering.YPen(this._gridColor, this._gridThickness, true);\r\n        return this._gridPen;\r\n    }\r\n    get visible() { return this._visible; }\r\n    set visible(value) {\r\n        this._visible = value;\r\n        if (!value) {\r\n            this._AllowAutoShow = false;\r\n        }\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get AllowAutoShow() { return this._AllowAutoShow; }\r\n    set AllowAutoShow(value) { this._AllowAutoShow = value; }\r\n    AutoShow() {\r\n        if (this._AllowAutoShow) {\r\n            this.visible = true;\r\n            if (this._AxisChanged != null)\r\n                this._AxisChanged(this);\r\n        }\r\n    }\r\n    set_minMax(value_min, value_max) {\r\n        if (!isNaN(value_min) && !isNaN(value_max) && (value_min >= value_max)) {\r\n            throw new RangeError(\"Min (\" + value_min.toString() + \") cannot be greater than max (\" + value_max.toString() + \")\");\r\n        }\r\n        this._min = value_min;\r\n        this._max = value_max;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get min() { return this._min; }\r\n    set min(value) {\r\n        if (!isNaN(value) && !isNaN(this._max) && !YDataRendering.YDataRenderer.minMaxCheckDisabled) {\r\n            if (value >= this._max) {\r\n                throw new RangeError(\"Min cannot be greater than max (\" + this._max.toString() + \")\");\r\n            }\r\n        }\r\n        this._min = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    setMinMax(min, max) {\r\n        if (min < max) {\r\n            this._min = min;\r\n            this._max = max;\r\n            this._parentRenderer.redraw();\r\n        }\r\n    }\r\n    get max() { return this._max; }\r\n    set max(value) {\r\n        if (!isNaN(value) && !isNaN(this._min) && !YDataRendering.YDataRenderer.minMaxCheckDisabled) {\r\n            if (value <= this._min)\r\n                throw new RangeError(\"Max cannot be less than min (\" + this._min.toString() + \")\");\r\n        }\r\n        this._max = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get step() { return this._step; }\r\n    set step(value) {\r\n        if (!isNaN(value) && (value < 0))\r\n            throw new RangeError(\"Steps must be a strictely positive value\");\r\n        this._step = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get thickness() { return this._thickness; }\r\n    set thickness(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Thickness must be a positive value\");\r\n        this._thickness = value;\r\n        this._pen = null;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get color() { return this._color; }\r\n    set color(value) {\r\n        this._color = value;\r\n        this._pen = null;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get showGrid() { return this._showGrid; }\r\n    set showGrid(value) {\r\n        this._showGrid = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get gridColor() { return this._gridColor; }\r\n    set gridColor(value) {\r\n        this._gridColor = value;\r\n        this._gridPen = null;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get gridThickness() { return this._gridThickness; }\r\n    set gridThickness(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Thickness must be a positive value\");\r\n        this._gridThickness = value;\r\n        this._gridPen = null;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get font() { return this._font; }\r\n    get legend() { return this._legend; }\r\n}\r\nexport class StartStopStep {\r\n    constructor() {\r\n        this.dataMin = 0;\r\n        this.dataMax = 0;\r\n        this.absMin = 0;\r\n        this.absMax = 0;\r\n        this.step = 0;\r\n        this.start = 0;\r\n        this.stop = 0;\r\n        this.precision = 0;\r\n    }\r\n}\r\n/*  never used?\r\n\r\npublic class ReadOnlyIndexedProperty<TValue>\r\n{\r\n  readonly List<TValue> ContainerList;\r\n\r\n  public ReadOnlyIndexedProperty(List<TValue> list)\r\n{\r\n  this.ContainerList = list;\r\n}\r\n\r\npublic TValue this[int i]\r\n{\r\n  get\r\n  {\r\n    return ContainerList[i];\r\n  }\r\n}\r\n\r\npublic int Count { get { return ContainerList.Count; } }\r\n}\r\n*/\r\nexport class xAxisPosition {\r\n    constructor(v, rel, capture) {\r\n        this._isRelative = false;\r\n        this._value = 0;\r\n        // a weird way to start the marker position capture\r\n        // through a property change, as Yocto-Visualization\r\n        // editor can only change properties.\r\n        this._capture = false;\r\n        this._isRelative = rel;\r\n        this._value = v;\r\n        this._capture = typeof (capture) == \"undefined\" ? false : capture;\r\n    }\r\n    get relative() { return this._isRelative; }\r\n    set relative(value) { this._isRelative = value; }\r\n    get value() { return this._value; }\r\n    set value(value) { this._value = value; }\r\n    clone() {\r\n        return new xAxisPosition(this._value, this._isRelative, this._capture);\r\n    }\r\n    toString() {\r\n        if (this._isRelative) {\r\n            return TimeConverter.secTimeSpanToString(this._value, 0);\r\n        }\r\n        else { // will need a fix to use this.DTdisplayformat\r\n            let date = TimeConverter.FromUnixTime(this._value);\r\n            let res = date.getFullYear().toString() + \"-\" + (date.getMonth() + 1).toString() + \"-\" + date.getDate().toString()\r\n                + \" \" + date.getHours().toString() + \":\";\r\n            let st = date.getMinutes().toString();\r\n            if (st.length <= 1)\r\n                st = \"0\" + st;\r\n            res = res + st + \":\";\r\n            let s = date.getSeconds();\r\n            let ms = date.getMilliseconds();\r\n            s = s + ms / 1000;\r\n            if (s < 10)\r\n                res = res + \"0\";\r\n            if (ms == 0) {\r\n                res = res + s.toString();\r\n            }\r\n            else {\r\n                res = res + s.toFixed(3);\r\n            }\r\n            return res;\r\n        }\r\n    }\r\n    TryParse(str) {\r\n        if (this._isRelative)\r\n            return TimeConverter.tryParseStringToSecTimeSpan(str);\r\n        return TimeConverter.tryParseStringToAbsDateTime(str);\r\n    }\r\n    get capture() { return this._capture; }\r\n    set capture(value) { this._capture = value; }\r\n}\r\nxAxisPosition.DTdisplayformat = \"DD/MM/YY hh:mm:ss.ff\";\r\nxAxisPosition.TSdisplayformat = \"dd.hh:mm:ss.ff\";\r\nclass YNumberFormatInfo {\r\n    constructor() {\r\n        this.NumberDecimalSeparator = \".\";\r\n    }\r\n}\r\nexport class YAxis extends GenericAxis {\r\n    constructor(parent, directParent, index) {\r\n        super(parent, directParent);\r\n        this._index = 0;\r\n        this._highlightZero = false;\r\n        this._position = YAxis.HrzPosition.LEFT;\r\n        this.innerWidth = 0; // public, really?\r\n        this.zoom = 0;\r\n        this.IRLy = 0;\r\n        this._index = index;\r\n        this.nfi = new YNumberFormatInfo();\r\n        this.nfi.NumberDecimalSeparator = \".\";\r\n        this.startStopStep = new StartStopStep();\r\n        this.startStopStep.start = 0;\r\n        this.startStopStep.stop = 1;\r\n        this.startStopStep.step = .1;\r\n    }\r\n    get index() { return this._index; }\r\n    lockMinMax() {\r\n        this._min = this.startStopStep.absMin;\r\n        this._max = this.startStopStep.absMax;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    unlockMinMax() {\r\n        this._min = Number.NaN;\r\n        this._max = Number.NaN;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get highlightZero() { return this._highlightZero; }\r\n    set highlightZero(value) {\r\n        this._highlightZero = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get position() { return this._position; }\r\n    set position(value) {\r\n        this._position = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    computeStartAndStep(M) {\r\n        let res = new StartStopStep();\r\n        let min = this.min;\r\n        let max = this.max;\r\n        res.step = this.step;\r\n        res.precision = 0;\r\n        if (!MinMaxHandler.isDefined(M)) {\r\n            M = MinMaxHandler.DefaultValue();\r\n            M.Min = 0;\r\n            M.Max = 100.0;\r\n        }\r\n        if (isNaN(min))\r\n            min = M.Min;\r\n        if (isNaN(max))\r\n            max = M.Max;\r\n        res.absMax = max;\r\n        res.absMin = min;\r\n        if (min == max) {\r\n            min -= 0.5;\r\n            max += 0.5;\r\n        }\r\n        if (min != 0)\r\n            min -= (max - min) * 0.025;\r\n        if (max != 0)\r\n            max += (max - min) * 0.025;\r\n        res.start = min;\r\n        res.stop = max;\r\n        res.dataMin = min;\r\n        res.dataMax = max;\r\n        let Delta = max - min;\r\n        if (isNaN(res.step)) {\r\n            let MagnitudePwr = Math.log10(Delta);\r\n            if ((MagnitudePwr - Math.floor(MagnitudePwr)) != 0)\r\n                MagnitudePwr = Math.floor(MagnitudePwr) + 1;\r\n            res.precision = (MagnitudePwr - 1) >> 0;\r\n            let Magnitude = Math.pow(10, res.precision);\r\n            let C = Delta / Magnitude;\r\n            if (C <= 2) {\r\n                res.step = (Magnitude / 5);\r\n                res.precision--;\r\n            }\r\n            else if (C <= 5) {\r\n                res.step = (Magnitude / 2);\r\n                res.precision--;\r\n            }\r\n            else {\r\n                res.step = (Magnitude);\r\n            }\r\n            if (isNaN(this.min)) {\r\n                let c = min / res.step;\r\n                if (c - Math.floor(c) != 0)\r\n                    c = (c > 0) ? Math.floor(c) + 1 : Math.floor(c) - 1;\r\n                res.start = res.step * c;\r\n                //     if ((M.Min < 0) && (M.Min - (int)M.Min != 0)) res.start -= res.step;\r\n            }\r\n        }\r\n        else {\r\n            let v = res.step.toString();\r\n            let p = v.indexOf('.');\r\n            if (p >= 0) {\r\n                res.precision = -(v.length - p - 1);\r\n            }\r\n            else {\r\n                res.precision = 0;\r\n            }\r\n        }\r\n        this.startStopStep = res;\r\n        return res;\r\n    }\r\n}\r\n(function (YAxis) {\r\n    // export enum HrzPosition { LEFT = 'Left', RIGHT = 'Right' }\r\n    //\r\n    class HrzPositionEnumItem extends YDataRendering.YEnumItem {\r\n        constructor(value, humanreadable, container) {\r\n            super(value, humanreadable, HrzPosition);\r\n        }\r\n    }\r\n    YAxis.HrzPositionEnumItem = HrzPositionEnumItem;\r\n    class HrzPosition extends YDataRendering.YEnum {\r\n    }\r\n    HrzPosition.LEFT = new HrzPositionEnumItem(\"LEFT\", \"Left\");\r\n    HrzPosition.RIGHT = new HrzPositionEnumItem(\"RIGHT\", \"Right\");\r\n    YAxis.HrzPosition = HrzPosition;\r\n})(YAxis || (YAxis = {}));\r\nexport class XAxis extends GenericAxis {\r\n    constructor(parent, directParent) {\r\n        super(parent, directParent);\r\n        this._position = XAxis.VrtPosition.BOTTOM;\r\n        this._markers = [];\r\n        this._initialZoom = 300;\r\n        this._initialOffset = 0;\r\n        this._format = XAxis.FORMATAUTO;\r\n        this._timeReference = TimeConverter.TimeReference.ABSOLUTE;\r\n        // in case of relative time reference : position of the Zero\r\n        this._zeroTime = 0;\r\n        //  Max timestamp- Min timestamp of all series values\r\n        this._fullSize = 0;\r\n        this.innerHeight = 0;\r\n        this._overflowHandling = XAxis.OverflowHandling.DONOTHING;\r\n        this._parentGraph = parent;\r\n        this._markers = [];\r\n        this.min = TimeConverter.ToUnixTime(TimeConverter.UTCNow());\r\n        this.max = this.min + this.initialZoom;\r\n        this.step = 30;\r\n    }\r\n    get position() { return this._position; }\r\n    set position(value) {\r\n        this._position = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get markers() { return this._markers; }\r\n    AddMarker() {\r\n        let m = new Marker(this._parentGraph, this);\r\n        this._markers.push(m);\r\n        this._parentGraph.clearCachedObjects();\r\n        this._parentGraph.redraw();\r\n        return m;\r\n    }\r\n    get initialZoom() { return this._initialZoom; }\r\n    set initialZoom(value) {\r\n        if (value <= 0)\r\n            throw new RangeError(\"Zoom must be a positive value\");\r\n        this._initialZoom = value;\r\n        this.min = this.min - (this._initialZoom * this._initialOffset / 100);\r\n        this.max = this.min + this.initialZoom;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get initialOffset() { return this._initialOffset; }\r\n    set initialOffset(value) {\r\n        this._initialOffset = value;\r\n        let p = this._parentGraph.getMostRecentPoint();\r\n        if (isNaN(p.x)) {\r\n            this._min = this._min - (this._initialZoom * this._initialOffset / 100);\r\n            this._max = this._min + this._initialZoom;\r\n            this._parentRenderer.redraw();\r\n        }\r\n        else {\r\n            let zoom = this._max - this._min;\r\n            this._min = p.x - (zoom * this._initialOffset / 100);\r\n            this._max = this._min + zoom;\r\n        }\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get labelFormat() { return this._format; }\r\n    set labelFormat(value) {\r\n        this._format = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get timeReference() { return this._timeReference; }\r\n    set timeReference(value) {\r\n        this._timeReference = value;\r\n        this._parentRenderer.redraw();\r\n    }\r\n    get zeroTime() { return this._zeroTime; }\r\n    set zeroTime(value) { this._zeroTime = value; }\r\n    get fullSize() { return this._fullSize; }\r\n    set fullSize(value) { this._fullSize = value; }\r\n    bestFormat(dataTimedelta, viewportTimedelta) {\r\n        return TimeConverter.BestTimeformat(dataTimedelta, viewportTimedelta, this._timeReference);\r\n    }\r\n    get overflowHandling() { return this._overflowHandling; }\r\n    set overflowHandling(value) { this._overflowHandling = value; }\r\n}\r\nXAxis.FORMATAUTO = 0;\r\n(function (XAxis) {\r\n    // export enum VrtPosition {TOP =\"Top\", BOTTOM = 'Bottom' }\r\n    class VrtPositionEnumItem extends YDataRendering.YEnumItem {\r\n        constructor(value, humanreadable, container) {\r\n            super(value, humanreadable, VrtPosition);\r\n        }\r\n    }\r\n    XAxis.VrtPositionEnumItem = VrtPositionEnumItem;\r\n    class VrtPosition extends YDataRendering.YEnum {\r\n    }\r\n    VrtPosition.TOP = new VrtPositionEnumItem(\"TOP\", \"Top\");\r\n    VrtPosition.BOTTOM = new VrtPositionEnumItem(\"BOTTOM\", \"Bottom\");\r\n    XAxis.VrtPosition = VrtPosition;\r\n    class OverflowHandlingEnumItem extends YDataRendering.YEnumItem {\r\n        constructor(value, humanreadable, container) {\r\n            super(value, humanreadable, OverflowHandling);\r\n        }\r\n    }\r\n    XAxis.OverflowHandlingEnumItem = OverflowHandlingEnumItem;\r\n    class OverflowHandling extends YDataRendering.YEnum {\r\n    }\r\n    OverflowHandling.DONOTHING = new OverflowHandlingEnumItem(\"DONOTHING\", \"Do nothing\");\r\n    OverflowHandling.SCROLL = new OverflowHandlingEnumItem(\"SCROLL\", \"Scroll contents\");\r\n    OverflowHandling.CONTRACT = new OverflowHandlingEnumItem(\"CONTRACT\", \"Squeeze contents\");\r\n    XAxis.OverflowHandling = OverflowHandling;\r\n})(XAxis || (XAxis = {}));\r\nexport class DataPanel extends YDataRendering.GenericPanel {\r\n    constructor(parent, directParent) {\r\n        super(parent, directParent);\r\n        this._panelHrzAlign = DataPanel.HorizontalAlign.CENTERED;\r\n        this._panelVrtAlign = DataPanel.VerticalAlign.CENTERED;\r\n        this._horizontalPosition = DataPanel.HorizontalPosition.ABSOLUTEX;\r\n        this._verticalPosition = DataPanel.VerticalPosition.ABSOLUTEY;\r\n        this._AbsoluteXposition = 0;\r\n        this._AbsoluteYposition = 0;\r\n        this._YScaleIndex = 0;\r\n    }\r\n    get panelHrzAlign() { return this._panelHrzAlign; }\r\n    set panelHrzAlign(value) {\r\n        this._panelHrzAlign = value;\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get panelVrtAlign() { return this._panelVrtAlign; }\r\n    set panelVrtAlign(value) {\r\n        this._panelVrtAlign = value;\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get horizontalPosition() { return this._horizontalPosition; }\r\n    set horizontalPosition(value) {\r\n        this._horizontalPosition = value;\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get verticalPosition() { return this._verticalPosition; }\r\n    set verticalPosition(value) {\r\n        this._verticalPosition = value;\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get AbsoluteXposition() { return this._AbsoluteXposition; }\r\n    set AbsoluteXposition(value) {\r\n        this._AbsoluteXposition = value;\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get AbsoluteYposition() { return this._AbsoluteYposition; }\r\n    set AbsoluteYposition(value) {\r\n        this._AbsoluteYposition = value;\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n    get yScaleIndex() { return this._YScaleIndex; }\r\n    set yScaleIndex(value) {\r\n        this._YScaleIndex = value;\r\n        if (this._enabled)\r\n            this._parentRenderer.redraw();\r\n    }\r\n}\r\n(function (DataPanel) {\r\n    class HorizontalAlignEnumItem extends YDataRendering.YEnumItem {\r\n        constructor(value, humanreadable, container) {\r\n            super(value, humanreadable, HorizontalAlign);\r\n        }\r\n    }\r\n    DataPanel.HorizontalAlignEnumItem = HorizontalAlignEnumItem;\r\n    class HorizontalAlign extends YDataRendering.YEnum {\r\n    }\r\n    HorizontalAlign.LEFTOF = new HorizontalAlignEnumItem(\"LEFTOF\", \"Left\");\r\n    HorizontalAlign.CENTERED = new HorizontalAlignEnumItem(\"CENTERED\", \"Center\");\r\n    HorizontalAlign.RIGHTOF = new HorizontalAlignEnumItem(\"RIGHTOF\", \"Right\");\r\n    DataPanel.HorizontalAlign = HorizontalAlign;\r\n    class VerticalAlignEnumItem extends YDataRendering.YEnumItem {\r\n        constructor(value, humanreadable, container) {\r\n            super(value, humanreadable, VerticalAlign);\r\n        }\r\n    }\r\n    DataPanel.VerticalAlignEnumItem = VerticalAlignEnumItem;\r\n    // export  enum VerticalAlign  {ABOVE=\"Top\",CENTERED=\"Center\", BELOW=\"Bottom\"}\r\n    class VerticalAlign extends YDataRendering.YEnum {\r\n    }\r\n    VerticalAlign.ABOVE = new VerticalAlignEnumItem(\"ABOVE\", \"Top\");\r\n    VerticalAlign.CENTERED = new VerticalAlignEnumItem(\"CENTERED\", \"Center\");\r\n    VerticalAlign.BELOW = new VerticalAlignEnumItem(\"BELOW\", \"Bottom\");\r\n    DataPanel.VerticalAlign = VerticalAlign;\r\n    class HorizontalPositionEnumItem extends YDataRendering.YEnumItem {\r\n        constructor(value, humanreadable, container) {\r\n            super(value, humanreadable, HorizontalPosition);\r\n        }\r\n    }\r\n    DataPanel.HorizontalPositionEnumItem = HorizontalPositionEnumItem;\r\n    class HorizontalPosition extends YDataRendering.YEnum {\r\n    }\r\n    HorizontalPosition.LEFTBORDER = new HorizontalPositionEnumItem(\"LEFTBORDER\", \"Left border\");\r\n    HorizontalPosition.ABSOLUTEX = new HorizontalPositionEnumItem(\"ABSOLUTEX\", \"Absolute X position\");\r\n    HorizontalPosition.RIGHTBORDER = new HorizontalPositionEnumItem(\"RIGHTBORDER\", \"Right borde\");\r\n    DataPanel.HorizontalPosition = HorizontalPosition;\r\n    class VerticalPositionEnumItem extends YDataRendering.YEnumItem {\r\n        constructor(value, humanreadable, container) {\r\n            super(value, humanreadable, VerticalPosition);\r\n        }\r\n    }\r\n    DataPanel.VerticalPositionEnumItem = VerticalPositionEnumItem;\r\n    class VerticalPosition extends YDataRendering.YEnum {\r\n    }\r\n    VerticalPosition.TOPBORDER = new VerticalPositionEnumItem(\"TOPBORDER\", \"Top border\");\r\n    VerticalPosition.ABSOLUTEY = new VerticalPositionEnumItem(\"ABSOLUTEY\", \"Absolute Y position\");\r\n    VerticalPosition.BOTTOMBORDER = new VerticalPositionEnumItem(\"BOTTOMBORDER\", \"Bottom border\");\r\n    DataPanel.VerticalPosition = VerticalPosition;\r\n})(DataPanel || (DataPanel = {}));\r\nclass YCursor {\r\n    constructor(pngImageData) { }\r\n    get handle() { return \"crosshair\"; }\r\n}\r\nclass YTimeSpan {\r\n    constructor(value) {\r\n        this._value = 0;\r\n        this._value = value;\r\n    }\r\n    toString(format) {\r\n        let res = \"\";\r\n        let v = Math.abs(this._value / 1000);\r\n        let dec = Math.floor(v);\r\n        let frac = Math.round(1000 * (v - Math.floor(v)));\r\n        if (format & YDate.ms1) {\r\n            let ms = \"00\" + frac.toString();\r\n            res = \".\" + ms.substring(ms.length - 3).substring(0, 1);\r\n        }\r\n        else if (format & YDate.ms01) {\r\n            let ms = \"00\" + frac.toString();\r\n            res = \".\" + ms.substring(ms.length - 3).substring(0, 2);\r\n        }\r\n        else if (format & YDate.ms001) {\r\n            let ms = \"00\" + frac.toString();\r\n            res = \".\" + ms.substring(ms.length - 3).substring(0, 3);\r\n        }\r\n        if (format & YDate.s) {\r\n            let sec = dec % 60;\r\n            let s = \"0\" + sec.toString();\r\n            res = s.substring(s.length - 2) + res + \"s\";\r\n        }\r\n        dec = Math.floor(dec / 60);\r\n        if (format & YDate.m) {\r\n            let min = dec % 60;\r\n            let s = \"0\" + min.toString();\r\n            res = s.substring(s.length - 2) + \"m\" + res;\r\n        }\r\n        dec = Math.floor(dec / 60);\r\n        if (format & YDate.h) {\r\n            let hrs = dec % 24;\r\n            let s = \"0\" + hrs.toString();\r\n            res = s.substring(s.length - 2) + \"h\" + res;\r\n        }\r\n        dec = Math.floor(dec / 24);\r\n        if (format & YDate.D) {\r\n            let s = dec.toString();\r\n            res = s.substring(s.length - 2) + \"d\" + res;\r\n        }\r\n        return res;\r\n    }\r\n}\r\nYTimeSpan.TicksPerSecond = 1000;\r\nexport class YGraph extends YDataRendering.YDataRenderer {\r\n    constructor(ChartContainer, logFunction) {\r\n        super(ChartContainer, logFunction);\r\n        this._markerCaptureStartedCallback = null;\r\n        this._markerCaptureStoppedCallback = null;\r\n        this.lastPointCount = -1;\r\n        this.lastTopMargin = -1;\r\n        this.lastBottomMargin = -1;\r\n        this.navigatorCache = null;\r\n        this.markerCapture = null;\r\n        this._borderPen = null;\r\n        this._borderColor = YDataRendering.YColor.LightGray;\r\n        this._borderThickness = 1.0;\r\n        this._touchStartfct = null;\r\n        this._touchMovefct = null;\r\n        this._touchEndfct = null;\r\n        this._mouseDownfct = null;\r\n        this._mouseMovefct = null;\r\n        this._mouseWheelfct = null;\r\n        this._mouseKeyDownfct = null;\r\n        this.mainViewPort = new YDataRendering.ViewPortSettings();\r\n        this._timeRange = null;\r\n        this._bgBrush = null;\r\n        this._bgColor1 = YDataRendering.YColor.FromArgb(255, 200, 200, 200);\r\n        this._bgColor2 = YDataRendering.YColor.FromArgb(255, 255, 255, 255);\r\n        this._touchStartPinchDistance = -1;\r\n        this._touchStartPinchCenter = new YDataRendering.Point(0, 0);\r\n        this._touchStartPinchZoom = 1;\r\n        this._touchStartPinchIRLx = 0;\r\n        this._touchStartPinchRange = 0;\r\n        this.dataTrackerRefreshtimeout = null;\r\n        YGraph.createCaptureCursor();\r\n        this._xAxis = new XAxis(this, this);\r\n        this._yAxes = [];\r\n        this._series = [];\r\n        this._dataPanels = [];\r\n        this._navigator = new Navigator(this, this);\r\n        this._legendPanel = new LegendPanel(this, this);\r\n        this._dataTracker = new DataTracker(this, this);\r\n        this._touchStartfct = (e) => { this.TouchStart(this.UIContainer, e); };\r\n        this._touchMovefct = (e) => { this.TouchMove(this.UIContainer, e); };\r\n        this._touchEndfct = (e) => { this.TouchEnd(this.UIContainer, e); };\r\n        this._mouseDownfct = (e) => { this.MouseDown(this.UIContainer, e); };\r\n        this._mouseMovefct = (e) => { this.MouseMove(this.UIContainer, e); };\r\n        this._mouseWheelfct = (e) => { this.mouseWheelEvent(this.UIContainer, e); };\r\n        this._mouseKeyDownfct = (e) => { this.KeyDown(this.UIContainer, e); };\r\n        this.UIContainer.addEventListener(\"touchstart\", this._touchStartfct);\r\n        this.UIContainer.addEventListener(\"touchmove\", this._touchMovefct);\r\n        this.UIContainer.addEventListener(\"touchend\", this._touchEndfct);\r\n        this.UIContainer.addEventListener(\"mousedown\", this._mouseDownfct);\r\n        this.UIContainer.addEventListener(\"mousemove\", this._mouseMovefct);\r\n        this.UIContainer.addEventListener(\"wheel\", this._mouseWheelfct);\r\n        this.UIContainer.addEventListener(\"keydown\", this._mouseKeyDownfct);\r\n        this._timeRange = MinMaxHandler.DefaultValue();\r\n        let originalContainerWidth = ChartContainer.width;\r\n        let originalContainerHeight = ChartContainer.height;\r\n        let originalFormWidth = ChartContainer.width;\r\n        let originalFormHeight = ChartContainer.height;\r\n    }\r\n    get legendPanel() { return this._legendPanel; }\r\n    get dataTracker() { return this._dataTracker; }\r\n    get borderColor() { return this._borderColor; }\r\n    set borderColor(value) {\r\n        this._borderColor = value;\r\n        this._borderPen = null;\r\n        this.redraw();\r\n    }\r\n    get borderThickness() { return this._borderThickness; }\r\n    set borderThickness(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"thickness must be a positive value\");\r\n        this._borderThickness = value;\r\n        this._borderPen = null;\r\n        this.redraw();\r\n    }\r\n    static get verticalDragZoomEnabled() { return YGraph._defaultVerticalDragZoomEnabled; }\r\n    static set verticalDragZoomEnabled(value) { YGraph._defaultVerticalDragZoomEnabled = value; }\r\n    static createCaptureCursor() {\r\n        if (YGraph.captureCursor != null)\r\n            return;\r\n        // mouse cursor graphics stored  in a base64 encoded PNG\r\n        // this is just a way to keep the source code monolithic\r\n        // no separate ressources file\r\n        let base64png = \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAALHRFWHRDcmVhdGlvbi\"\r\n            + \"BUaW1lAFRodSAyMCBBdWcgMjAyMCAxMjoxNTo1MCArMDEwMP38NhoAAAAHdElNRQfk\"\r\n            + \"CBQOJAvCrm0ZAAAACXBIWXMAAFxGAABcRgEUlENBAAAABGdBTUEAALGPC / xhBQAA\"\r\n            + \"AmVJREFUeNrtVrFuFDEQHd9eBImAIBFoAgVC0NJQUFDwL / QgRXzAfUz + Iy0pQw\"\r\n            + \"sIJAhCQMQBUS5c2DXv7T5fzN5qs / Fxdw0jPY3ttT3jt54ZmyXIYDDoQXnodWBV /\"\r\n            + \" SRJXZhJbwCXov65pZ + 4zklfBsZRf2EMxOuTjc / igIu0s0UygAvnonWZ0NP4fB\"\r\n            + \"2QkQz6yHvP / i76V4E1jZ / bic4LIuMnND7ZwDl + u4 / me + AnkKPvu + 7r\"\r\n            + \"FMNZBzZ64eRTm5w6sQ8cAcUZexVytOCpOnv7j + QdDD + CHgKjMg80nWpeQrYgd4\"\r\n            + \"A3wHjWPJAqN4BVoLcsB1ZMd25ZDkzkvwNLd6AMQ4XGIuXElKz6SAo3rYpLhsZKyyJm\"\r\n            + \"wu2WTLiF5g / g2NozIY1 / BkacRwaYkZgUPlr7L2EdeAhjLxpqwTOr0vAHOZG37F\"\r\n            + \"PIOO3mfXXG1qEWAGvM + TC6Rydk / KmMv7bmWlD / v95qtaCThGpo1TPsFvp7wB\"\r\n            + \"O0v4nBqWoYvR0yOeLFThHmdH4TcgGQy8i + hkn5V / WbSjGr7e9oD96372LJB1o7\"\r\n            + \"izbPtYHpPw7V / 8u4yvzFkvPTO3MXuMbx8JRPij8svgAcAw / EwCe0f8XGxZYFB6\"\r\n            + \"JQZzl + rHWj1Gf5WZLVTj5py5HbVoXjeF4OuMhYnQHKulW / x6U64CPtbfpVxQu7\"\r\n            + \"CX0PeicMov3cKup5EZmw / KwMFNb8pMtl5G3MhIyHkOX3PPUSMmXzOX7Fqsw35Gu5\"\r\n            + \"NidEwXWr / jnnD + XUFzLARJRaDXnCQ53o0BpSLzcXzQfAK + Cl9EEwXrKTyr1O\"\r\n            + \"WGa3sFnLvPDsn6Tg8P0PrBcSMR2NtfsAAAAASUVORK5CYII =\";\r\n        try {\r\n            YGraph.captureCursor = new YCursor(atob(base64png));\r\n        }\r\n        catch (Exception) {\r\n            console.log(\"Cannot create custom cursor\");\r\n        }\r\n    }\r\n    get dataPanels() { return this._dataPanels; }\r\n    addDataPanel() {\r\n        let p = new DataPanel(this, this);\r\n        this._dataPanels.push(p);\r\n        return p;\r\n    }\r\n    setMarkerCaptureCallbacks(start, stop) {\r\n        this._markerCaptureStartedCallback = start;\r\n        this._markerCaptureStoppedCallback = stop;\r\n    }\r\n    startMarkerCapture(m) {\r\n        if (this._markerCaptureStartedCallback != null)\r\n            this._markerCaptureStartedCallback(m);\r\n        this.markerCapture = m;\r\n        this.UIContainer.focus();\r\n    }\r\n    destroy() {\r\n        if (this._touchStartfct != null)\r\n            this.UIContainer.removeEventListener(\"touchstart\", this._touchStartfct);\r\n        if (this._touchMovefct != null)\r\n            this.UIContainer.removeEventListener(\"touchstart\", this._touchMovefct);\r\n        if (this._touchEndfct != null)\r\n            this.UIContainer.removeEventListener(\"touchstart\", this._touchEndfct);\r\n        if (this._mouseDownfct != null)\r\n            this.UIContainer.removeEventListener(\"mousedown\", this._mouseDownfct);\r\n        if (this._mouseMovefct != null)\r\n            this.UIContainer.removeEventListener(\"mousemove\", this._mouseMovefct);\r\n        if (this._mouseWheelfct != null)\r\n            this.UIContainer.removeEventListener(\"wheel\", this._mouseWheelfct);\r\n        if (this._mouseKeyDownfct != null)\r\n            this.UIContainer.removeEventListener(\"keydown\", this._mouseKeyDownfct);\r\n        super.destroy();\r\n        Object.entries(this).forEach((pair) => { Reflect.set(this, pair[0], null); }); // sets all internal variables to NULL\r\n    }\r\n    getMostRecentPoint() {\r\n        let res = new pointXY(NaN, NaN);\r\n        for (let i = 0; i < this._series.length; i++)\r\n            if (!this.series[i].disabled) {\r\n                let p = this.series[i].getlastPoint();\r\n                if (!isNaN(p.x)) {\r\n                    if (isNaN(res.x))\r\n                        res = p;\r\n                    else if (p.x > res.x)\r\n                        res = p;\r\n                }\r\n            }\r\n        return res;\r\n    }\r\n    adjustGlobalTimeRange(x) {\r\n        let max = this._timeRange.Max;\r\n        this._timeRange = MinMaxHandler.CombineWithNumber(this._timeRange, x);\r\n        if (isNaN(max))\r\n            return;\r\n        let ofset = x - max;\r\n        if (ofset > 0) {\r\n            switch (this._xAxis.overflowHandling) {\r\n                case XAxis.OverflowHandling.SCROLL:\r\n                    if (max > this._xAxis.min + ((this._xAxis.max - this._xAxis.min) * 0.85) && (max <= this._xAxis.max)) {\r\n                        this.DisableRedraw();\r\n                        this._xAxis.set_minMax(this._xAxis.min + ofset, this._xAxis.max + ofset);\r\n                        this.AllowRedraw();\r\n                    }\r\n                    break;\r\n                case XAxis.OverflowHandling.CONTRACT:\r\n                    if (max > this._xAxis.min + ((this._xAxis.max - this._xAxis.min) * 0.95) && (max <= this._xAxis.max)) {\r\n                        this.DisableRedraw();\r\n                        this._xAxis.max += ofset;\r\n                        this.AllowRedraw();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    get bgColor1() { return this._bgColor1; }\r\n    set bgColor1(value) {\r\n        this._bgColor1 = value;\r\n        this._bgBrush = null;\r\n        this.redraw();\r\n    }\r\n    get bgColor2() { return this._bgColor2; }\r\n    set bgColor2(value) {\r\n        this._bgColor2 = value;\r\n        this._bgBrush = null;\r\n        this.redraw();\r\n    }\r\n    get xAxis() { return this._xAxis; }\r\n    get navigator() { return this._navigator; }\r\n    get yAxes() { return this._yAxes; }\r\n    get series() { return this._series; }\r\n    addYAxis() {\r\n        let s = new YAxis(this, this, this._yAxes.length);\r\n        this._yAxes.push(s);\r\n        this.redraw();\r\n        return s;\r\n    }\r\n    addSerie() {\r\n        let s = new DataSerie(this);\r\n        this._series.push(s);\r\n        this.redraw();\r\n        return s;\r\n    }\r\n    clearCachedObjects() {\r\n        this._bgBrush = null;\r\n        this.navigatorCache = null;\r\n    }\r\n    TouchStart(sender, e) {\r\n        if (e.touches.length == 1) {\r\n            this.HandleMouseDown(sender, e.touches[0].pageX, e.touches[0].pageY);\r\n        }\r\n        else if (e.touches.length == 2) {\r\n            e.preventDefault();\r\n            this.HandleEndOfMouseCapture();\r\n            this._touchStartPinchDistance = Math.sqrt(Math.pow(e.touches[1].pageX - e.touches[0].pageX, 2) + Math.pow(e.touches[1].pageY - e.touches[0].pageY, 2));\r\n            this._touchStartPinchCenter = new YDataRendering.Point((e.touches[1].pageX + e.touches[0].pageX) >> 2, (e.touches[1].pageY + e.touches[0].pageY) >> 2);\r\n            this._touchStartPinchZoom = this.mainViewPort.zoomx;\r\n            this._touchStartPinchIRLx = this.mainViewPort.IRLx;\r\n            this._touchStartPinchRange = this._xAxis.max - this._xAxis.min;\r\n        }\r\n    }\r\n    MouseDown(sender, e) {\r\n        if ((e.buttons == 2) && (this.markerCapture != null)) {\r\n            this.markerCapture = null;\r\n            if (this._markerCaptureStoppedCallback != null)\r\n                this._markerCaptureStoppedCallback(null);\r\n        }\r\n        if (e.buttons != 1)\r\n            return;\r\n        this.HandleMouseDown(sender, e.pageX, e.pageY);\r\n    }\r\n    HandleMouseDown(sender, pageX, pageY) {\r\n        let p = this.Scr2ElmMatrix.multiplyByV(YDataRendering.Vector3.FromXYCoord(pageX, pageY)).toPoint();\r\n        let eX = p.X;\r\n        let eY = p.Y;\r\n        if ((eX >= this.mainViewPort.Lmargin)\r\n            && (eX <= this.mainViewPort.Width - this.mainViewPort.Rmargin)\r\n            && (eY >= this.mainViewPort.Tmargin)\r\n            && (eY <= this.mainViewPort.Height - this.mainViewPort.Bmargin)) {\r\n            if (this.markerCapture != null) {\r\n                let p2 = YGraph.ViewPortPointToIRL(this.mainViewPort, new YDataRendering.Point(eX, eY));\r\n                this.markerCapture.setCapturedPosition(p2.x, this.xAxis);\r\n                if (this._markerCaptureStoppedCallback != null)\r\n                    this._markerCaptureStoppedCallback(this.markerCapture);\r\n                this.markerCapture = null;\r\n                return;\r\n            }\r\n            let p = YGraph.ViewPortPointToIRL(this.mainViewPort, new YDataRendering.Point(eX, eY));\r\n            this.mainViewPort.OriginalXAxisMin = this.xAxis.min;\r\n            this.mainViewPort.OriginalXAxisMax = this.xAxis.max;\r\n            this.mainViewPort.OriginalIRLx = this.mainViewPort.IRLx;\r\n            this.mainViewPort.OriginalLmargin = this.mainViewPort.Lmargin;\r\n            this.mainViewPort.OriginalZoomx = this.mainViewPort.zoomx;\r\n            this.mainViewPort.CaptureStartY = eY;\r\n            this.mainViewPort.IRLCaptureStartX = p.x;\r\n            this.mainViewPort.Capture = true;\r\n        }\r\n        else if ((eX >= this._navigator.viewport.Lmargin)\r\n            && (eX <= this._navigator.viewport.Width - this._navigator.viewport.Rmargin)\r\n            && (eY >= this._navigator.viewport.Lmargin)\r\n            && (eY <= this._navigator.viewport.Height - this._navigator.viewport.Bmargin)) {\r\n            let p = YGraph.ViewPortPointToIRL(this._navigator.viewport, new YDataRendering.Point(eX, eY));\r\n            let p2 = YGraph.ViewPortPointToIRL(this.mainViewPort, new YDataRendering.Point(this.mainViewPort.Lmargin, 0));\r\n            let p3 = YGraph.ViewPortPointToIRL(this.mainViewPort, new YDataRendering.Point(this.mainViewPort.Width - this.mainViewPort.Rmargin, 0));\r\n            if ((p.x >= p2.x) && (p.x <= p3.x)) {\r\n                this._navigator.startCapture(p, this._xAxis.min, this._xAxis.max);\r\n                //  log(\"monitor start monitor capture  at \" + _navigator.viewport.IRLCaptureStartX.ToString());\r\n            }\r\n            else {\r\n                this.DisableRedraw();\r\n                let min = p.x - (p3.x - p2.x) / 2;\r\n                let max = min + (p3.x - p2.x);\r\n                this._xAxis.set_minMax(min, max);\r\n                this.AllowRedraw();\r\n                //  log(\"Jump to \" + mainViewPort.IRLx.ToString());\r\n                this.Draw(0);\r\n            }\r\n        }\r\n    }\r\n    TouchMove(sender, e) {\r\n        if (e.touches.length == 1) {\r\n            e.preventDefault();\r\n            this.HandleMouseMove(sender, e.touches[0].pageX, e.touches[0].pageY);\r\n        }\r\n        else if (e.touches.length == 2) {\r\n            e.preventDefault();\r\n            let newdistance = Math.sqrt(Math.pow(e.touches[1].pageX - e.touches[0].pageX, 2) + Math.pow(e.touches[1].pageY - e.touches[0].pageY, 2));\r\n            let ZoomFactor = newdistance / this._touchStartPinchDistance;\r\n            let NextZoomX = this._touchStartPinchZoom * ZoomFactor;\r\n            if ((NextZoomX > this.mainViewPort.zoomx) && (NextZoomX > 1000))\r\n                return;\r\n            let currentRange = this._xAxis.max - this._xAxis.min;\r\n            this.mainViewPort.IRLx = this._touchStartPinchIRLx + ((this._touchStartPinchCenter.X - this.mainViewPort.Lmargin) / this._touchStartPinchZoom) - ((this._touchStartPinchCenter.X - this.mainViewPort.Lmargin) / NextZoomX);\r\n            this._xAxis.set_minMax(this.mainViewPort.IRLx, this.mainViewPort.IRLx + this._touchStartPinchRange / ZoomFactor);\r\n            this.mainViewPort.zoomx = NextZoomX;\r\n            this.redraw();\r\n        }\r\n    }\r\n    TouchEnd(sender, e) {\r\n        this.HandleEndOfMouseCapture();\r\n    }\r\n    MouseMove(sender, e) {\r\n        if ((e.buttons != 1) && (this.mainViewPort.Capture || this._navigator.Capture))\r\n            this.HandleEndOfMouseCapture();\r\n        this.HandleMouseMove(sender, e.pageX, e.pageY);\r\n        if (this.dataTracker.enabled) {\r\n            if (this.dataTrackerRefreshtimeout != null)\r\n                clearTimeout(this.dataTrackerRefreshtimeout);\r\n            this.dataTrackerRefreshtimeout = setTimeout(() => { this.redraw(); }, 100);\r\n        }\r\n    }\r\n    HandleEndOfMouseCapture() {\r\n        this.mainViewPort.Capture = false;\r\n        this._navigator.stopCapture();\r\n        if (this._dataTracker.enabled)\r\n            this.redraw();\r\n    }\r\n    HandleMouseMove(sender, pageX, pageY) {\r\n        let p = this.Scr2ElmMatrix.multiplyByV(YDataRendering.Vector3.FromXYCoord(pageX, pageY)).toPoint();\r\n        let eX = p.X;\r\n        let eY = p.Y;\r\n        if (this.markerCapture != null) {\r\n            if ((eX > this.mainViewPort.Lmargin) && (eX < this.mainViewPort.Width - this.mainViewPort.Rmargin)\r\n                && (eY > this.mainViewPort.Tmargin) && (eY < this.mainViewPort.Height - this.mainViewPort.Bmargin)) {\r\n                if ((this.UIContainer.style.cursor != YGraph.captureCursor.handle) && (this.UIContainer.style.cursor != \"crosshair\")) {\r\n                    this.UIContainer.style.cursor = YGraph.captureCursor != null ? YGraph.captureCursor.handle : \"crosshair\";\r\n                }\r\n            }\r\n            else if (this.UIContainer.style.cursor != \"default\")\r\n                this.UIContainer.style.cursor = \"default\";\r\n        }\r\n        else if (this.UIContainer.style.cursor != \"default\")\r\n            this.UIContainer.style.cursor = \"default\";\r\n        if (this.mainViewPort.Capture) {\r\n            let x1 = this.mainViewPort.OriginalIRLx + (eX - this.mainViewPort.OriginalLmargin) / this.mainViewPort.OriginalZoomx;\r\n            let deltaX = (x1 - this.mainViewPort.IRLCaptureStartX);\r\n            let deltaY = (eY - this.mainViewPort.CaptureStartY);\r\n            this.DisableRedraw();\r\n            let halfAxisDelta = (this.mainViewPort.OriginalXAxisMax - this.mainViewPort.OriginalXAxisMin) / 2;\r\n            let Axismiddle = (this.mainViewPort.OriginalXAxisMax + this.mainViewPort.OriginalXAxisMin) / 2;\r\n            let deltaCoef = (YGraph._defaultVerticalDragZoomEnabled && (Math.abs(deltaY) > 10)) ? Math.pow(1.01, deltaY) : 1;\r\n            this._xAxis.set_minMax(Axismiddle - halfAxisDelta * deltaCoef - deltaX, Axismiddle + halfAxisDelta * deltaCoef - deltaX);\r\n            this.AllowRedraw();\r\n            this.redraw();\r\n            return;\r\n        }\r\n        if (this._navigator.viewport.Capture) {\r\n            let x1 = this._navigator.viewport.OriginalIRLx + (eX - this._navigator.viewport.OriginalLmargin) / this._navigator.viewport.OriginalZoomx;\r\n            let delta = (x1 - this._navigator.viewport.IRLCaptureStartX);\r\n            this.DisableRedraw();\r\n            this._xAxis.set_minMax(this._navigator.viewport.OriginalXAxisMin + delta, this._navigator.viewport.OriginalXAxisMax + delta);\r\n            this.AllowRedraw();\r\n            this.redraw();\r\n            return;\r\n        }\r\n    }\r\n    cross(p) { }\r\n    static IRLPointToViewPort(viewport, p, IRLy, zoomy) {\r\n        if (IRLy === undefined) {\r\n            let xx = viewport.Lmargin + Math.round((p.x - viewport.IRLx) * viewport.zoomx);\r\n            let yy = viewport.Height - viewport.Bmargin - Math.round((p.y - viewport.IRLy) * viewport.zoomy);\r\n            return new YDataRendering.Point(xx >> 0, yy >> 0);\r\n        }\r\n        let xx = viewport.Lmargin + Math.round((p.x - viewport.IRLx) * viewport.zoomx);\r\n        let yy = viewport.Height - viewport.Bmargin - Math.round((p.y - IRLy) * zoomy);\r\n        return new YDataRendering.Point(xx >> 0, yy >> 0);\r\n    }\r\n    static ViewPortPointToIRL(viewport, p, IRLy, zoomy) {\r\n        if (IRLy === undefined) {\r\n            return new pointXY(viewport.IRLx + (p.X - viewport.Lmargin) / viewport.zoomx, viewport.IRLy + (+viewport.Height - p.Y - viewport.Bmargin) / viewport.zoomy);\r\n        }\r\n        return new pointXY(viewport.IRLx + (p.X - viewport.Lmargin) / viewport.zoomx, IRLy + (+viewport.Height - p.Y - viewport.Bmargin) / zoomy);\r\n    }\r\n    static FindMinMax(start, end, data, count) {\r\n        let res = MinMaxHandler.DefaultValue();\r\n        // Do we need to consider that segment?\r\n        if (!(data[0].x < end) && (data[count - 1].x > start))\r\n            return res; // completely out of view port full zone, abort.\r\n        let N1 = 0;\r\n        let N2 = 0;\r\n        // find out the first visible point ;\r\n        let First = 0;\r\n        if (data[0].x < start) {\r\n            N1 = 0;\r\n            N2 = count - 1;\r\n            while (N2 - N1 > 1) {\r\n                let N = (N1 + N2) >> 1;\r\n                if (data[N].x > start)\r\n                    N2 = N;\r\n                else\r\n                    N1 = N;\r\n            }\r\n            First = N1 - 1;\r\n            if (First < 0)\r\n                First = 0;\r\n        }\r\n        // data clipping: find out the last visible point;\r\n        let Last = count - 1;\r\n        if (data[Last] === undefined) {\r\n            debugger;\r\n        }\r\n        if (data[Last].x > end) {\r\n            N1 = 0;\r\n            N2 = count - 1;\r\n            while (N2 - N1 > 1) {\r\n                let N = (N1 + N2) >> 1;\r\n                if (data[N].x < end)\r\n                    N1 = N;\r\n                else\r\n                    N2 = N;\r\n            }\r\n            Last = N2 + 1;\r\n            if (Last > count - 1)\r\n                Last = count - 1;\r\n        }\r\n        res.Min = data[First].y;\r\n        res.Max = data[First].y;\r\n        for (let i = First + 1; i <= Last; i++) {\r\n            if (data[i].y < res.Min)\r\n                res.Min = data[i].y;\r\n            if (data[i].y > res.Max)\r\n                res.Max = data[i].y;\r\n        }\r\n        return res;\r\n    }\r\n    resetlegendPens() {\r\n        for (let i = 0; i < this._series.length; i++) {\r\n            this._series[i].resetlegendPen();\r\n        }\r\n    }\r\n    drawLegendPanel(g, viewPortWidth, viewPortHeight, mainViewPort) {\r\n        let verticalRatio = 1.25;\r\n        if (!this._legendPanel.enabled)\r\n            return;\r\n        let legendWidths = new Array(this._series.length);\r\n        let legendHeight = new Array(this._series.length);\r\n        let ofsetx = new Array(this._series.length);\r\n        let ofsety = new Array(this._series.length);\r\n        let legends = new Array(this._series.length);\r\n        let totalHeight = 0;\r\n        let totalWidth = 0;\r\n        let maxWidth = 0;\r\n        let maxHeight = 0;\r\n        g.TextRenderingHint = YDataRendering.YTextRenderingHint.SingleBitPerPixelGridFit;\r\n        g.SetClip(new YDataRendering.YRectangle(0, 0, viewPortWidth, viewPortHeight));\r\n        for (let i = 0; i < this._series.length; i++) {\r\n            if (this._series[i].legend != \"\")\r\n                legends[i] = this._series[i].legend;\r\n            else\r\n                legends[i] = \"Series \" + (i + 1).toString();\r\n        }\r\n        if ((this._legendPanel.position == LegendPanel.Position.TOP) || (this._legendPanel.position == LegendPanel.Position.BOTTOM)) {\r\n            let availableWidth = viewPortWidth - 2 * this._legendPanel.padding + this._legendPanel.borderthickness;\r\n            if (this._legendPanel.overlap)\r\n                availableWidth = availableWidth - mainViewPort.Lmargin - mainViewPort.Rmargin;\r\n            totalHeight = 0; // 2 * _legendPanel.padding + legendPanel.borderthickness;\r\n            let xx = 0;\r\n            let yy = 0;\r\n            for (let i = 0; i < this._series.length; i++) {\r\n                if ((this._series[i].segments.length > 0) && (this._series[i].visible) && (!this._series[i].disabled)) {\r\n                    let ssize = g.MeasureString(legends[i], this._legendPanel.font, 100000);\r\n                    legendHeight[i] = (ssize.height) + 1;\r\n                    let ww = (ssize.width + 20);\r\n                    if (xx == 0)\r\n                        totalHeight += ssize.height;\r\n                    if (availableWidth - xx < ww) {\r\n                        if (xx == 0) {\r\n                            ofsetx[i] = xx;\r\n                            ofsety[i] = yy;\r\n                            yy += ssize.height;\r\n                            if (maxWidth < ww)\r\n                                maxWidth = ww;\r\n                        }\r\n                        else {\r\n                            yy += ssize.height;\r\n                            ofsetx[i] = 0.0;\r\n                            ofsety[i] = yy;\r\n                            xx = ww;\r\n                            totalHeight += ssize.height;\r\n                            if (maxWidth < xx)\r\n                                maxWidth = xx;\r\n                        }\r\n                    }\r\n                    else {\r\n                        ofsetx[i] = xx;\r\n                        ofsety[i] = yy;\r\n                        xx += ww;\r\n                        if (maxWidth < xx)\r\n                            maxWidth = xx;\r\n                    }\r\n                }\r\n            }\r\n            if (totalWidth > availableWidth) { // noinspection JSUnusedAssignment\r\n                totalWidth = availableWidth;\r\n            }\r\n        }\r\n        else {\r\n            let ty = 0;\r\n            for (let i = 0; i < this._series.length; i++) {\r\n                if ((this._series[i].segments.length > 0) && (this._series[i].visible) && (!this._series[i].disabled)) {\r\n                    let ssize = g.MeasureString(legends[i], this._legendPanel.font, 100000);\r\n                    legendWidths[i] = (ssize.width) + 1;\r\n                    if (maxWidth < legendWidths[i] + 20)\r\n                        maxWidth = legendWidths[i] + 20;\r\n                    legendHeight[i] = (ssize.height) + 1;\r\n                    if (maxHeight < legendHeight[i])\r\n                        maxHeight = legendHeight[i];\r\n                    ofsetx[i] = 0;\r\n                    ofsety[i] = ty;\r\n                    ty += ssize.height * verticalRatio;\r\n                    totalHeight += i == 0 ? ssize.height : ssize.height * verticalRatio;\r\n                }\r\n            }\r\n        }\r\n        let w = maxWidth + 2 * this._legendPanel.padding + this._legendPanel.borderthickness;\r\n        let h = totalHeight + 2 * this._legendPanel.padding + this._legendPanel.borderthickness;\r\n        let x = 0;\r\n        let y = 0;\r\n        switch (this._legendPanel.position) {\r\n            case LegendPanel.Position.LEFT:\r\n                x = this._legendPanel.horizontalMargin;\r\n                if (!this._legendPanel.overlap) {\r\n                    mainViewPort.Lmargin += (w + 2 * this.legendPanel.horizontalMargin + this.legendPanel.borderthickness) >> 0;\r\n                    y = (viewPortHeight - h) / 2;\r\n                }\r\n                else {\r\n                    x += mainViewPort.Lmargin;\r\n                    y = mainViewPort.Tmargin + (viewPortHeight - mainViewPort.Tmargin - mainViewPort.Bmargin - h) / 2;\r\n                }\r\n                break;\r\n            case LegendPanel.Position.TOPLEFT:\r\n                x = this._legendPanel.horizontalMargin;\r\n                y = this._legendPanel.verticalMargin;\r\n                if (!this._legendPanel.overlap) {\r\n                    mainViewPort.Lmargin += (w + 2 * this.legendPanel.horizontalMargin + this.legendPanel.borderthickness) >> 0;\r\n                }\r\n                else {\r\n                    x += mainViewPort.Lmargin;\r\n                    y += mainViewPort.Tmargin;\r\n                }\r\n                break;\r\n            case LegendPanel.Position.TOP:\r\n                if (!this._legendPanel.overlap) {\r\n                    x = (viewPortWidth - w) / 2 - this._legendPanel.horizontalMargin - this._legendPanel.borderthickness;\r\n                    y = this._legendPanel.verticalMargin + this._legendPanel.borderthickness;\r\n                    mainViewPort.Tmargin += (totalHeight + this._legendPanel.verticalMargin + 2 * this._legendPanel.verticalMargin + this._legendPanel.borderthickness) >> 0;\r\n                }\r\n                else {\r\n                    x = mainViewPort.Lmargin + (viewPortWidth - mainViewPort.Lmargin - mainViewPort.Rmargin - w) / 2 - this._legendPanel.horizontalMargin - this._legendPanel.borderthickness;\r\n                    y = mainViewPort.Tmargin + this._legendPanel.verticalMargin - this._legendPanel.borderthickness;\r\n                }\r\n                break;\r\n            case LegendPanel.Position.TOPRIGHT:\r\n                x = viewPortWidth - this._legendPanel.horizontalMargin - w;\r\n                y = this._legendPanel.verticalMargin;\r\n                if (!this._legendPanel.overlap) {\r\n                    mainViewPort.Rmargin += (w + 2 * this._legendPanel.horizontalMargin + this._legendPanel.borderthickness) >> 0;\r\n                }\r\n                else {\r\n                    x -= mainViewPort.Rmargin;\r\n                    y += mainViewPort.Tmargin;\r\n                }\r\n                break;\r\n            case LegendPanel.Position.RIGHT:\r\n                x = viewPortWidth - this._legendPanel.horizontalMargin - w;\r\n                if (!this._legendPanel.overlap) {\r\n                    mainViewPort.Rmargin += (w + 2 * this._legendPanel.horizontalMargin + this._legendPanel.borderthickness) >> 0;\r\n                    y = (viewPortHeight - h) / 2;\r\n                }\r\n                else {\r\n                    x -= mainViewPort.Rmargin;\r\n                    y = mainViewPort.Tmargin + (viewPortHeight - mainViewPort.Tmargin - mainViewPort.Bmargin - h) / 2;\r\n                }\r\n                break;\r\n            case LegendPanel.Position.BOTTOMRIGHT:\r\n                x = viewPortWidth - this._legendPanel.horizontalMargin - w;\r\n                if (!this._legendPanel.overlap) {\r\n                    mainViewPort.Rmargin += (w + 2 * this._legendPanel.horizontalMargin + this._legendPanel.borderthickness) >> 0;\r\n                    y = viewPortHeight - this._legendPanel.verticalMargin - h;\r\n                }\r\n                else {\r\n                    x -= mainViewPort.Rmargin;\r\n                    y = viewPortHeight - mainViewPort.Bmargin - h - this._legendPanel.verticalMargin;\r\n                }\r\n                break;\r\n            case LegendPanel.Position.BOTTOM:\r\n                if (!this._legendPanel.overlap) {\r\n                    x = (viewPortWidth - w) / 2 - this._legendPanel.horizontalMargin - this._legendPanel.borderthickness;\r\n                    y = viewPortHeight - this._legendPanel.verticalMargin - 2 * this._legendPanel.padding - this._legendPanel.borderthickness - totalHeight;\r\n                    mainViewPort.Bmargin += (totalHeight + 2 * this._legendPanel.padding + 2 * this._legendPanel.verticalMargin + this._legendPanel.borderthickness);\r\n                }\r\n                else {\r\n                    x = mainViewPort.Lmargin + (viewPortWidth - mainViewPort.Lmargin - mainViewPort.Rmargin - w) / 2 - this._legendPanel.horizontalMargin - this._legendPanel.borderthickness;\r\n                    y = viewPortHeight - mainViewPort.Bmargin - totalHeight - 2 * this._legendPanel.padding - 2 * this._legendPanel.verticalMargin - this._legendPanel.borderthickness;\r\n                }\r\n                break;\r\n            case LegendPanel.Position.BOTTOMLEFT:\r\n                x = this._legendPanel.horizontalMargin;\r\n                y = this._legendPanel.verticalMargin;\r\n                if (!this._legendPanel.overlap) {\r\n                    mainViewPort.Lmargin += (w + 2 * this._legendPanel.horizontalMargin + this._legendPanel.borderthickness);\r\n                    y = viewPortHeight - this._legendPanel.verticalMargin - h;\r\n                }\r\n                else {\r\n                    x += mainViewPort.Lmargin;\r\n                    y = viewPortHeight - mainViewPort.Bmargin - h - this._legendPanel.verticalMargin;\r\n                }\r\n                break;\r\n        }\r\n        let rect = new YDataRendering.YRectangle(x >> 0, y >> 0, w >> 0, h >> 0);\r\n        g.FillRectangle(this._legendPanel.bgBrush, rect);\r\n        g.DrawRectangle(this._legendPanel.pen, rect);\r\n        g.TextRenderingHint = YDataRendering.YTextRenderingHint.AntiAlias;\r\n        for (let i = 0; i < this._series.length; i++) {\r\n            if ((this._series[i].segments.length > 0) && (this._series[i].visible) && (!this._series[i].disabled)) {\r\n                g.DrawStringXY(legends[i], this._legendPanel.font, this._legendPanel.font.brush, (x + ofsetx[i] + 20 + this._legendPanel.padding) >> 0, (y + ofsety[i] + this._legendPanel.padding) >> 0);\r\n                let px = (x + ofsetx[i] + this._legendPanel.borderthickness / 2 + this._legendPanel.padding + 6) >> 0;\r\n                let py = (y + ofsety[i] + this._legendPanel.padding + legendHeight[i] / 2) >> 0;\r\n                g.DrawLine(this._series[i].legendPen, new YDataRendering.PointF(px, py), new YDataRendering.PointF(px + 12, py));\r\n            }\r\n        }\r\n    }\r\n    static DoSegmentRendering(w, g, p, data, count, xTimeStart, xTimeEnd) {\r\n        if ((data[0].x > xTimeEnd) || (data[count - 1].x < xTimeStart))\r\n            return 0;\r\n        // let Bottomleft: pointXY = YGraph.ViewPortPointToIRL(w, new YDataRendering.Point(w.Lmargin, w.Height - w.Bmargin));\r\n        // let TopRight: pointXY = YGraph.ViewPortPointToIRL(w, new YDataRendering.Point(w.Width - w.Rmargin, w.Tmargin));\r\n        // Do we need to draw that segment?\r\n        // if ((data[0].x > TopRight.x) || (data[count - 1].x < Bottomleft.x)) return 0; // completely out of view port display zone, abort.\r\n        let isSVG = g instanceof YDataRendering.YGraphicsSVG;\r\n        let N1 = 0;\r\n        let N2 = 0;\r\n        // data clipping: find out the first point to draw;\r\n        let First = 0;\r\n        if (data[0].x < xTimeStart) {\r\n            N1 = 0;\r\n            N2 = count - 1;\r\n            while (N2 - N1 > 1) {\r\n                let N = (N1 + N2) >> 1;\r\n                if (data[N].x > xTimeStart)\r\n                    N2 = N;\r\n                else\r\n                    N1 = N;\r\n            }\r\n            First = N1 - 1;\r\n            if (First < 0)\r\n                First = 0;\r\n        }\r\n        // data clipping: find out the last point to draw;\r\n        let Last = count - 1;\r\n        if (data[Last].x > xTimeEnd) {\r\n            N1 = 0;\r\n            N2 = count - 1;\r\n            while (N2 - N1 > 1) {\r\n                let N = (N1 + N2) >> 1;\r\n                if (data[N].x < xTimeEnd)\r\n                    N1 = N;\r\n                else\r\n                    N2 = N;\r\n            }\r\n            Last = N2 + 1;\r\n            if (Last > count - 1)\r\n                Last = count - 1;\r\n        }\r\n        if (Last - First > 2 * w.Width - w.Lmargin - w.Rmargin) // to many points to Draw, lets do some clean up\r\n         {\r\n            let ToDraw = new Array(3 * (Last - First + 1));\r\n            let Current = YGraph.IRLPointToViewPort(w, data[First]);\r\n            let New;\r\n            let i = First + 1;\r\n            let n = 0;\r\n            let max;\r\n            let min;\r\n            let limit;\r\n            while (i < Last) {\r\n                ToDraw[n++] = new YDataRendering.PointF(Current.X, Current.Y);\r\n                min = data[i].y;\r\n                max = min;\r\n                limit = YGraph.ViewPortPointToIRL(w, new YDataRendering.Point(Current.X + 1, Current.Y + 1)).x;\r\n                do {\r\n                    if (data[i].y > max)\r\n                        max = data[i].y;\r\n                    if (data[i].y < min)\r\n                        min = data[i].y;\r\n                    i++;\r\n                } while ((i < Last) && (data[i].x < limit));\r\n                let p1 = YGraph.IRLPointToViewPort(w, new pointXY(data[i].x, min));\r\n                let p2 = YGraph.IRLPointToViewPort(w, new pointXY(data[i].x, max));\r\n                if (Math.abs(p1.Y - p2.Y) > 2) {\r\n                    ToDraw[n++] = new YDataRendering.PointF(p1.X, p1.Y);\r\n                    ToDraw[n++] = new YDataRendering.PointF(p2.X, p2.Y);\r\n                }\r\n                /*\r\n                let min: number = Current.Y;\r\n                let max: number = Current.Y;\r\n                ToDraw[n++] = new YDataRendering.PointF(Current.X, Current.Y);\r\n                do\r\n                {\r\n                    New = YGraph.IRLPointToViewPort(w, data[i]);\r\n                    if (New.Y > max) max = New.Y;\r\n                    if (New.Y < min) min = New.Y;\r\n                    i++;\r\n                } while ((i < Last) && (Current.X == New.X));\r\n\r\n                ToDraw[n++] = new YDataRendering.PointF(Current.X, min);\r\n                ToDraw[n++] = new YDataRendering.PointF(Current.X, max);\r\n                */\r\n                Current = YGraph.IRLPointToViewPort(w, data[i]);\r\n            }\r\n            ToDraw[n++] = Current; //YGraph.IRLPointToViewPort(w, data[Last]);\r\n            ToDraw = ToDraw.slice(0, n);\r\n            if (n > 1)\r\n                g.DrawLines(p, ToDraw);\r\n            return n;\r\n        }\r\n        else { // in SVG mode, DrawLines linejoins are rendered correctly,\r\n            // in bitmap mode they aren't\r\n            if (isSVG) {\r\n                let ToDraw = new Array(Last - First + 1);\r\n                for (let i = First; i <= Last; i++) {\r\n                    ToDraw[i - First] = YGraph.IRLPointToViewPort(w, data[i]);\r\n                }\r\n                g.DrawLines(p, ToDraw);\r\n            }\r\n            else {\r\n                for (let i = First; i < Last; i++) {\r\n                    g.DrawLine(p, YGraph.IRLPointToViewPort(w, data[i]), YGraph.IRLPointToViewPort(w, data[i + 1]));\r\n                }\r\n            }\r\n        }\r\n        return Last - First;\r\n    }\r\n    DrawYAxisZones(w, g, scale) {\r\n        if (!scale.visible)\r\n            return;\r\n        let Delta = scale.startStopStep.dataMax - scale.startStopStep.dataMin;\r\n        let YZoom = (Delta) / (w.Height - w.Bmargin - w.Tmargin);\r\n        for (let i = 0; i < scale.zones.length; i++) {\r\n            if (scale.zones[i].visible) {\r\n                let max = scale.zones[i].max;\r\n                let min = scale.zones[i].min;\r\n                if (Number.isNaN(max)) {\r\n                    max = scale.startStopStep.dataMax;\r\n                }\r\n                if (Number.isNaN(min))\r\n                    min = scale.startStopStep.dataMin;\r\n                if (max < min) {\r\n                    let t = max;\r\n                    max = min;\r\n                    min = t;\r\n                }\r\n                let y0 = w.Height - w.Bmargin - Math.round((max - scale.startStopStep.dataMin) / YZoom) >> 0;\r\n                let h = Math.round((max - min) / YZoom) >> 0;\r\n                g.FillRectangleXYHW(scale.zones[i].zoneBrush, this.mainViewPort.Lmargin, y0, this.mainViewPort.Width - this.mainViewPort.Rmargin - this.mainViewPort.Lmargin + 1, h);\r\n            }\r\n        }\r\n    }\r\n    DrawXAxisZones(w, g, scale) {\r\n        if (!scale.visible)\r\n            return;\r\n        let delta = scale.max - scale.min;\r\n        let XZoom = (delta) / (w.Width - w.Lmargin - w.Rmargin);\r\n        for (let i = 0; i < scale.zones.length; i++) {\r\n            if (scale.zones[i].visible) {\r\n                let max = scale.zones[i].max;\r\n                let min = scale.zones[i].min;\r\n                if (Number.isNaN(max))\r\n                    max = scale.min;\r\n                if (Number.isNaN(min))\r\n                    min = scale.max;\r\n                if (max < min) {\r\n                    let t = max;\r\n                    max = min;\r\n                    min = t;\r\n                }\r\n                let x0 = w.Lmargin + Math.round((min - scale.min) / XZoom) >> 0;\r\n                g.FillRectangleXYHW(scale.zones[i].zoneBrush, x0, this.mainViewPort.Tmargin, ((max - min) / XZoom) >> 0, this.mainViewPort.Height - this.mainViewPort.Tmargin - this.mainViewPort.Bmargin);\r\n            }\r\n        }\r\n    }\r\n    // noinspection JSSuspiciousNameCombination\r\n    static DrawYAxis(w, g, axis, ofset, simulation) {\r\n        if (!axis.visible) {\r\n            axis.innerWidth = 0;\r\n            // noinspection JSSuspiciousNameCombination\r\n            return axis.innerWidth;\r\n        }\r\n        let Delta = axis.startStopStep.dataMax - axis.startStopStep.dataMin;\r\n        let YZoom = (Delta) / (w.Height - w.Bmargin - w.Tmargin);\r\n        let leftSide = axis.position == YAxis.HrzPosition.LEFT;\r\n        let x = leftSide ? w.Lmargin - ofset : (w.Width - w.Rmargin + ofset);\r\n        if (!simulation)\r\n            g.DrawLineXY(axis.pen, x, w.Tmargin, x, w.Height - w.Bmargin);\r\n        let format = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\r\n        format.LineAlignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\r\n        format.Alignment = leftSide ? 2 /* YDataRendering.YStringFormat.StringAlignment.Far */ : 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\r\n        let FirstStep = axis.startStopStep.step * (Math.floor(axis.startStopStep.start / axis.startStopStep.step));\r\n        if (FirstStep < 0) {\r\n            FirstStep -= axis.startStopStep.step;\r\n        }\r\n        let stepCount = (((Delta - (FirstStep - axis.startStopStep.dataMin)) / axis.startStopStep.step) >> 0) + 1;\r\n        if (!simulation)\r\n            g.TextRenderingHint = YDataRendering.YTextRenderingHint.AntiAlias;\r\n        let UnitWidth = 0;\r\n        let labelPrecision = 0; // fix me\r\n        if (axis.startStopStep.precision < 0)\r\n            labelPrecision = (-axis.startStopStep.precision);\r\n        if (stepCount < w.Height) // protection again infinity of graduation\r\n         {\r\n            for (let i = 0; i < stepCount; i++) {\r\n                let y = Math.round((FirstStep + i * axis.startStopStep.step - axis.startStopStep.dataMin) / YZoom) >> 0;\r\n                if (y >= 0) {\r\n                    y = w.Height - w.Bmargin - y;\r\n                    let v = FirstStep + i * axis.startStopStep.step;\r\n                    if (!simulation) {\r\n                        if ((axis.showGrid) && ((i > 0) || (axis.startStopStep.dataMin != 0)))\r\n                            g.DrawLineXY(axis.gridPen, w.Lmargin, y, w.Width - w.Rmargin, y);\r\n                        if ((Math.abs(v) < 1E-6) && axis.highlightZero) {\r\n                            g.DrawLineXY(axis.pen, w.Lmargin, y, w.Width - w.Rmargin, y);\r\n                        }\r\n                        g.DrawLineXY(axis.pen, x + ((leftSide) ? -2 : 2), y, x + ((leftSide) ? 5 : -5), y);\r\n                    }\r\n                    let label = v.toFixed(labelPrecision);\r\n                    let ssize = g.MeasureString(label, axis.font, 100000);\r\n                    if (ssize.width > UnitWidth)\r\n                        UnitWidth = ssize.width;\r\n                    if (!simulation) {\r\n                        let p = new YDataRendering.Point(x + (leftSide ? -3 : 3), y);\r\n                        g.DrawStringPF(label, axis.font, axis.font.brush, p, format);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (axis.legend.title != \"\") {\r\n            let size = g.MeasureString(axis.legend.title, axis.legend.font, 100000);\r\n            if (!simulation) {\r\n                let format = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\r\n                format.Alignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\r\n                format.LineAlignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\r\n                format.Trimming = 0 /* YDataRendering.YStringFormat.StringTrimming.None */;\r\n                let legendX = x + ((leftSide) ? -UnitWidth - size.height : UnitWidth + size.height + 2) >> 0;\r\n                let legendY = (w.Tmargin + (w.Height - w.Tmargin - w.Bmargin) / 2) >> 0;\r\n                g.Transform(legendX, legendY, leftSide ? -Math.PI / 2 : Math.PI / 2);\r\n                g.DrawStringPF(axis.legend.title, axis.legend.font, axis.legend.font.brush, new YDataRendering.Point(0, 0), format);\r\n                g.ResetTransform();\r\n            }\r\n            // noinspection JSSuspiciousNameCombination\r\n            UnitWidth += size.height;\r\n        }\r\n        axis.innerWidth = (UnitWidth >> 0) + 10;\r\n        // noinspection JSSuspiciousNameCombination\r\n        return axis.innerWidth;\r\n    }\r\n    DrawMonitorXAxis(w, g, xRange, format) {\r\n        let delta = xRange.Max - xRange.Min;\r\n        let scale = TimeConverter.BestTimeformat(delta, delta, this.xAxis.timeReference);\r\n        let XZoom = (delta) / (w.Width - w.Lmargin - w.Rmargin);\r\n        let stepCount = ((delta / scale.step) >> 0) + 2;\r\n        let FirstStep = scale.step * (Math.floor(xRange.Min / scale.step));\r\n        if (FirstStep < xRange.Min)\r\n            FirstStep += scale.step;\r\n        g.TextRenderingHint = YDataRendering.YTextRenderingHint.AntiAlias;\r\n        let y = w.Height - w.Bmargin;\r\n        g.DrawLineXY(this._navigator.pen, w.Lmargin, w.Height - w.Bmargin - 1, w.Width - w.Rmargin, w.Height - w.Bmargin - 1);\r\n        let label;\r\n        let t = FirstStep;\r\n        do {\r\n            let d = TimeConverter.FromUnixTime(t);\r\n            if (scale.step > 30 * 86400) // resynchronize with the beginning of the month.\r\n             {\r\n                t = TimeConverter.ToUnixTime(new Date(d.getFullYear(), d.getMonth(), 1));\r\n            }\r\n            if (t >= xRange.Min) {\r\n                let x = w.Lmargin + Math.round((t - xRange.Min) / XZoom);\r\n                g.DrawLineXY(this._navigator.pen, x, y, x, y - 4);\r\n                if (format == XAxis.FORMATAUTO) {\r\n                    label = TimeConverter.FromUnixTime(t).ToString(scale.format);\r\n                }\r\n                else {\r\n                    label = TimeConverter.FromUnixTime(t).ToString(format);\r\n                }\r\n                let ssize = g.MeasureString(label, this._navigator.font, 100000);\r\n                g.DrawString(label, this._navigator.font, this._navigator.font.brush, new YDataRendering.Point((x - ssize.width / 2), (y - ssize.height - 1)));\r\n            }\r\n            t += scale.step;\r\n        } while (t < xRange.Max);\r\n    }\r\n    static XLabel(t, scale, scaleFormat, timeRange) {\r\n        let label;\r\n        if (scale.timeReference == TimeConverter.TimeReference.ABSOLUTE) {\r\n            if (scale.labelFormat == XAxis.FORMATAUTO) {\r\n                label = TimeConverter.FromUnixTime(t).ToString(scaleFormat.format);\r\n            }\r\n            else {\r\n                label = t.toString();\r\n            } //(scale.labelFormat);\r\n        }\r\n        else {\r\n            let ticks = YTimeSpan.TicksPerSecond * (Math.round(1000 * (t - scale.zeroTime)) / 1000);\r\n            label = (ticks < 0) ? \"-\" + new YTimeSpan(-ticks).toString(scaleFormat.format) : new YTimeSpan(ticks).toString(scaleFormat.format);\r\n        }\r\n        return label;\r\n    }\r\n    DrawXAxis(w, g, scale, simulation) {\r\n        if (w.Width - w.Rmargin - w.Lmargin < 10)\r\n            return 1;\r\n        //string lastdate = \"\";\r\n        let stringFormat = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\r\n        stringFormat.Alignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */; // Horizontal Alignment\r\n        let bottomSide = scale.position == XAxis.VrtPosition.BOTTOM;\r\n        let y = bottomSide ? w.Height - w.Bmargin : w.Tmargin;\r\n        if (!simulation)\r\n            g.DrawLineXY(scale.pen, w.Lmargin, y, w.Width - w.Rmargin, y);\r\n        let delta = scale.max - scale.min;\r\n        let XZoom = (delta) / (w.Width - w.Lmargin - w.Rmargin);\r\n        let stepCount = ((delta / scale.step) >> 0) + 1;\r\n        let FirstStep = 0;\r\n        let timeRange = MinMaxHandler.DefaultValue();\r\n        for (let i = 0; i < this._series.length; i++) {\r\n            if (!this._series[i].disabled) {\r\n                timeRange = MinMaxHandler.Combine(timeRange, this._series[i].timeRange);\r\n            }\r\n        }\r\n        scale.zeroTime = timeRange.Min;\r\n        if (scale.timeReference == TimeConverter.TimeReference.ABSOLUTE) {\r\n            FirstStep = scale.step * (Math.floor(scale.min / scale.step));\r\n            timeRange.Min = scale.min;\r\n            timeRange.Max = scale.max;\r\n        }\r\n        else {\r\n            if (Number.isNaN(timeRange.Min))\r\n                return 0;\r\n            FirstStep = timeRange.Min + scale.step * (Math.floor((scale.min - scale.zeroTime) / scale.step));\r\n        }\r\n        if (FirstStep < scale.min)\r\n            FirstStep += scale.step;\r\n        let timeOffset = 0;\r\n        if (scale.timeReference != TimeConverter.TimeReference.ABSOLUTE) {\r\n            timeOffset = FirstStep;\r\n        }\r\n        scale.fullSize = timeRange.Max - timeRange.Min;\r\n        //log(\"Viewport Size: \" + (scale.max - scale.min).toString() + \"Sec (\" + ((scale.max - scale.min)/86400).toString()+\" days)\");\r\n        let scaleFormat = scale.bestFormat(timeRange.Max - timeRange.Min, scale.max - scale.min);\r\n        if (!simulation)\r\n            g.TextRenderingHint = YDataRendering.YTextRenderingHint.AntiAlias;\r\n        let UnitHeight = 0;\r\n        let label;\r\n        scale.step = scaleFormat.step;\r\n        // compute the size of the first label\r\n        let t = parseFloat(FirstStep.toString());\r\n        label = YGraph.XLabel(t, scale, scaleFormat, timeRange);\r\n        let ssize = g.MeasureString(label, scale.font, 100000);\r\n        // Compute step to skip, to make sure labels don't overlap\r\n        let mod = 1;\r\n        while ((mod * (w.Width - w.Rmargin - w.Lmargin) / stepCount) < ssize.width) {\r\n            mod++;\r\n        }\r\n        let steps = Math.round((t - timeOffset) / scale.step) >> 0;\r\n        let previousT = 0;\r\n        do {\r\n            let d = TimeConverter.FromUnixTime(t);\r\n            if ((scale.step > 32 * 86400) && (scale.timeReference == TimeConverter.TimeReference.ABSOLUTE)) // resynchronize with the begining of the month.\r\n             {\r\n                if (scale.step >= 365 * 86400) {\r\n                    let m = d.getMonth();\r\n                    t = TimeConverter.ToUnixTime(new Date(d.getFullYear() + (m > 5 ? 1 : 0), 0, 1));\r\n                }\r\n                else\r\n                    t = TimeConverter.ToUnixTime(new Date(d.getFullYear(), d.getMonth(), 1));\r\n                if (t < previousT) {\r\n                    debugger;\r\n                } // if this happens, we are in deep sh*t\r\n                // console.log(\" \" + t.toString() +\" / \"+scale.max.toString() + \" step = \"+scale.step.toString())\r\n            }\r\n            if (t >= scale.min) {\r\n                let x = w.Lmargin + Math.round((t - scale.min) / XZoom) >> 0;\r\n                if (x <= w.Width - w.Rmargin) {\r\n                    if (!simulation) {\r\n                        if (scale.showGrid)\r\n                            g.DrawLineXY(scale.gridPen, x, w.Tmargin, x, w.Height - w.Bmargin);\r\n                        g.DrawLineXY(scale.pen, x, y + (bottomSide ? 2 : -2), x, y + (bottomSide ? -5 : 5));\r\n                    }\r\n                    label = YGraph.XLabel(t, scale, scaleFormat, timeRange);\r\n                    //console.log(\"t=\"+t+\" label=\"+label);\r\n                    ssize = g.MeasureString(label, scale.font, 100000);\r\n                    if (ssize.height > UnitHeight)\r\n                        UnitHeight = ssize.height;\r\n                    if (!simulation) {\r\n                        if (steps % mod == 0) \r\n                        //if (Math.round(100 * (t - timeOffset)) % Math.round(100 * (scale.step * mod)) == 0)\r\n                        {\r\n                            g.DrawStringPF(label, scale.font, scale.font.brush, new YDataRendering.PointF(x, y + (bottomSide ? +5 : (-ssize.height) >> 0) - 2), stringFormat);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            previousT = t;\r\n            t += scale.step;\r\n            if (t < previousT)\r\n                debugger; // if this happens, we are in deep sh*t\r\n            steps++;\r\n        } while (t <= scale.max);\r\n        if (scale.legend.title != \"\") {\r\n            let size = g.MeasureString(scale.legend.title, scale.legend.font, 100000);\r\n            if (!simulation) {\r\n                let legendX = (w.Lmargin + (w.Width - w.Lmargin - w.Rmargin - size.width) / 2) >> 0;\r\n                let legendY = (bottomSide ? w.Height - w.Bmargin + UnitHeight + 5 : w.Tmargin - UnitHeight - size.height * 1.5);\r\n                g.DrawString(scale.legend.title, scale.legend.font, scale.legend.font.brush, new YDataRendering.PointF(legendX, legendY));\r\n            }\r\n            UnitHeight += size.height >> 0;\r\n        }\r\n        scale.innerHeight = (UnitHeight >> 0) + 10;\r\n        // noinspection JSSuspiciousNameCombination\r\n        return scale.innerHeight;\r\n    }\r\n    pixelxSize(mainViewPort, scaleX) {\r\n        let dtime = scaleX.max - scaleX.min;\r\n        let dview = mainViewPort.Width - mainViewPort.Lmargin - mainViewPort.Rmargin;\r\n        if (dview > 0)\r\n            return dtime / dview;\r\n        return 0;\r\n    }\r\n    TimeToAutoSting(t, mainViewPort, scaleX) {\r\n        let strValue = \"\";\r\n        let dtime = scaleX.max - scaleX.min;\r\n        let months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n        // double dview = mainViewPort.Width - mainViewPort.Lmargin - mainViewPort.Rmargin;\r\n        if (dtime > 0) {\r\n            let pixelSize = this.pixelxSize(mainViewPort, scaleX);\r\n            if (pixelSize > 0) {\r\n                if (scaleX.timeReference == TimeConverter.TimeReference.ABSOLUTE) {\r\n                    let date = TimeConverter.FromUnixTime(t);\r\n                    let MMMM = months[date.getMonth()];\r\n                    let dd = date.getDate().toString();\r\n                    let HH = date.getHours().toString();\r\n                    if (HH.length < 2)\r\n                        HH = \"0\" + HH;\r\n                    let mm = date.getMinutes().toString();\r\n                    if (mm.length < 2)\r\n                        mm = \"0\" + mm;\r\n                    let ss = date.getSeconds().toString();\r\n                    if (ss.length < 2)\r\n                        ss = \"0\" + ss;\r\n                    let ff = Math.round(date.getMilliseconds() / 10).toString();\r\n                    if (ff.length < 2)\r\n                        ff = \"0\" + ss;\r\n                    let f = Math.round(date.getMilliseconds() / 100).toString();\r\n                    if (dtime >= 86400)\r\n                        strValue += MMMM + \" \" + dd;\r\n                    if (pixelSize < 0.1) {\r\n                        strValue += (strValue != \"\" ? \" \" : \"\") + HH + \":\" + mm + \":\" + ss + \".\" + ff;\r\n                    }\r\n                    else if (pixelSize < 1) {\r\n                        strValue += (strValue != \"\" ? \" \" : \"\") + HH + \":\" + mm + \":\" + ss + \".\" + f;\r\n                    }\r\n                    else if (pixelSize < 60) {\r\n                        strValue += (strValue != \"\" ? \" \" : \"\") + HH + \":\" + mm + \":\" + ss;\r\n                    }\r\n                    else if (pixelSize < 3600) {\r\n                        strValue += (strValue != \"\" ? \" \" : \"\") + HH + \":\" + mm;\r\n                    }\r\n                    else if (pixelSize < 86400)\r\n                        strValue += (strValue != \"\" ? \" \" : \"\") + HH + \"H\";\r\n                }\r\n                else {\r\n                    let format = TimeConverter.RelativeFormat(scaleX.fullSize, dtime, pixelSize);\r\n                    let ticks = YTimeSpan.TicksPerSecond * (Math.round(100 * (t - scaleX.zeroTime)) / 100);\r\n                    strValue += (ticks < 0) ? \"-\" + new YTimeSpan(-ticks).toString(format) : new YTimeSpan(ticks).toString(format);\r\n                }\r\n            }\r\n        }\r\n        return strValue;\r\n    }\r\n    DrawDataTracker(g, viewPortWidth, viewPortHeight, scaleX) {\r\n        if (!this._dataTracker.enabled) {\r\n            return;\r\n        }\r\n        let p = this.mouseLocalPosition();\r\n        if (p == null) {\r\n            return;\r\n        }\r\n        if (p.X <= this.mainViewPort.Lmargin) {\r\n            return;\r\n        }\r\n        if (p.Y <= this.mainViewPort.Tmargin) {\r\n            return;\r\n        }\r\n        if (p.X >= this.UIContainer.width - this.mainViewPort.Rmargin) {\r\n            return;\r\n        }\r\n        if (p.Y >= this.UIContainer.height - this.mainViewPort.Bmargin) {\r\n            return;\r\n        }\r\n        g.SetClip(new YDataRendering.YRectangle(0, 0, viewPortWidth, viewPortHeight));\r\n        let DataPoint = YGraph.ViewPortPointToIRL(this.mainViewPort, p); //DataPoint Y value will be incorrect, but we don't need it.\r\n        let delta = -1;\r\n        let bestindex = -1;\r\n        let bestmatch = new Array(this._series.length);\r\n        let IRLmatch = new Array(this._series.length);\r\n        for (let i = 0; i < this._series.length; i++) {\r\n            if ((this._series[i].visible) && (!this._series[i].disabled)) {\r\n                let p2 = this._series[i].findClosestValue(DataPoint.x, false);\r\n                if (p2 != null) {\r\n                    IRLmatch[i] = p2;\r\n                    bestmatch[i] = YGraph.IRLPointToViewPort(this.mainViewPort, IRLmatch[i], this.yAxes[this._series[i].yAxisIndex].IRLy, this.yAxes[this._series[i].yAxisIndex].zoom);\r\n                    if (bestindex < 0 || (delta > Math.abs(bestmatch[i].Y - p.Y))) {\r\n                        delta = Math.abs(bestmatch[i].Y - p.Y);\r\n                        if ((this._dataTracker.detectionDistance == 0) ||\r\n                            ((delta <= this._dataTracker.detectionDistance) &&\r\n                                (Math.abs(bestmatch[i].X - p.X) < this._dataTracker.detectionDistance))) {\r\n                            bestindex = i;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (bestindex >= 0) {\r\n            let xx = (bestmatch[bestindex].X - this._dataTracker.diameter / 2) >> 0;\r\n            let yy = (bestmatch[bestindex].Y - this._dataTracker.diameter / 2) >> 0;\r\n            let dd = this._dataTracker.diameter;\r\n            g.FillEllipse(this._series[bestindex].brush, xx, yy, dd, dd);\r\n            g.DrawEllipse(this._dataTracker.pen, xx, yy, dd, dd);\r\n            let dx;\r\n            let dy;\r\n            if (p.X > this.mainViewPort.Lmargin + (viewPortWidth - this.mainViewPort.Lmargin - this.mainViewPort.Rmargin) / 2)\r\n                dx = -1;\r\n            else\r\n                dx = 1;\r\n            if (p.Y > this.mainViewPort.Tmargin + (viewPortHeight - this.mainViewPort.Tmargin - this.mainViewPort.Bmargin) / 2)\r\n                dy = -1;\r\n            else\r\n                dy = 1;\r\n            let xx2 = (bestmatch[bestindex].X + dx * (this._dataTracker.handleLength * 1.5)) >> 0;\r\n            let yy2 = (bestmatch[bestindex].Y + dy * this._dataTracker.handleLength) >> 0;\r\n            g.DrawLineXY(this._dataTracker.pen, (bestmatch[bestindex].X + dx * 0.707 * this._dataTracker.diameter / 2) >> 0, (bestmatch[bestindex].Y + dy * 0.707 * this._dataTracker.diameter / 2) >> 0, (bestmatch[bestindex].X + dx * this._dataTracker.handleLength) >> 0, (bestmatch[bestindex].Y + dy * this._dataTracker.handleLength) >> 0);\r\n            g.DrawLineXY(this._dataTracker.pen, (bestmatch[bestindex].X + dx * this._dataTracker.handleLength) >> 0, (bestmatch[bestindex].Y + dy * this._dataTracker.handleLength) >> 0, xx2, yy2);\r\n            let strValue = \"\";\r\n            if (this._dataTracker.showSerieName)\r\n                strValue += this._series[bestindex].legend + \"\\r\\n\";\r\n            if (this._dataTracker.showTimeStamp) {\r\n                let t = IRLmatch[bestindex].x;\r\n                strValue += this.TimeToAutoSting(t, this.mainViewPort, scaleX) + \"\\r\\n\";\r\n            }\r\n            // this string based comparaison  is an exception this._dataTracker.dataPrecision might actually be\r\n            // DataTrackerDescription from Properties.ts which was  probably added to avoid precision values that\r\n            // make no Sense in Yocto-Visualization\r\n            if (this._dataTracker.dataPrecision.toString == DataTracker.DataPrecision.PRECISION_NOLIMIT.toString) {\r\n                strValue += IRLmatch[bestindex].y.toString() + this._series[bestindex].unit;\r\n            }\r\n            else {\r\n                let strvalue = this._dataTracker.dataPrecision.description; // not very elegent but it will do\r\n                let precision = -Math.log10(Number(strvalue));\r\n                strValue += IRLmatch[bestindex].y.toFixed(precision) + this._series[bestindex].unit; //FIXME\r\n            }\r\n            let ssize = g.MeasureString(strValue, this._dataTracker.font, 10000);\r\n            let labelwidth = (ssize.width + 2 * this._dataTracker.padding + this._dataTracker.borderthickness);\r\n            let labelHeight = (ssize.height + 2 * this._dataTracker.padding + this._dataTracker.borderthickness);\r\n            if (dx > 0) {\r\n                g.FillRectangleXYHW(this._dataTracker.bgBrush, xx2, yy2 - (labelHeight >> 1), labelwidth, labelHeight);\r\n                g.DrawRectangleXYHW(this._dataTracker.pen, xx2, yy2 - (labelHeight >> 1), labelwidth, labelHeight);\r\n                g.DrawStringXY(strValue, this._dataTracker.font, this._dataTracker.font.brush, (xx2 + this._dataTracker.padding) >> 0, (yy2 - (labelHeight >> 1) + this._dataTracker.padding) >> 0);\r\n            }\r\n            else {\r\n                g.FillRectangleXYHW(this._dataTracker.bgBrush, xx2 - labelwidth, yy2 - (labelHeight >> 1), labelwidth, labelHeight);\r\n                g.DrawRectangleXYHW(this._dataTracker.pen, xx2 - labelwidth, yy2 - (labelHeight >> 1), labelwidth, labelHeight);\r\n                g.DrawStringXY(strValue, this._dataTracker.font, this.dataTracker.font.brush, (xx2 + this._dataTracker.padding - labelwidth) >> 0, (yy2 - (labelHeight >> 1) + this._dataTracker.padding) >> 0);\r\n            }\r\n        }\r\n    }\r\n    /*\r\n     *  XAxis scale)\r\n    {\r\n        if (!scale.visible) return;\r\n        double delta = scale.max - scale.min;\r\n        Double XZoom = (delta) / (w.Width - w.Lmargin - w.Rmargin);\r\n\r\n        for (int i = 0; i < scale.zones.Count; i++)\r\n            if (scale.zones[i].visible)\r\n            {\r\n                double max = scale.zones[i].max;\r\n                double min = scale.zones[i].min;\r\n                if (double.IsNaN(max)) max = scale.min;\r\n                if (double.IsNaN(min)) min = scale.max;\r\n                if (max < min) { double t = max; max = min; min = t; }\r\n                int x0 =  w.Lmargin + (int)Math.Round((min - scale.min) / XZoom);\r\n     *\r\n     * */\r\n    DrawMarkers(w, g, scaleX, viewPortWidth, viewPortHeight) {\r\n        if (this._xAxis.markers.length == 0)\r\n            return;\r\n        g.SetClip(new YDataRendering.YRectangle(w.Lmargin, w.Tmargin, w.Width - w.Rmargin - w.Lmargin, w.Height - w.Bmargin - w.Tmargin));\r\n        let Bottomleft = YGraph.ViewPortPointToIRL(w, new YDataRendering.Point(w.Lmargin, w.Height - w.Bmargin));\r\n        let TopRight = YGraph.ViewPortPointToIRL(w, new YDataRendering.Point(w.Width - w.Rmargin, w.Tmargin));\r\n        let dy = (w.Height - w.Bmargin - w.Tmargin) / 100.0;\r\n        let pixelSize = -1;\r\n        g.TextRenderingHint = YDataRendering.YTextRenderingHint.AntiAlias;\r\n        for (let i = 0; i < this._xAxis.markers.length; i++) {\r\n            if (this._xAxis.markers[i].enabled) {\r\n                if (pixelSize < 0)\r\n                    pixelSize = this.pixelxSize(this.mainViewPort, scaleX);\r\n                let mustdraw = true;\r\n                let xpos = 0;\r\n                if (this._xAxis.markers[i].timereference == TimeConverter.TimeReference.RELATIVE) {\r\n                    if (this._xAxis.zeroTime > 0) {\r\n                        xpos = this._xAxis.markers[i].xposition + this._xAxis.zeroTime;\r\n                    }\r\n                    else {\r\n                        mustdraw = false;\r\n                    }\r\n                }\r\n                else {\r\n                    xpos = this._xAxis.markers[i].xposition;\r\n                }\r\n                if ((xpos > Bottomleft.x - 100 * pixelSize) && (xpos < TopRight.x + 100 * pixelSize) && mustdraw) {\r\n                    let p = YGraph.IRLPointToViewPort(w, new pointXY(xpos, 0));\r\n                    let xxCenter = (p.X) >> 0;\r\n                    let yyCenter = (w.Height - w.Bmargin - (this._xAxis.markers[i].yposition * dy)) >> 0;\r\n                    let strValue = this._xAxis.markers[i].text.replace(\"\\\\n\", \"\\n\");\r\n                    let now = new Date();\r\n                    if (strValue.indexOf('$') >= 0) {\r\n                        if (strValue.indexOf(\"$MARKERTIME$\") >= 0) {\r\n                            // string s = _xAxis.markers[i].xpositionIsRelative ? _xAxis.markers[i].positionOnXAxis.toString()\r\n                            // : TimeToAutoSting(_xAxis.markers[i].xposition, mainViewPort, scaleX);\r\n                            let s = this._xAxis.markers[i].timereference == TimeConverter.TimeReference.RELATIVE ? TimeConverter.secTimeSpanToString(this._xAxis.markers[i].xposition, pixelSize)\r\n                                : this.TimeToAutoSting(this._xAxis.markers[i].xposition, this.mainViewPort, scaleX);\r\n                            strValue = strValue.replace(\"$MARKERTIME$\", s);\r\n                        }\r\n                        if (strValue.indexOf(\"$VALUE\") >= 0) {\r\n                            for (let j = 0; j < this._series.length; j++) {\r\n                                if (!this._series[j].disabled) {\r\n                                    let pt = this._series[j].findClosestValue(xpos, true);\r\n                                    let st = (pt != null) ? (pt.y).toFixed(0) : \"--\";\r\n                                    strValue = strValue.replace(\"$VALUE\" + (j + 1).toString() + \"$\", st);\r\n                                }\r\n                                else {\r\n                                    strValue = strValue.replace(\"$VALUE\" + (j + 1).toString() + \"$\", \"\");\r\n                                }\r\n                            }\r\n                        }\r\n                        if (strValue.indexOf(\"$UNIT\") >= 0) {\r\n                            for (let j = 0; j < this._series.length; j++) {\r\n                                if (!this._series[j].disabled) {\r\n                                    strValue = strValue.replace(\"$UNIT\" + (j + 1).toString() + \"$\", this._series[j].unit);\r\n                                }\r\n                                else {\r\n                                    strValue = strValue.replace(\"$UNIT\" + (j + 1).toString() + \"$\", \"\");\r\n                                }\r\n                            }\r\n                        }\r\n                        if (strValue.indexOf(\"$LEGEND\") >= 0) {\r\n                            for (let j = 0; j < this._series.length; j++) {\r\n                                if (!this._series[j].disabled) {\r\n                                    strValue = strValue.replace(\"$LEGEND\" + (j + 1).toString() + \"$\", this._series[j].legend);\r\n                                }\r\n                                else {\r\n                                    strValue = strValue.replace(\"$LEGEND\" + (j + 1).toString() + \"$\", \"\");\r\n                                }\r\n                            }\r\n                        }\r\n                        if (this._xAxis.markers[i].PatchTextCallback != null) {\r\n                            strValue = this._xAxis.markers[i].PatchTextCallback(strValue);\r\n                        }\r\n                    }\r\n                    let ssize = g.MeasureString(strValue, this._xAxis.markers[i].font, 10000);\r\n                    let labelWidth = (ssize.width + 2 * this._xAxis.markers[i].padding + this._xAxis.markers[i].borderthickness);\r\n                    let labelHeight = (ssize.height + 2 * this._xAxis.markers[i].padding + this._xAxis.markers[i].borderthickness);\r\n                    g.FillRectangleXYHW(this._xAxis.markers[i].bgBrush, xxCenter - (labelWidth >> 1), yyCenter - (labelHeight >> 1), labelWidth >> 0, labelHeight >> 0);\r\n                    g.DrawRectangleXYHW(this._xAxis.markers[i].pen, xxCenter - (labelWidth >> 1), yyCenter - (labelHeight >> 1), labelWidth >> 0, labelHeight >> 0);\r\n                    let xText;\r\n                    switch (this._xAxis.markers[i].textAlign) {\r\n                        case Marker.TextAlign.LEFT:\r\n                            xText = xxCenter - (labelWidth >> 1) + this._xAxis.markers[i].padding;\r\n                            break;\r\n                        case Marker.TextAlign.RIGHT:\r\n                            xText = xxCenter + (labelWidth >> 1) - this._xAxis.markers[i].padding;\r\n                            break;\r\n                        default:\r\n                            xText = xxCenter;\r\n                            break;\r\n                    }\r\n                    g.DrawStringPF(strValue, this._xAxis.markers[i].font, this._xAxis.markers[i].font.brush, new YDataRendering.PointF(xText, yyCenter), this._xAxis.markers[i].stringFormat);\r\n                    g.DrawLineXY(this._xAxis.markers[i].pen, xxCenter, (w.Tmargin) >> 0, xxCenter, yyCenter - (labelHeight >> 1));\r\n                    g.DrawLineXY(this._xAxis.markers[i].pen, xxCenter, yyCenter + (labelHeight >> 1), xxCenter, (w.Height - w.Bmargin) >> 0);\r\n                    if (this._xAxis.markers[i].arrowSize > 0) {\r\n                        if (this._xAxis.markers[i].yposition > 25) {\r\n                            let triangle = [\r\n                                new YDataRendering.PointF((xxCenter - this._xAxis.markers[i].arrowSize), (yyCenter + (labelHeight >> 1))),\r\n                                new YDataRendering.PointF((xxCenter + this._xAxis.markers[i].arrowSize), (yyCenter + (labelHeight >> 1))),\r\n                                new YDataRendering.PointF(xxCenter, ((yyCenter + (labelHeight >> 1) + this._xAxis.markers[i].arrowSize)))\r\n                            ];\r\n                            g.FillPolygon(this._xAxis.markers[i].arrowBrush, triangle);\r\n                        }\r\n                        if (this._xAxis.markers[i].yposition < 75) {\r\n                            let triangle = [\r\n                                new YDataRendering.PointF((xxCenter - this._xAxis.markers[i].arrowSize), (yyCenter + (labelHeight >> 1))),\r\n                                new YDataRendering.PointF((xxCenter + this._xAxis.markers[i].arrowSize), (yyCenter + (labelHeight >> 1))),\r\n                                new YDataRendering.PointF(xxCenter, ((yyCenter - (labelHeight >> 1) - this._xAxis.markers[i].arrowSize)))\r\n                            ];\r\n                            g.FillPolygon(this._xAxis.markers[i].arrowBrush, triangle);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        g.ResetClip();\r\n    }\r\n    DrawDataPanels(w, g, scaleX, scalesY, viewPortWidth, viewPortHeight) {\r\n        if (this._dataPanels.length == 0)\r\n            return;\r\n        g.SetClip(new YDataRendering.YRectangle(w.Lmargin, w.Tmargin, w.Width - w.Rmargin - w.Lmargin, w.Height - w.Bmargin - w.Tmargin));\r\n        for (let i = 0; i < this._dataPanels.length; i++) {\r\n            if (this._dataPanels[i].enabled) {\r\n                let p = this._dataPanels[i];\r\n                if (p.yScaleIndex < scalesY.length) {\r\n                    let AvailableWidth = w.Width - 2 * p.padding - p.borderthickness;\r\n                    if (AvailableWidth < 100)\r\n                        AvailableWidth = 100;\r\n                    let ssize = g.MeasureString(p.text, p.font, AvailableWidth >> 0);\r\n                    let panelWidth = ssize.width + 2 * p.padding + p.borderthickness;\r\n                    let panelHeight = ssize.height + 2 * p.padding + p.borderthickness;\r\n                    let x = 0;\r\n                    switch (p.horizontalPosition) {\r\n                        case DataPanel.HorizontalPosition.LEFTBORDER:\r\n                            x = w.Lmargin;\r\n                            break;\r\n                        case DataPanel.HorizontalPosition.RIGHTBORDER:\r\n                            x = w.Width - w.Rmargin;\r\n                            break;\r\n                        case DataPanel.HorizontalPosition.ABSOLUTEX:\r\n                            let delta = scaleX.max - scaleX.min;\r\n                            let XZoom = (delta) / (w.Width - w.Lmargin - w.Rmargin);\r\n                            x = w.Lmargin + Math.round((p.AbsoluteXposition - scaleX.min) / XZoom) >> 0;\r\n                            break;\r\n                    }\r\n                    let y = 0;\r\n                    switch (p.verticalPosition) {\r\n                        case DataPanel.VerticalPosition.TOPBORDER:\r\n                            y = w.Tmargin;\r\n                            break;\r\n                        case DataPanel.VerticalPosition.BOTTOMBORDER:\r\n                            y = w.Height - w.Bmargin;\r\n                            break;\r\n                        case DataPanel.VerticalPosition.ABSOLUTEY:\r\n                            y = w.Height - w.Bmargin - Math.round((p.AbsoluteYposition - scalesY[p.yScaleIndex].IRLy) * scalesY[p.yScaleIndex].zoom) >> 0;\r\n                            break;\r\n                    }\r\n                    switch (p.panelHrzAlign) {\r\n                        case DataPanel.HorizontalAlign.LEFTOF:\r\n                            x -= panelWidth + p.horizontalMargin;\r\n                            break;\r\n                        case DataPanel.HorizontalAlign.RIGHTOF:\r\n                            x += p.horizontalMargin;\r\n                            break;\r\n                        default:\r\n                            x -= (panelWidth) / 2;\r\n                            break;\r\n                    }\r\n                    switch (p.panelVrtAlign) {\r\n                        case DataPanel.VerticalAlign.ABOVE:\r\n                            y -= panelHeight + p.verticalMargin;\r\n                            break;\r\n                        case DataPanel.VerticalAlign.BELOW:\r\n                            y += p.verticalMargin;\r\n                            break;\r\n                        default:\r\n                            y -= (panelHeight) / 2;\r\n                            break;\r\n                    }\r\n                    g.FillRectangleXYHW(p.bgBrush, x >> 0, y >> 0, panelWidth >> 0, panelHeight >> 0);\r\n                    if (p.borderthickness > 0)\r\n                        g.DrawRectangleXYHW(p.pen, x >> 0, y >> 0, panelWidth >> 0, panelHeight >> 0);\r\n                    let sf = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\r\n                    switch (p.panelTextAlign) {\r\n                        case YDataRendering.MessagePanel.TextAlign.LEFT:\r\n                            sf.LineAlignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\r\n                            sf.Alignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\r\n                            break;\r\n                        case YDataRendering.MessagePanel.TextAlign.RIGHT:\r\n                            sf.LineAlignment = 2 /* YDataRendering.YStringFormat.StringAlignment.Far */;\r\n                            sf.Alignment = 2 /* YDataRendering.YStringFormat.StringAlignment.Far */;\r\n                            break;\r\n                        default:\r\n                            sf.LineAlignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\r\n                            sf.Alignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\r\n                            break;\r\n                    }\r\n                    let rect = new YDataRendering.YRectangle((x + p.padding + p.borderthickness / 2) >> 0, (y + p.padding + p.borderthickness / 2) >> 0, ssize.width >>= +1, (ssize.height >> 0) + 1);\r\n                    g.DrawStringRect(p.text, p.font, p.font.brush, rect, sf);\r\n                }\r\n                else {\r\n                    throw new RangeError(\"Cannot renderer data panel #\" + i.toString() + \", no such Y axis\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Render(g, UIw, UIh) {\r\n        if ((UIw < 50) || (UIh < 50))\r\n            return 0; // too small size is likely to cause endless loops\r\n        //#ifdef PROFILING\r\n        //        let RenderTime :number = performance.now();\r\n        ////#endif\r\n        let lastLmargin = this.mainViewPort.Lmargin;\r\n        let lastRmargin = this.mainViewPort.Rmargin;\r\n        this.mainViewPort.Width = UIw;\r\n        this.mainViewPort.Height = UIh;\r\n        this.mainViewPort.Lmargin = 0;\r\n        this.mainViewPort.Rmargin = 0;\r\n        g.SmoothingMode = YDataRendering.YSmoothingMode.HighQuality;\r\n        let yMarginOffset = 5;\r\n        /* Step 1, found out margins */\r\n        // top (bottom) margin: make sure the top(/bottom) number\r\n        // on Y scale can be draw completely\r\n        for (let i = 0; i < this._yAxes.length; i++) {\r\n            if (this._yAxes[i].visible) {\r\n                let s = g.MeasureString(\"8\", this._yAxes[i].font, 100000);\r\n                let o = ((s.height + 1) / 2) >> 0;\r\n                if (yMarginOffset < o)\r\n                    yMarginOffset = o;\r\n            }\r\n        }\r\n        this.mainViewPort.Tmargin = (this._xAxis.position == XAxis.VrtPosition.TOP) ? 0 : yMarginOffset;\r\n        this.mainViewPort.Bmargin = (this._xAxis.position == XAxis.VrtPosition.BOTTOM) ? 0 : yMarginOffset;\r\n        /* Step 2B-2  Draw Legend if it doesn't overlap the data */\r\n        if (!this._legendPanel.overlap)\r\n            this.drawLegendPanel(g, UIw, UIh, this.mainViewPort);\r\n        /* Step 2B-3  Draw annotations if it doesn't overlap the data */\r\n        this.drawAnnotationPanels(g, this._annotationPanels, UIw, UIh, false, this.mainViewPort);\r\n        if (this.mainViewPort.Bmargin == 0)\r\n            this.mainViewPort.Bmargin = 5;\r\n        if (this.mainViewPort.Tmargin == 0)\r\n            this.mainViewPort.Tmargin = 5;\r\n        /* Step 1-A  compute margins dues to X axis  */\r\n        let h = this.DrawXAxis(this.mainViewPort, g, this._xAxis, true);\r\n        if (this._xAxis.position == XAxis.VrtPosition.TOP)\r\n            this.mainViewPort.Tmargin += h;\r\n        else\r\n            this.mainViewPort.Bmargin += h;\r\n        this.mainViewPort.IRLx = this._xAxis.min;\r\n        /* Step 1-B  Find out all Y axis  start / stop  graduation spacing  */\r\n        let M;\r\n        for (let i = 0; i < this._yAxes.length; i++) {\r\n            M = MinMaxHandler.DefaultValue();\r\n            for (let k = 0; k < this._series.length; k++) {\r\n                if ((this._series[k].yAxisIndex == i) && (!this._series[k].disabled)) {\r\n                    for (let j = 0; j < this._series[k].segments.length; j++) {\r\n                        M = MinMaxHandler.Combine(M, YGraph.FindMinMax(this._xAxis.min, this._xAxis.max, this._series[k].segments[j].data, this._series[k].segments[j].count));\r\n                    }\r\n                }\r\n            }\r\n            this._yAxes[i].computeStartAndStep(M);\r\n        }\r\n        /* Step 1-B  compute  margins dues to Y axes  */\r\n        if (this.mainViewPort.Lmargin == 0)\r\n            this.mainViewPort.Lmargin = 5;\r\n        if (this.mainViewPort.Rmargin == 0)\r\n            this.mainViewPort.Rmargin = 5;\r\n        for (let i = 0; i < this._yAxes.length; i++) {\r\n            let sw = YGraph.DrawYAxis(this.mainViewPort, g, this._yAxes[i], 0, true);\r\n            this.mainViewPort.Lmargin += (this._yAxes[i].position == YAxis.HrzPosition.LEFT) ? sw : 0;\r\n            this.mainViewPort.Rmargin += (this._yAxes[i].position == YAxis.HrzPosition.RIGHT) ? sw : 0;\r\n        }\r\n        if (this._navigator.enabled) {\r\n            if ((lastLmargin != this.mainViewPort.Lmargin) || (lastRmargin != this.mainViewPort.Rmargin)) {\r\n                //console.log(\"L/R margin changed\");\r\n                this.navigatorCache = null;\r\n            }\r\n            let nh = (this._navigator.relativeheight * this.UIContainer.height / 100.0) >> 0;\r\n            let ofset = this.xAxis.position == XAxis.VrtPosition.BOTTOM ? h : 0;\r\n            this._navigator.setPosition(UIw, UIh, this.mainViewPort.Lmargin, this.mainViewPort.Rmargin, this.mainViewPort.Height - nh - this.mainViewPort.Bmargin + ofset, this.mainViewPort.Bmargin - ofset);\r\n            this.mainViewPort.Bmargin += nh;\r\n        }\r\n        /* step 2A draw background */\r\n        if ((this.lastTopMargin != this.mainViewPort.Tmargin) || (this.lastBottomMargin != this.mainViewPort.Bmargin)) {\r\n            this._bgBrush = null;\r\n            this.lastTopMargin = this.mainViewPort.Tmargin;\r\n            this.lastBottomMargin = this.mainViewPort.Bmargin;\r\n        }\r\n        if (this._bgBrush == null) {\r\n            this._bgBrush = new YDataRendering.YLinearGradientBrush(this._bgColor2, this._bgColor1);\r\n        } // not sure why colors had to be inverted here\r\n        g.FillRectangleXYHW(this._bgBrush, this.mainViewPort.Lmargin, this.mainViewPort.Tmargin, this.mainViewPort.Width - this.mainViewPort.Rmargin - this.mainViewPort.Lmargin, this.mainViewPort.Height - this.mainViewPort.Bmargin - this.mainViewPort.Tmargin);\r\n        if (this._borderThickness > 0) {\r\n            if (this._borderPen == null)\r\n                this._borderPen = new YDataRendering.YPen(this._borderColor, this._borderThickness);\r\n            g.DrawRectangleXYHW(this._borderPen, this.mainViewPort.Lmargin, this.mainViewPort.Tmargin, this.mainViewPort.Width - this.mainViewPort.Rmargin - this.mainViewPort.Lmargin, this.mainViewPort.Height - this.mainViewPort.Bmargin - this.mainViewPort.Tmargin);\r\n        }\r\n        /* Step 2B  Draw Y-axes and X axis zones */\r\n        g.SetClip(new YDataRendering.YRectangle(this.mainViewPort.Lmargin, this.mainViewPort.Tmargin, this.mainViewPort.Width - this.mainViewPort.Rmargin - this.mainViewPort.Lmargin, this.mainViewPort.Height - this.mainViewPort.Bmargin - this.mainViewPort.Tmargin));\r\n        for (let i = 0; i < this._yAxes.length; i++) {\r\n            this.DrawYAxisZones(this.mainViewPort, g, this._yAxes[i]);\r\n        }\r\n        this.DrawXAxisZones(this.mainViewPort, g, this.xAxis);\r\n        g.ResetClip();\r\n        /* step 3 draw X scale */\r\n        this.DrawXAxis(this.mainViewPort, g, this._xAxis, false);\r\n        /* step 4 draw Y scale */\r\n        let leftOffset = 0;\r\n        let rightOffset = 0;\r\n        //YDataRendering.YDataRenderer.RendererDebug = true;\r\n        for (let i = 0; i < this._yAxes.length; i++) {\r\n            let ww = YGraph.DrawYAxis(this.mainViewPort, g, this._yAxes[i], (this._yAxes[i].position == YAxis.HrzPosition.LEFT) ? leftOffset : rightOffset, false);\r\n            if (this._yAxes[i].position == YAxis.HrzPosition.LEFT)\r\n                leftOffset += ww;\r\n            if (this._yAxes[i].position == YAxis.HrzPosition.RIGHT)\r\n                rightOffset += ww;\r\n        }\r\n        //YDataRendering.YDataRenderer.RendererDebug = false;\r\n        // step 5 step define data zone\r\n        //  YDataRendering.YPen mypenb = Pens.Black;\r\n        //g.DrawRectangle(mypenb, ViewPort1.Lmargin, ViewPort1.Tmargin, ViewPort1.Width - ViewPort1.Rmargin - ViewPort1.Lmargin, ViewPort1.Height - ViewPort1.Bmargin - ViewPort1.Tmargin);\r\n        g.SetClip(new YDataRendering.YRectangle(this.mainViewPort.Lmargin, this.mainViewPort.Tmargin, this.mainViewPort.Width - this.mainViewPort.Rmargin - this.mainViewPort.Lmargin, this.mainViewPort.Height - this.mainViewPort.Bmargin - this.mainViewPort.Tmargin));\r\n        // step 6 series rendering\r\n        this.mainViewPort.zoomx = (this.mainViewPort.Width - this.mainViewPort.Lmargin - this.mainViewPort.Rmargin) / (this._xAxis.max - this._xAxis.min);\r\n        let mypenb = null;\r\n        let lineCount = 0;\r\n        let pointCount = 0;\r\n        let Bottomleft = YGraph.ViewPortPointToIRL(this.mainViewPort, new YDataRendering.Point(this.mainViewPort.Lmargin, this.mainViewPort.Height - this.mainViewPort.Bmargin));\r\n        let TopRight = YGraph.ViewPortPointToIRL(this.mainViewPort, new YDataRendering.Point(this.mainViewPort.Width - this.mainViewPort.Rmargin, this.mainViewPort.Tmargin));\r\n        let xTimeStart = Bottomleft.x;\r\n        let xTimeEnd = TopRight.x;\r\n        for (let k = 0; k < this._series.length; k++) {\r\n            if ((this._series[k].visible) && !(this._series[k].disabled)) { //#ifdef PROFILING\r\n                //                let perf : number  = performance.now();\r\n                //                //#endif\r\n                let scaleIndex = this._series[k].yAxisIndex;\r\n                mypenb = this._series[k].pen;\r\n                this.mainViewPort.IRLy = this._yAxes[scaleIndex].startStopStep.dataMin;\r\n                this._yAxes[this._series[k].yAxisIndex].IRLy = this.mainViewPort.IRLy;\r\n                let delta = this._yAxes[scaleIndex].startStopStep.dataMax - this._yAxes[scaleIndex].startStopStep.dataMin;\r\n                if (delta == 0) {\r\n                    delta = 1;\r\n                    this.mainViewPort.IRLy -= delta / 2;\r\n                }\r\n                this.mainViewPort.zoomy = (this.mainViewPort.Height - this.mainViewPort.Tmargin - this.mainViewPort.Bmargin) / (delta);\r\n                this._yAxes[this._series[k].yAxisIndex].zoom = this.mainViewPort.zoomy;\r\n                g.comment(\"** main view-port series \" + k.toString());\r\n                for (let i = 0; i < this._series[k].segments.length; i++) {\r\n                    lineCount += YGraph.DoSegmentRendering(this.mainViewPort, g, mypenb, this._series[k].segments[i].data, this._series[k].segments[i].count, xTimeStart, xTimeEnd);\r\n                    pointCount += this._series[k].segments[i].count;\r\n                }\r\n                //#ifdef PROFILING\r\n                //                console.log(\"Serie \"+k+\" rendering took  \"+(performance.now()-perf).toString()+\"ms (\"+this._series[k].segments.length+\" segments)\");\r\n                //                //#endif\r\n            }\r\n        }\r\n        // step 7  draw  navigator\r\n        g.ResetClip();\r\n        if (this._navigator.enabled) { //#ifdef PROFILING\r\n            //            let ntime :number =  performance.now();\r\n            //            //#endif\r\n            g.comment(\"** navigator **\");\r\n            let v = this._navigator.viewport;\r\n            // step 7A, find out Time Range\r\n            let range = MinMaxHandler.DefaultValue();\r\n            for (let i = 0; i < this._series.length; i++) {\r\n                if (!this._series[i].disabled)\r\n                    range = MinMaxHandler.Combine(range, this._series[i].timeRange);\r\n            }\r\n            this._navigator.Xrange = MinMaxHandler.extend(range, 1.05);\r\n            v.zoomx = (v.Width - v.Lmargin - v.Rmargin) / (this._navigator.Xrange.Max - this._navigator.Xrange.Min);\r\n            if (((this.lastPointCount != pointCount)\r\n                && (!this.mainViewPort.Capture) && (!this._navigator.Capture)) // performance : do not redraw navigator when a drag operation is running.\r\n                || (this.navigatorCache == null) || (g instanceof YDataRendering.YGraphicsSVG)) {\r\n                g.comment(\"Redraw navigator\");\r\n                if (this.navigatorCache != null)\r\n                    this.navigatorCache = null; //.Dispose();\r\n                this.navigatorCache = document.createElement('canvas'); //  new HTMLCanvasElement(); //v.Width, v.Height, g.graphics); FIXME?\r\n                //document.body.appendChild(this.navigatorCache); // debug\r\n                this.navigatorCache.width = v.Width;\r\n                this.navigatorCache.height = v.Height;\r\n                this.lastPointCount = pointCount;\r\n                let ng;\r\n                if (g instanceof YDataRendering.YGraphicsSVG) {\r\n                    ng = g;\r\n                }\r\n                else {\r\n                    ng = new YDataRendering.YGraphics(this.navigatorCache, v.Width, v.Height, 90);\r\n                }\r\n                //ng.SetClip(new Rectangle(v.Lmargin, v.Tmargin, v.Width - v.Rmargin - v.Lmargin, v.Height - v.Bmargin - v.Tmargin));\r\n                //ng.ResetClip();\r\n                ng.FillRectangleXYHW(this._navigator.bgBrush, v.Lmargin, v.Tmargin, v.Width - v.Rmargin - v.Lmargin, v.Height - v.Bmargin - v.Tmargin);\r\n                if ((this.xAxis.zones.length > 0) && this._navigator.showXAxisZones) {\r\n                    let delta = this._navigator.Xrange.Max - this._navigator.Xrange.Min;\r\n                    let XZoom = (delta) / (v.Width - v.Lmargin - v.Rmargin);\r\n                    for (let i = 0; i < this.xAxis.zones.length; i++) {\r\n                        if (this.xAxis.zones[i].visible) {\r\n                            let min = this.xAxis.zones[i].min;\r\n                            let max = this.xAxis.zones[i].max;\r\n                            if (isNaN(min))\r\n                                min = this._navigator.Xrange.Min;\r\n                            if (isNaN(max))\r\n                                max = this._navigator.Xrange.Max;\r\n                            ng.FillRectangleXYHW(this.xAxis.zones[i].zoneBrush, v.Lmargin + ((min - this._navigator.Xrange.Min) / XZoom) >> 0, v.Tmargin >> 0, ((max - min) / XZoom) >> 0, v.Height - v.Bmargin - v.Tmargin);\r\n                        }\r\n                    }\r\n                }\r\n                if ((MinMaxHandler.isDefined(this._navigator.Xrange)) && ((this._navigator.Xrange.Max - this._navigator.Xrange.Min) > 0)) // if (Xrange<=0) then nothing to draw\r\n                 { // step 7B, draw series\r\n                    let Min;\r\n                    let Max;\r\n                    v.IRLx = this._navigator.Xrange.Min;\r\n                    let dontSticktoBorderZoom = 4.0 / (v.Height - v.Bmargin - v.Tmargin);\r\n                    let Bottomleft = YGraph.ViewPortPointToIRL(v, new YDataRendering.Point(v.Lmargin, v.Height - v.Bmargin));\r\n                    let TopRight = YGraph.ViewPortPointToIRL(v, new YDataRendering.Point(v.Width - v.Rmargin, v.Tmargin));\r\n                    let xTimeStart = Bottomleft.x;\r\n                    let xTimeEnd = TopRight.x;\r\n                    if (this._navigator.yAxisHandling == Navigator.YAxisHandling.AUTO) { // Automatic yAxis handling\r\n                        for (let k = 0; k < this._series.length; k++) {\r\n                            if (!this._series[k].disabled) {\r\n                                ng.comment(\"** navigator series \" + k.toString());\r\n                                v.IRLy = this._series[k].valueRange.Min;\r\n                                let yAxisIndex = this._series[k].yAxisIndex;\r\n                                mypenb = this._series[k].navigatorpen;\r\n                                Min = this._series[k].valueRange.Min;\r\n                                Max = this._series[k].valueRange.Max;\r\n                                if (Max - Min <= 0) {\r\n                                    v.IRLy = Min - 0.5;\r\n                                    Max = Min + 0.5;\r\n                                }\r\n                                else {\r\n                                    let delta = Max - Min;\r\n                                    Min -= delta * dontSticktoBorderZoom; // 0.025;\r\n                                    Max += delta * dontSticktoBorderZoom; // 0.025;\r\n                                }\r\n                                v.IRLy = Min;\r\n                                v.zoomy = (v.Height - v.Tmargin - v.Bmargin) / (Max - Min);\r\n                                for (let i = 0; i < this._series[k].segments.length; i++) {\r\n                                    lineCount += YGraph.DoSegmentRendering(v, ng, mypenb, this._series[k].segments[i].data, this._series[k].segments[i].count, xTimeStart, xTimeEnd);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else { //  yAxis handling inherited from main view-port settings\r\n                        for (let i = 0; i < this._yAxes.length; i++) { // find out data MinMax\r\n                            let Yrange = MinMaxHandler.DefaultValue();\r\n                            for (let j = 0; j < this._series.length; j++) {\r\n                                if ((this._series[j].yAxisIndex == i) && (!this._series[j].disabled)) {\r\n                                    Yrange = MinMaxHandler.Combine(Yrange, this._series[j].valueRange);\r\n                                }\r\n                            }\r\n                            Yrange = MinMaxHandler.extend(Yrange, 1 + 2 * dontSticktoBorderZoom);\r\n                            Min = this._yAxes[i].min;\r\n                            if (isNaN(Min))\r\n                                Min = Yrange.Min;\r\n                            Max = this._yAxes[i].max;\r\n                            if (isNaN(Max))\r\n                                Max = Yrange.Max;\r\n                            if (Number.isNaN(Min)) {\r\n                                Min = 0.0;\r\n                                Max = 1.0;\r\n                            }\r\n                            if (Max - Min <= 0) {\r\n                                Min = Min - 0.5;\r\n                                Max = Min + 0.5;\r\n                            }\r\n                            v.IRLy = Min;\r\n                            v.zoomy = (v.Height - v.Tmargin - v.Bmargin) / (Max - Min);\r\n                            for (let j = 0; j < this._series.length; j++) {\r\n                                if ((this._series[j].yAxisIndex == i) && (!this._series[j].disabled) && (this._series[j].visible)) {\r\n                                    ng.comment(\"** navigator series \" + j.toString());\r\n                                    mypenb = this._series[j].navigatorpen;\r\n                                    for (let k = 0; k < this._series[j].segments.length; k++) {\r\n                                        lineCount += YGraph.DoSegmentRendering(v, ng, mypenb, this._series[j].segments[k].data, this._series[j].segments[k].count, xTimeStart, xTimeEnd);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    for (let i = 0; i < this._xAxis.markers.length; i++) {\r\n                        if (this._xAxis.markers[i].enabled) {\r\n                            let p = YGraph.IRLPointToViewPort(v, new pointXY(this._xAxis.markers[i].xposition + (this._xAxis.markers[i].timereference == TimeConverter.TimeReference.RELATIVE ? this._xAxis.zeroTime : 0), 0));\r\n                            ng.DrawLineXY(this._xAxis.markers[i].navigatorpen, p.X, v.Tmargin, p.X, v.Height - v.Bmargin);\r\n                        }\r\n                    }\r\n                    if (this._navigator.borderThickness > 0) {\r\n                        ng.DrawLineXY(this._navigator.borderPen, v.Lmargin, v.Tmargin, v.Width - v.Rmargin, v.Tmargin);\r\n                    }\r\n                    // step 7C, draw Scale\r\n                    this.DrawMonitorXAxis(v, ng, this._navigator.Xrange, this.xAxis.labelFormat);\r\n                    this._navigator.setIRLPosition(v.IRLx, v.IRLy, v.zoomx, v.zoomy);\r\n                }\r\n                if (!(g instanceof YDataRendering.YGraphicsSVG))\r\n                    ng.Dispose();\r\n            }\r\n            // set  7E, copy cache to display\r\n            let cacheW = v.Width - v.Rmargin - v.Lmargin + 1;\r\n            let cacheH = v.Width - v.Rmargin - v.Lmargin + 1;\r\n            let rectsrc = new YDataRendering.YRectangle(v.Lmargin, v.Tmargin - 1, cacheW, cacheH);\r\n            let rectdst = new YDataRendering.YRectangle(v.Lmargin, v.Tmargin, cacheW, cacheH);\r\n            g.SetClip(rectdst);\r\n            if (!(g instanceof YDataRendering.YGraphicsSVG)) {\r\n                //g.SetClip(rect);\r\n                //let  p : YDataRendering.YPen = new YDataRendering.YPen( YDataRendering.YColor.Blue,1);\r\n                //g.DrawLineXY(p,0,0,this.UIContainer.width,this.UIContainer.height);\r\n                //g.DrawLineXY(p,this.UIContainer.width,0,0,this.UIContainer.height);\r\n                g.DrawImage(this.navigatorCache, rectsrc, rectdst, 2 /* YDataRendering.YGraphicsUnit.Pixel */);\r\n                // g.ResetClip();\r\n            }\r\n            //navigatorCache.Save(\"C:\\\\tmp\\\\t.png\", ImageFormat.Png);\r\n            // set  7E, draw Cursor\r\n            if (this._navigator.borderThickness > 0) {\r\n                g.DrawLineXY(this._navigator.borderPen, v.Lmargin + 1, v.Tmargin, v.Lmargin + 1, v.Height - v.Bmargin - 1);\r\n                g.DrawLineXY(this._navigator.borderPen, v.Width - v.Rmargin, v.Tmargin, v.Width - v.Rmargin, v.Height - v.Bmargin - 1);\r\n                g.DrawLineXY(this._navigator.borderPen, v.Lmargin + 1, v.Tmargin, v.Width - v.Rmargin, v.Tmargin);\r\n            }\r\n            let IRLCursorStart = YGraph.ViewPortPointToIRL(this.mainViewPort, new YDataRendering.Point(this.mainViewPort.Lmargin, 0));\r\n            let IRLCursorEnd = YGraph.ViewPortPointToIRL(this.mainViewPort, new YDataRendering.Point(this.mainViewPort.Width - this.mainViewPort.Rmargin, 0));\r\n            let CursorStart = YGraph.IRLPointToViewPort(this._navigator.viewport, new pointXY(IRLCursorStart.x, 0));\r\n            let CursorEnd = YGraph.IRLPointToViewPort(this._navigator.viewport, new pointXY(IRLCursorEnd.x, 0));\r\n            g.FillRectangle(this._navigator.cursorBrush, new YDataRendering.YRectangle(CursorStart.X - 1, v.Tmargin, CursorEnd.X - CursorStart.X + 2, v.Height - v.Bmargin - v.Tmargin - 1));\r\n            g.DrawLineXY(this._navigator.cursorBorderPen, (CursorStart.X - 1) >> 0, (v.Tmargin) >> 0, (CursorStart.X - 1) >> 0, (v.Height - v.Bmargin) - 1);\r\n            g.DrawLineXY(this._navigator.cursorBorderPen, (CursorEnd.X + 1) >> 0, (v.Tmargin) >> 0, (CursorEnd.X + 1) >> 0, (v.Height - v.Bmargin) - 1);\r\n            g.ResetClip();\r\n            //#ifdef PROFILING\r\n            //            console.log(\"Navigator rendering took \"+(performance.now()-ntime).toString()+\"ms\")\r\n            //            //#endif\r\n        }\r\n        if (this._legendPanel.overlap)\r\n            this.drawLegendPanel(g, UIw, UIh, this.mainViewPort);\r\n        g.TextRenderingHint = YDataRendering.YTextRenderingHint.SingleBitPerPixelGridFit;\r\n        this.DrawMarkers(this.mainViewPort, g, this.xAxis, UIw, UIh);\r\n        this.drawAnnotationPanels(g, this._annotationPanels, UIw, UIh, true, this.mainViewPort);\r\n        this.DrawDataPanels(this.mainViewPort, g, this.xAxis, this._yAxes, UIw, UIh);\r\n        this.DrawDataTracker(g, UIw, UIh, this.xAxis);\r\n        this.DrawMessagePanels(g, UIw, UIh);\r\n        /*\r\n                let p: YDataRendering.Point | null = this.mouseLocalPosition();\r\n                 if (p != null)\r\n                 {    let pen = new YPen(YColor.Red, 1);\r\n                     g.DrawLineXY(pen, p.X - 5, p.Y, p.X + 5, p.Y);\r\n                     g.DrawLineXY(pen, p.X, p.Y - 5, p.X, p.Y + 5);\r\n                 }\r\n        */\r\n        //console.log(\"END OF GRAPH\")\r\n        //#ifdef PROFILING\r\n        //\r\n        //        console.log(\"graph rendering took \"+ ( performance.now()-RenderTime ).toString()+\"ms\");\r\n        //        //#endif\r\n        return 0;\r\n    }\r\n    KeyDown(sender, e) {\r\n        if (e.code == \"ArrowLeft\") {\r\n            let delta = 0.2 * (this._xAxis.max - this._xAxis.min);\r\n            this._xAxis.set_minMax(this._xAxis.min - delta, this._xAxis.max - delta);\r\n            this.redraw();\r\n        }\r\n        if (e.code == \"ArrowRight\") {\r\n            let delta = 0.2 * (this._xAxis.max - this._xAxis.min);\r\n            this._xAxis.set_minMax(this._xAxis.min + delta, this._xAxis.max + delta);\r\n            this.redraw();\r\n        }\r\n        if (e.code == \"ArrowUp\") {\r\n            this.mouseWheel(new YDataRendering.Point(this.UIContainer.width >> 1, this.UIContainer.height >> 1), 10);\r\n        }\r\n        if (e.code == \"ArrowDown\") {\r\n            this.mouseWheel(new YDataRendering.Point(this.UIContainer.width >> 1, this.UIContainer.height >> 1), -10);\r\n        }\r\n    }\r\n    mouseWheel(pos, delta) {\r\n        let ZoomFactor = Math.pow(1.25, delta / 120); // 120 is totally arbitrary\r\n        let NextZoomX = this.mainViewPort.zoomx * ZoomFactor;\r\n        if ((NextZoomX > this.mainViewPort.zoomx) && (NextZoomX > 1000))\r\n            return;\r\n        let currentRange = this._xAxis.max - this._xAxis.min;\r\n        if ((currentRange / ZoomFactor) > 25 * 365.0 * 86400.0)\r\n            return; //  more zoom out may cause overflows, never-ending loops and freeze the browser\r\n        this.mainViewPort.IRLx += ((pos.X - this.mainViewPort.Lmargin) / this.mainViewPort.zoomx) - ((pos.X - this.mainViewPort.Lmargin) / NextZoomX);\r\n        let range = this._xAxis.max - this._xAxis.min;\r\n        this._xAxis.set_minMax(this.mainViewPort.IRLx, this.mainViewPort.IRLx + range / ZoomFactor);\r\n        this.mainViewPort.zoomx = NextZoomX;\r\n        this.redraw();\r\n    }\r\n    mouseWheelEvent(sender, e) {\r\n        let p = this.Scr2ElmMatrix.multiplyByV(YDataRendering.Vector3.FromXYCoord(e.pageX, e.pageY)).toPoint();\r\n        let eX = p.X;\r\n        let eY = p.Y;\r\n        this.mouseWheel(new YDataRendering.Point(eX, eY), e.deltaY > 0 ? -150 : 150);\r\n        e.preventDefault();\r\n    }\r\n}\r\nYGraph._defaultVerticalDragZoomEnabled = false;\r\nYGraph.captureCursor = null;\r\n", "/*\r\n*   Yocto-Visualization (for web), a free web-based application\r\n*   to visualize Yoctopuce Sensors.\r\n*\r\n*  Solid gauge widget renderer\r\n*\r\n*   - - - - - - - - - License information: - - - - - - - - -\r\n*\r\n*  Copyright (C) 2021 and beyond by Yoctopuce Sarl, Switzerland.\r\n*\r\n*  Yoctopuce Sarl (hereafter Licensor) grants to you a perpetual\r\n*  non-exclusive license to use, modify, copy and integrate this\r\n*  file into your software for the sole purpose of interfacing\r\n*  with Yoctopuce products.\r\n*\r\n*  You may reproduce and distribute copies of this file in\r\n*  source or object form, as long as the sole purpose of this\r\n*  code is to interface with Yoctopuce products. You must retain\r\n*  this notice in the distributed source file.\r\n*\r\n*  You should refer to Yoctopuce General Terms and Conditions\r\n*  for additional information regarding your rights and\r\n*  obligations.\r\n*\r\n*  THE SOFTWARE AND DOCUMENTATION ARE PROVIDED \"AS IS\" WITHOUT\r\n*  WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING\r\n*  WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, FITNESS\r\n*  FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO\r\n*  EVENT SHALL LICENSOR BE LIABLE FOR ANY INCIDENTAL, SPECIAL,\r\n*  INDIRECT OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA,\r\n*  COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY OR\r\n*  SERVICES, ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT\r\n*  LIMITED TO ANY DEFENSE THEREOF), ANY CLAIMS FOR INDEMNITY OR\r\n*  CONTRIBUTION, OR OTHER SIMILAR COSTS, WHETHER ASSERTED ON THE\r\n*  BASIS OF CONTRACT, TORT (INCLUDING NEGLIGENCE), BREACH OF\r\n*  WARRANTY, OR OTHERWISE.\r\n*/\r\nimport * as YDataRendering from \"./YDataRendererCommon.js\";\r\nclass DrawPrameters {\r\n    constructor() {\r\n        this.outerRadius = 0;\r\n        this.innerRadius = 0;\r\n        this.angleStart = 0;\r\n        this.angleEnd = 0;\r\n        this.ycenter = 0;\r\n        this.xcenter = 0;\r\n        this.heightTop = 0;\r\n        this.heightBottom = 0;\r\n        this.valueRectangle = new YDataRendering.YRectangle(0, 0, 0, 0);\r\n        this.valueFormat = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\r\n        this.minValueRectangle = new YDataRendering.YRectangle(0, 0, 0, 0);\r\n        this.minValueFormat = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\r\n        this.maxValueRectangle = new YDataRendering.YRectangle(0, 0, 0, 0);\r\n        this.maxValueFormat = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\r\n        this.minValue = \"\";\r\n        this.maxValue = \"\";\r\n        this.value = \"\";\r\n    }\r\n}\r\nexport class YSolidGauge extends YDataRendering.YDataRenderer {\r\n    constructor(UIContainer, mode, logFunction) {\r\n        super(UIContainer, logFunction);\r\n        this._shownValue = 0;\r\n        this._min = 0;\r\n        this._max = 100;\r\n        this.SegmentMaxLength = 8;\r\n        this.mainViewPort = new YDataRendering.ViewPortSettings();\r\n        this._borderpen = null;\r\n        this._borderColor = YDataRendering.YColor.Black;\r\n        this._bgBrush = null;\r\n        this._backgroundColor1 = YDataRendering.YColor.FromArgb(255, 240, 240, 240);\r\n        this._backgroundColor2 = YDataRendering.YColor.FromArgb(255, 200, 200, 200);\r\n        this._borderThickness = 5;\r\n        this._valueFormater = null;\r\n        this._minmaxFormater = null;\r\n        this._thickness = 25;\r\n        this._maxSpeed = 0.1;\r\n        this._value = 0;\r\n        this._color1 = YDataRendering.YColor.Green;\r\n        this._color2 = YDataRendering.YColor.Red;\r\n        this._font = null;\r\n        this._minMaxFont = null;\r\n        this._showMinMax = true;\r\n        this._path = null;\r\n        this.lastDrawParameters = new DrawPrameters();\r\n        this._displayMode = YSolidGauge.DisplayMode.DISPLAY90;\r\n        this._minMaxFont = new YDataRendering.YFont(this, this, Math.min(UIContainer.width, UIContainer.height) / 15, () => { this.FontsizeChange(this._minMaxFont); });\r\n        this._displayMode = mode;\r\n        this._font = new YDataRendering.YFont(this, this, Math.min(UIContainer.width, UIContainer.height) / 5, null);\r\n        this.resizeRule = YDataRendering.Proportional.ResizeRule.RELATIVETOBOTH;\r\n        let g = new YDataRendering.YGraphics(UIContainer, UIContainer.width, UIContainer.height, 90);\r\n        let p = this.ComputeDrawParameters(g, UIContainer.width, UIContainer.height, this.mainViewPort);\r\n        g.Dispose();\r\n    }\r\n    get min() { return this._min; }\r\n    set min(value) {\r\n        if ((value >= this._max) && (!YDataRendering.YDataRenderer.minMaxCheckDisabled)) {\r\n            throw new RangeError(\"Min cannot be greater than max (\" + this._max.toString() + \")\");\r\n        }\r\n        this._min = value;\r\n        if (this._shownValue < this._min)\r\n            this._shownValue = this._min;\r\n        this.redraw();\r\n    }\r\n    get max() { return this._max; }\r\n    set max(value) {\r\n        if ((value <= this._min) && (!YDataRendering.YDataRenderer.minMaxCheckDisabled)) {\r\n            throw new RangeError(\"Max cannot be less than min (\" + this._min.toString() + \")\");\r\n        }\r\n        this._max = value;\r\n        if (this._shownValue > this._max)\r\n            this._shownValue = this._max;\r\n        this.redraw();\r\n    }\r\n    get borderpen() {\r\n        if (this._borderpen == null) {\r\n            this._borderpen = new YDataRendering.YPen(this._borderColor, this._borderThickness);\r\n            this._borderpen.startCap = 1 /* YDataRendering.YPen.LineCap.Square */;\r\n            this._borderpen.endCap = 1 /* YDataRendering.YPen.LineCap.Square */;\r\n        }\r\n        return this._borderpen;\r\n    }\r\n    get borderColor() { return this._borderColor; }\r\n    set borderColor(value) {\r\n        this._borderColor = value;\r\n        this._borderpen = null;\r\n        this.redraw();\r\n    }\r\n    get backgroundColor1() { return this._backgroundColor1; }\r\n    set backgroundColor1(value) {\r\n        this._backgroundColor1 = value;\r\n        this._bgBrush = null;\r\n        this.redraw();\r\n    }\r\n    get backgroundColor2() { return this._backgroundColor2; }\r\n    set backgroundColor2(value) {\r\n        this._backgroundColor2 = value;\r\n        this._bgBrush = null;\r\n        this.redraw();\r\n    }\r\n    get borderThickness() { return this._borderThickness; }\r\n    set borderThickness(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Thickness must be a positive value\");\r\n        this._borderThickness = value;\r\n        this._borderpen = null;\r\n        this._path = null;\r\n        this.redraw();\r\n    }\r\n    get valueFormater() { return this._valueFormater; }\r\n    set valueFormater(value) {\r\n        this._valueFormater = value;\r\n        this.redraw();\r\n    }\r\n    get minmaxFormater() { return this._minmaxFormater; }\r\n    set minmaxFormater(value) {\r\n        this._minmaxFormater = value;\r\n        this.redraw();\r\n    }\r\n    get thickness() { return this._thickness; }\r\n    set thickness(value) {\r\n        if (value < 0)\r\n            throw new RangeError(\"Thickness must be a positive value\");\r\n        this._thickness = Math.max(Math.min(value, 80), 1);\r\n        this._path = null;\r\n        this.redraw();\r\n    }\r\n    get maxSpeed() { return this._maxSpeed; }\r\n    set maxSpeed(value) {\r\n        if (value <= 0)\r\n            throw new RangeError(\"Speed must be a positive value\");\r\n        this._maxSpeed = value;\r\n    }\r\n    get value() { return this._value; }\r\n    set value(value) {\r\n        this._value = value;\r\n        this.redraw();\r\n    }\r\n    get color1() { return this._color1; }\r\n    set color1(value) {\r\n        this._color1 = value;\r\n        this.redraw();\r\n    }\r\n    get color2() { return this._color2; }\r\n    set color2(value) {\r\n        this._color2 = value;\r\n        this.redraw();\r\n    }\r\n    get font() { return this._font; }\r\n    get minMaxFont() { return this._minMaxFont; }\r\n    get showMinMax() { return this._showMinMax; }\r\n    set showMinMax(value) {\r\n        this._showMinMax = value;\r\n        this._path = null;\r\n        this.redraw();\r\n    }\r\n    get displayMode() { return this._displayMode; }\r\n    set displayMode(value) {\r\n        this._displayMode = value;\r\n        this._path = null;\r\n        this._bgBrush = null;\r\n        this.redraw();\r\n    }\r\n    FontsizeChange(source) { this._path = null; }\r\n    clearCachedObjects() {\r\n        this._bgBrush = null;\r\n        this._path = null;\r\n    }\r\n    ComputeDrawParameters(g, UIw, UIh, mainViewPort) {\r\n        UIw -= mainViewPort.Lmargin + mainViewPort.Rmargin;\r\n        UIh -= mainViewPort.Tmargin + mainViewPort.Bmargin;\r\n        let w = UIw - 5 - this._borderThickness;\r\n        let h = UIh - 5 - this._borderThickness;\r\n        let xcenter = UIw / 2;\r\n        let outerRadius = 0;\r\n        let angleStart = 0;\r\n        let angleEnd = 0;\r\n        let ycenter = 0;\r\n        let ValueRectangle = new YDataRendering.YRectangle(0, 0, 0, 0);\r\n        let valueFormat = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\r\n        let innerRadius = 0;\r\n        let minMaxHeight = 0;\r\n        let s1 = new YDataRendering.YSizeF(null, \"\");\r\n        let s2 = new YDataRendering.YSizeF(null, \"\");\r\n        this.lastDrawParameters.value = this._valueFormater == null ? this._value.toFixed(0) : this._valueFormater(this, this._value);\r\n        if (this._showMinMax) {\r\n            this.lastDrawParameters.minValue = this._minmaxFormater == null ? this._min.toFixed(0) : this._minmaxFormater(this, this._min);\r\n            this.lastDrawParameters.maxValue = this._minmaxFormater == null ? this._max.toFixed(0) : this._minmaxFormater(this, this._max);\r\n            s1 = g.MeasureString(this.lastDrawParameters.minValue, this._minMaxFont, 100000);\r\n            s2 = g.MeasureString(this.lastDrawParameters.maxValue, this._minMaxFont, 100000);\r\n            this.lastDrawParameters.minValueFormat = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\r\n            this.lastDrawParameters.maxValueFormat = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\r\n            minMaxHeight = s1.height;\r\n            if (s2.height > minMaxHeight)\r\n                minMaxHeight = s2.height;\r\n        }\r\n        switch (this._displayMode) {\r\n            case YSolidGauge.DisplayMode.DISPLAY90:\r\n                h = h - minMaxHeight;\r\n                w = w - minMaxHeight;\r\n                outerRadius = w;\r\n                if (outerRadius > h - this._borderThickness)\r\n                    outerRadius = h - this.borderThickness;\r\n                if (outerRadius > w - this.borderThickness)\r\n                    outerRadius = w - this.borderThickness;\r\n                angleStart = Math.PI / 2;\r\n                angleEnd = Math.PI;\r\n                this.lastDrawParameters.heightTop = outerRadius;\r\n                this.lastDrawParameters.heightBottom = 0;\r\n                ycenter = mainViewPort.Tmargin + h;\r\n                xcenter = mainViewPort.Lmargin + UIw / 2 + outerRadius / 2 - minMaxHeight + this._borderThickness;\r\n                innerRadius = outerRadius * (100 - this._thickness) / 100;\r\n                ValueRectangle = new YDataRendering.YRectangle((xcenter - innerRadius) >> 0, (ycenter - innerRadius) >> 0, innerRadius >> 0, innerRadius >> 0);\r\n                valueFormat.Alignment = 2 /* YDataRendering.YStringFormat.StringAlignment.Far */;\r\n                valueFormat.LineAlignment = 2 /* YDataRendering.YStringFormat.StringAlignment.Far */;\r\n                if (this._showMinMax) {\r\n                    this.lastDrawParameters.minValueRectangle = new YDataRendering.YRectangle((xcenter - ((outerRadius + innerRadius + s1.width) / 2)) >> 0, (ycenter + this._borderThickness) >> 0, (s1.width + 1) >> 0, (minMaxHeight + 1) >> 0);\r\n                    this.lastDrawParameters.minValueFormat.Alignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\r\n                    this.lastDrawParameters.minValueFormat.LineAlignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\r\n                    this.lastDrawParameters.maxValueRectangle = new YDataRendering.YRectangle((xcenter + this._borderThickness) >> 0, (ycenter - outerRadius + (outerRadius - innerRadius - s2.width) / 2) >> 0, (minMaxHeight + 1) >> 0, (s2.width + 1) >> 0);\r\n                    this.lastDrawParameters.maxValueFormat.Alignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\r\n                    this.lastDrawParameters.maxValueFormat.LineAlignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\r\n                    this.lastDrawParameters.maxValueFormat.FormatFlags = 2 /* YDataRendering.YStringFormat.StringFormatFlags.DirectionVertical */;\r\n                }\r\n                break;\r\n            case YSolidGauge.DisplayMode.DISPLAY180:\r\n                h = h - minMaxHeight;\r\n                let s0 = new YDataRendering.YSizeF(null, \"\");\r\n                s0 = g.MeasureString(this.lastDrawParameters.value, this._font, 100000);\r\n                outerRadius = (w / 2) - this.borderThickness;\r\n                if (outerRadius > h - this._borderThickness)\r\n                    outerRadius = h - this._borderThickness;\r\n                if (outerRadius > w - this.borderThickness)\r\n                    outerRadius = w - this.borderThickness;\r\n                angleStart = 0;\r\n                angleEnd = Math.PI;\r\n                ycenter = outerRadius + this._borderThickness / 2;\r\n                innerRadius = outerRadius * (100 - this._thickness) / 100;\r\n                this.lastDrawParameters.heightTop = outerRadius;\r\n                this.lastDrawParameters.heightBottom = 0;\r\n                ValueRectangle = new YDataRendering.YRectangle((xcenter - innerRadius) >> 0, (ycenter + this._borderThickness + minMaxHeight - s0.height) >> 0, (2 * innerRadius) >> 0, (s0.height + 1) >> 0);\r\n                valueFormat.Alignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\r\n                valueFormat.LineAlignment = 2 /* YDataRendering.YStringFormat.StringAlignment.Far */;\r\n                if (this._showMinMax) {\r\n                    this.lastDrawParameters.minValueRectangle = new YDataRendering.YRectangle((xcenter - ((outerRadius + innerRadius + s1.width) / 2)) >> 0, (ycenter + this._borderThickness) >> 0, (s1.width + 1) >> 0, (minMaxHeight + 1) >> 0);\r\n                    this.lastDrawParameters.minValueFormat.Alignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\r\n                    this.lastDrawParameters.minValueFormat.LineAlignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\r\n                    this.lastDrawParameters.maxValueRectangle = new YDataRendering.YRectangle((xcenter + ((outerRadius + innerRadius - s2.width) / 2)) >> 0, (ycenter + this._borderThickness) >> 0, (s2.width + 1) >> 0, (minMaxHeight + 1) >> 0);\r\n                    this.lastDrawParameters.maxValueFormat.Alignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\r\n                    this.lastDrawParameters.maxValueFormat.LineAlignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\r\n                }\r\n                break;\r\n            case YSolidGauge.DisplayMode.DISPLAY270:\r\n                outerRadius = w;\r\n                if (outerRadius > h / 2)\r\n                    outerRadius = h / 2;\r\n                if (outerRadius > w / 2)\r\n                    outerRadius = w / 2;\r\n                this.lastDrawParameters.heightTop = outerRadius;\r\n                this.lastDrawParameters.heightBottom = outerRadius;\r\n                angleStart = 0;\r\n                angleEnd = 3 * Math.PI / 2;\r\n                ycenter = mainViewPort.Tmargin + UIh / 2;\r\n                innerRadius = outerRadius * (100 - this._thickness) / 100;\r\n                ValueRectangle = new YDataRendering.YRectangle((xcenter - innerRadius) >> 0, (ycenter - innerRadius) >> 0, (2 * innerRadius) >> 0, (2 * innerRadius) >> 0);\r\n                valueFormat.Alignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\r\n                valueFormat.LineAlignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\r\n                if (this._showMinMax) {\r\n                    this.lastDrawParameters.minValueRectangle = new YDataRendering.YRectangle((xcenter + this._borderThickness) >> 0, (ycenter + (innerRadius + innerRadius + s1.height) / 2) >> 0, (s1.width + 1) >> 0, (s1.height + 1) >> 0);\r\n                    this.lastDrawParameters.minValueFormat.Alignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\r\n                    this.lastDrawParameters.minValueFormat.LineAlignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\r\n                    this.lastDrawParameters.maxValueRectangle = new YDataRendering.YRectangle((xcenter + (innerRadius + innerRadius + s1.height) / 2) >> 0, (ycenter + this._borderThickness) >> 0, (s2.height + 1) >> 0, (s2.width + 1) >> 0);\r\n                    this.lastDrawParameters.maxValueFormat.Alignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\r\n                    this.lastDrawParameters.maxValueFormat.LineAlignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\r\n                    this.lastDrawParameters.maxValueFormat.FormatFlags = 2 /* YDataRendering.YStringFormat.StringFormatFlags.DirectionVertical */;\r\n                }\r\n                break;\r\n            case YSolidGauge.DisplayMode.DISPLAY360:\r\n                outerRadius = w;\r\n                if (outerRadius > (h / .85) / 2)\r\n                    outerRadius = (h / .85) / 2;\r\n                if (outerRadius > w / 2)\r\n                    outerRadius = w / 2;\r\n                this.lastDrawParameters.heightTop = outerRadius;\r\n                this.lastDrawParameters.heightBottom = outerRadius * 0.7;\r\n                ycenter = mainViewPort.Tmargin + outerRadius + this._borderThickness / 2;\r\n                angleStart = -Math.PI / 4;\r\n                angleEnd = 5 * Math.PI / 4;\r\n                innerRadius = outerRadius * (100 - this._thickness) / 100;\r\n                ValueRectangle = new YDataRendering.YRectangle((xcenter - innerRadius) >> 0, (ycenter - innerRadius) >> 0, (2 * innerRadius) >> 0, (2 * innerRadius) >> 0);\r\n                valueFormat.Alignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\r\n                valueFormat.LineAlignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\r\n                if (this._showMinMax) {\r\n                    let dx = Math.abs(innerRadius * Math.cos(angleStart));\r\n                    let dy = innerRadius * Math.abs(Math.sin(angleStart)) + 2 * Math.abs((outerRadius - innerRadius) * Math.sin(angleStart) / 3);\r\n                    this.lastDrawParameters.minValueRectangle = new YDataRendering.YRectangle((xcenter - dx) >> 0, (ycenter + dy - minMaxHeight / 2) >> 0, (s1.width + 1) >> 0, (minMaxHeight + 1) >> 0);\r\n                    this.lastDrawParameters.minValueFormat.Alignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\r\n                    this.lastDrawParameters.minValueFormat.LineAlignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\r\n                    this.lastDrawParameters.maxValueRectangle = new YDataRendering.YRectangle((xcenter + dx - s2.width) >> 0, (ycenter + dy - minMaxHeight / 2) >> 0, (s2.width + 1) >> 0, (minMaxHeight + 1) >> 0);\r\n                    this.lastDrawParameters.maxValueFormat.Alignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\r\n                    this.lastDrawParameters.maxValueFormat.LineAlignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\r\n                }\r\n                break;\r\n        }\r\n        this.lastDrawParameters.outerRadius = outerRadius;\r\n        this.lastDrawParameters.innerRadius = innerRadius;\r\n        this.lastDrawParameters.angleStart = angleStart;\r\n        this.lastDrawParameters.angleEnd = angleEnd;\r\n        this.lastDrawParameters.ycenter = ycenter;\r\n        this.lastDrawParameters.xcenter = xcenter;\r\n        this.lastDrawParameters.valueRectangle = ValueRectangle;\r\n        this.lastDrawParameters.valueFormat = valueFormat;\r\n        return this.lastDrawParameters;\r\n    }\r\n    Render(g, w, h) {\r\n        this.mainViewPort = new YDataRendering.ViewPortSettings();\r\n        g.SmoothingMode = YDataRendering.YSmoothingMode.HighQuality;\r\n        g.TextRenderingHint = YDataRendering.YTextRenderingHint.AntiAlias;\r\n        this.drawAnnotationPanels(g, this._annotationPanels, w, h, false, this.mainViewPort);\r\n        let p = this.ComputeDrawParameters(g, w, h, this.mainViewPort);\r\n        if (this._path == null) {\r\n            let outterlength = (2 * p.outerRadius * Math.PI) * (p.angleEnd - p.angleStart) / (2 * Math.PI);\r\n            let stepCount = (outterlength / this.SegmentMaxLength) >> 0;\r\n            let stepsize = (p.angleEnd - p.angleStart) / stepCount;\r\n            this._path = new Array(2 * (stepCount + 1));\r\n            let n = 0;\r\n            for (let i = 0; i <= stepCount; i++) {\r\n                let a = p.angleStart + i * stepsize;\r\n                this._path[n++] = new YDataRendering.PointF((p.xcenter + p.outerRadius * Math.cos(a)), (p.ycenter - p.outerRadius * Math.sin(a)));\r\n            }\r\n            for (let i = stepCount; i >= 0; i--) {\r\n                let a = p.angleStart + i * stepsize;\r\n                this._path[n++] = new YDataRendering.PointF((p.xcenter + p.innerRadius * Math.cos(a)), (p.ycenter - p.innerRadius * Math.sin(a)));\r\n            }\r\n        }\r\n        if (this._bgBrush == null) {\r\n            this._bgBrush = new YDataRendering.YLinearGradientBrush(this._backgroundColor1, this._backgroundColor2);\r\n        }\r\n        if (this._borderpen == null) {\r\n            this._borderpen = new YDataRendering.YPen(this._borderColor, this._borderThickness);\r\n            this._borderpen.linejoin = YDataRendering.YPen.LineJoin.Round;\r\n        }\r\n        g.FillPolygon(this._bgBrush, this._path);\r\n        if (this._shownValue != this._value) {\r\n            let step = this._maxSpeed * (this._max - this._min) / 100;\r\n            if (Math.abs(this._value - this._shownValue) < step) {\r\n                this._shownValue = this._value;\r\n            }\r\n            else if (this._shownValue < this._value) {\r\n                this._shownValue += step;\r\n            }\r\n            else {\r\n                this._shownValue -= step;\r\n            }\r\n        }\r\n        let v = this._shownValue;\r\n        if (v >= this._min) {\r\n            if (v > this._max)\r\n                v = this._max;\r\n            let valueFactor = (v - this._min) / (this._max - this.min);\r\n            let angleValue = p.angleStart + (p.angleEnd - p.angleStart) * valueFactor;\r\n            let outterlength = (2 * p.outerRadius * Math.PI) * (angleValue - p.angleStart) / (2 * Math.PI);\r\n            let stepCount = (outterlength / this.SegmentMaxLength) >> 0;\r\n            let stepsize = (angleValue - p.angleStart) / stepCount;\r\n            let pt = new Array(2 * (stepCount + 1));\r\n            let n = 0;\r\n            for (let i = 0; i <= stepCount; i++) {\r\n                let a = p.angleEnd - i * stepsize;\r\n                pt[n++] = new YDataRendering.PointF((p.xcenter + p.outerRadius * Math.cos(a)), (p.ycenter - p.outerRadius * Math.sin(a)));\r\n            }\r\n            for (let i = stepCount; i >= 0; i--) {\r\n                let a = p.angleEnd - i * stepsize;\r\n                pt[n++] = new YDataRendering.PointF((p.xcenter + p.innerRadius * Math.cos(a)), (p.ycenter - p.innerRadius * Math.sin(a)));\r\n            }\r\n            let b;\r\n            if (this._color1 == this._color2) {\r\n                b = new YDataRendering.YSolidBrush(this._color1);\r\n            }\r\n            else {\r\n                let A1 = this._color1.alpha;\r\n                let H1 = this._color1.hue;\r\n                let S1 = this._color1.saturation;\r\n                let L1 = this._color1.luminosity;\r\n                let A2 = this._color2.alpha;\r\n                let H2 = this._color2.hue;\r\n                let S2 = this._color2.saturation;\r\n                let L2 = this._color2.luminosity;\r\n                let A = (Math.round(A1 + (A2 - A1) * valueFactor) >> 0) & 0xff;\r\n                let H;\r\n                if (Math.abs(H2 - H1) <= 127) {\r\n                    H = (H1 + (H2 - H1) * valueFactor) >> 0;\r\n                }\r\n                else {\r\n                    H = (H1 + 256 + (H2 - H1 + 256) * valueFactor) >> 0;\r\n                    if (H > 256)\r\n                        H -= 256;\r\n                }\r\n                let S = (S1 + (S2 - S1) * valueFactor) >> 0;\r\n                let L = (L1 + (L2 - L1) * valueFactor) >> 0;\r\n                //console.log(H+\" \"+S+\" \"+L) ;\r\n                b = new YDataRendering.YSolidBrush(new YDataRendering.YColor(true, A, H, S, L));\r\n            }\r\n            g.FillPolygon(b, pt);\r\n        }\r\n        if (this._borderThickness > 0)\r\n            g.DrawPolygon(this._borderpen, this._path);\r\n        g.DrawStringRect(this.lastDrawParameters.value, this._font, this._font.brush, p.valueRectangle, p.valueFormat);\r\n        if (this._showMinMax) {\r\n            //YDataRendering.YPen pn = new YDataRendering.YPen(YDataRendering.YColor.Red);\r\n            //g.DrawRectangle(pn,lastDrawParameters.minValueRectangle);\r\n            //g.DrawRectangle(pn, lastDrawParameters.maxValueRectangle);\r\n            g.DrawStringRect(this.lastDrawParameters.minValue, this._minMaxFont, this._minMaxFont.brush, this.lastDrawParameters.minValueRectangle, this.lastDrawParameters.minValueFormat);\r\n            g.DrawStringRect(this.lastDrawParameters.maxValue, this._minMaxFont, this._minMaxFont.brush, this.lastDrawParameters.maxValueRectangle, this.lastDrawParameters.maxValueFormat);\r\n        }\r\n        this.drawAnnotationPanels(g, this._annotationPanels, w, h, true, this.mainViewPort);\r\n        this.DrawMessagePanels(g, w, h);\r\n        return 0;\r\n    }\r\n    renderingPostProcessing() {\r\n        if (this._shownValue != this._value)\r\n            this.redraw();\r\n    }\r\n}\r\n(function (YSolidGauge) {\r\n    // export enum DisplayMode {DISPLAY90 = \"90\\u00B0\", DISPLAY180 = \"180\\u00B0\", DISPLAY270 = \"270\\u00B0\", DISPLAY360 = \"360\\u00B0\" };\r\n    class DisplayModeEnumItem extends YDataRendering.YEnumItem {\r\n        constructor(value, humanreadable, container) {\r\n            super(value, humanreadable, DisplayMode);\r\n        }\r\n    }\r\n    YSolidGauge.DisplayModeEnumItem = DisplayModeEnumItem;\r\n    class DisplayMode extends YDataRendering.YEnum {\r\n    }\r\n    DisplayMode.DISPLAY90 = new DisplayModeEnumItem(\"DISPLAY90\", \"90\\u00B0\");\r\n    DisplayMode.DISPLAY180 = new DisplayModeEnumItem(\"DISPLAY180\", \"180\\u00B0\");\r\n    DisplayMode.DISPLAY270 = new DisplayModeEnumItem(\"DISPLAY270\", \"270\\u00B0\");\r\n    DisplayMode.DISPLAY360 = new DisplayModeEnumItem(\"DISPLAY360\", \"360\\u00B0\");\r\n    YSolidGauge.DisplayMode = DisplayMode;\r\n})(YSolidGauge || (YSolidGauge = {}));\r\n"],
  "mappings": "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",
  "names": []
}
