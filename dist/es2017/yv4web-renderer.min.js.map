{
  "version": 3,
  "sources": ["../../obj/rdonly/Renderer/YDataRendererCommon.js", "../../obj/rdonly/Renderer/YAngularGauge.js", "../../obj/rdonly/Renderer/YDigitalDisplay.js", "../../obj/rdonly/Renderer/YGraph.js", "../../obj/rdonly/Renderer/YSolidGauge.js"],
  "sourcesContent": ["/*\n*   Yocto-Visualization (for web), a free web-based application\n*   to visualize Yoctopuce Sensors.\n*\n*  Renderer common functions\n*\n*   - - - - - - - - - License information: - - - - - - - - -\n*\n*  Copyright (C) 2021 and beyond by Yoctopuce Sarl, Switzerland.\n*\n*  Yoctopuce Sarl (hereafter Licensor) grants to you a perpetual\n*  non-exclusive license to use, modify, copy and integrate this\n*  file into your software for the sole purpose of interfacing\n*  with Yoctopuce products.\n*\n*  You may reproduce and distribute copies of this file in\n*  source or object form, as long as the sole purpose of this\n*  code is to interface with Yoctopuce products. You must retain\n*  this notice in the distributed source file.\n*\n*  You should refer to Yoctopuce General Terms and Conditions\n*  for additional information regarding your rights and\n*  obligations.\n*\n*  THE SOFTWARE AND DOCUMENTATION ARE PROVIDED \"AS IS\" WITHOUT\n*  WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING\n*  WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, FITNESS\n*  FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO\n*  EVENT SHALL LICENSOR BE LIABLE FOR ANY INCIDENTAL, SPECIAL,\n*  INDIRECT OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA,\n*  COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY OR\n*  SERVICES, ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT\n*  LIMITED TO ANY DEFENSE THEREOF), ANY CLAIMS FOR INDEMNITY OR\n*  CONTRIBUTION, OR OTHER SIMILAR COSTS, WHETHER ASSERTED ON THE\n*  BASIS OF CONTRACT, TORT (INCLUDING NEGLIGENCE), BREACH OF\n*  WARRANTY, OR OTHERWISE.\n*/\nexport class Vector3 {\n    constructor(a, b, c) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n    }\n    static FromXYCoord(x, y) { return new Vector3(x, y, 1); }\n    multiplyByM(m) {\n        return new Vector3(m.a * this.a + m.b * this.b + m.c * this.c, m.d * this.a + m.e * this.b + m.f * this.c, m.g * this.a + m.h * this.b + m.i * this.c);\n    }\n    multiplyByN(n) {\n        return new Vector3(this.a * n, this.b * n, this.c * n);\n    }\n    AddV(v) {\n        return new Vector3(this.a + v.a, this.b + v.b, this.c + v.c);\n    }\n    SubstractV(v) {\n        return new Vector3(this.a - v.a, this.b - v.b, this.c - v.c);\n    }\n    toPointF() { return new PointF(this.a, this.b); }\n    toPoint() { return new Point(this.a, this.b); }\n}\nexport class Matrix3x3 {\n    // don't use the constructor directly but newMatrix, newTranslateMatrix, newRotateMatrix etc...\n    constructor(a, b, c, d, e, f, g, h, i, flags) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.e = e;\n        this.f = f;\n        this.g = g;\n        this.h = h;\n        this.i = i;\n        if ((b == 0) && (d == 0) && (a == 1) && (e == 1) && (i == 1) && (g == 0) && (h == 0)) {\n            flags |= Matrix3x3.Flag_TRANSLATION;\n            if ((c == 0) && (f == 0))\n                flags |= Matrix3x3.Flag_IDENTITY;\n        }\n        this.isTranslation = (flags & Matrix3x3.Flag_TRANSLATION) != 0;\n        this.isIdentity = (flags & Matrix3x3.Flag_IDENTITY) != 0;\n    }\n    clone() {\n        let flag = 0;\n        if (this.isTranslation)\n            flag |= Matrix3x3.Flag_TRANSLATION;\n        if (this.isIdentity)\n            flag |= Matrix3x3.Flag_IDENTITY;\n        return new Matrix3x3(this.a, this.b, this.c, this.d, this.e, this.f, this.g, this.h, this.i, flag);\n    }\n    get determinant() {\n        let detA = this.e * this.i - this.h * this.f;\n        let detB = this.d * this.i - this.g * this.f;\n        let detC = this.d * this.h - this.g * this.e;\n        return this.a * detA + -this.b * detB + this.c * detC;\n    }\n    get transpose() {\n        if (this.isIdentity)\n            return Matrix3x3.newIdentityMatrix();\n        return new Matrix3x3(this.a, this.d, this.g, this.b, this.e, this.h, this.c, this.f, this.i, Matrix3x3.Flag_NONE);\n    }\n    multiplyByV(v) {\n        if (this.isTranslation)\n            return new Vector3(this.c + v.a, this.f + v.b, 1);\n        return new Vector3(this.a * v.a + this.b * v.b + this.c * v.c, this.d * v.a + this.e * v.b + this.f * v.c, this.g * v.a + this.h * v.b + this.i * v.c);\n    }\n    static newMatrix(a, b, c, d, e, f, g, h, i) {\n        return new Matrix3x3(a, b, c, d, e, f, g, h, i, Matrix3x3.Flag_NONE);\n    }\n    static newTranslateMatrix(offsetX, offsetY) {\n        let flag = Matrix3x3.Flag_TRANSLATION;\n        if ((offsetX == 0) && (offsetY == 0))\n            flag |= Matrix3x3.Flag_IDENTITY;\n        return new Matrix3x3(1, 0, offsetX, 0, 1, offsetY, 0, 0, 1, flag);\n    }\n    static newRotateMatrix(AngleDeg) {\n        AngleDeg = Math.PI * AngleDeg / 180;\n        return new Matrix3x3(Math.cos(AngleDeg), -Math.sin(AngleDeg), 0, Math.sin(AngleDeg), -Math.cos(AngleDeg), 0, 0, 0, 1, Matrix3x3.Flag_NONE);\n    }\n    static newScaleMatrix(Coef) {\n        return new Matrix3x3(Coef, 0, 0, 0, Coef, 0, 0, 0, 1, Matrix3x3.Flag_NONE);\n    }\n    static newIdentityMatrix() {\n        return new Matrix3x3(1, 0, 0, 0, 1, 0, 0, 0, 1, Matrix3x3.Flag_IDENTITY | Matrix3x3.Flag_TRANSLATION);\n    }\n    toCSS() {\n        return \"matrix(\" + this.a.toString() + \",\" + this.d.toString() + \",\"\n            + this.b.toString() + \",\" + this.e.toString() + \",\"\n            + this.c.toString() + \",\" + this.f.toString() + \")\";\n    }\n    toString() {\n        return \"| \" + this.a.toFixed(2) + \" \" + this.b.toFixed(2) + \" \" + this.c.toFixed(2) + \" |\" + (this.isIdentity ? \" I\" : \"\") + \"\\n\"\n            + \"| \" + this.d.toFixed(2) + \" \" + this.e.toFixed(2) + \" \" + this.f.toFixed(2) + \" |\" + (this.isTranslation ? \" T\" : \"\") + \"\\n\"\n            + \"| \" + this.g.toFixed(2) + \" \" + this.g.toFixed(2) + \" \" + this.i.toFixed(2) + \" |\\n\";\n    }\n    multiplyByM(m) {\n        // | a b c |\n        // | d e f |\n        // | g h i |\n        if (this.isIdentity)\n            return m.clone();\n        if (m.isIdentity)\n            return this.clone();\n        if ((this.isTranslation) && (m.isTranslation))\n            return Matrix3x3.newTranslateMatrix(this.c + m.c, this.f + m.f);\n        return new Matrix3x3(this.a * m.a + this.b * m.d + this.c * m.g, this.a * m.b + this.b * m.e + this.c * m.h, this.a * m.c + this.b * m.f + this.c * m.i, this.d * m.a + this.e * m.d + this.f * m.g, this.d * m.b + this.e * m.e + this.f * m.h, this.d * m.c + this.e * m.f + this.f * m.i, this.g * m.a + this.h * m.d + this.i * m.g, this.g * m.b + this.h * m.e + this.i * m.h, this.g * m.c + this.h * m.f + this.i * m.i, Matrix3x3.Flag_NONE);\n    }\n    get inverse() {\n        // | a b c |   | a d g |\n        // | d e f |   | b e h |\n        // | g h i |   | c f i |\n        if (this.isIdentity)\n            return Matrix3x3.newIdentityMatrix();\n        if (this.isTranslation)\n            return Matrix3x3.newTranslateMatrix(-this.c, -this.f);\n        let det = this.determinant;\n        if (det == 0)\n            throw \"matrix cannot be inverted\";\n        let detA = this.e * this.i - this.f * this.h;\n        let detB = this.b * this.i - this.c * this.h;\n        let detC = this.b * this.f - this.c * this.e;\n        let detD = this.d * this.i - this.f * this.g;\n        let detE = this.a * this.i - this.c * this.g;\n        let detF = this.a * this.f - this.c * this.d;\n        let detG = this.d * this.h - this.e * this.g;\n        let detH = this.a * this.h - this.b * this.g;\n        let detI = this.a * this.e - this.b * this.d;\n        return new Matrix3x3(detA / det, -detB / det, detC / det, -detD / det, detE / det, -detF / det, detG / det, -detH / det, detI / det, Matrix3x3.Flag_NONE);\n    }\n    log() {\n        console.log(this.toString());\n    }\n}\nMatrix3x3.Flag_NONE = 0;\nMatrix3x3.Flag_IDENTITY = 1;\nMatrix3x3.Flag_TRANSLATION = 2;\n// enum emulation (javascript enum are so lame, we had to make ours)\n//  usage example\n//\n//  export class  HrzAlignment extends YDataRendering.YEnum\n//      { public static readonly LEFT   = new  YDataRendering.YEnumItem(\"LEFT\",\"Left\");\n//        public static readonly CENTER = new  YDataRendering.YEnumItem(\"CENTER\",\"Center\");\n//        public static readonly DECIMAL= new  YDataRendering.YEnumItem(\"DECIMAL\",\"Decimal\");\n//        public static readonly RIGHT  = new  YDataRendering.YEnumItem(\"RIGHT\",\"Right\");\n//     }\nexport class YEnum {\n    static fromString(container, value) {\n        let p = Object.getOwnPropertyNames(container);\n        for (let i = 0; i < p.length; i++) {\n            if (p[i] == value)\n                return container[value];\n        }\n        throw \"YEnum\" + value + \" is not a \" + container + \" value\";\n    }\n    static siblings(container) {\n        let res = [];\n        let p = Object.getOwnPropertyNames(container);\n        for (let i = 0; i < p.length; i++) {\n            if (container[p[i]] instanceof YEnumItem) {\n                res.push(container[p[i]]);\n            }\n        }\n        return res;\n    }\n}\nexport class YEnumItem {\n    constructor(value, humanreadable, container) {\n        this._value = value;\n        this._container = container;\n        this._humanreadable = humanreadable;\n    }\n    fromString(value) { return YEnum.fromString(this._container, value); }\n    get toString() { return this._value.toString(); }\n    get description() { return this._humanreadable; }\n    get sibblings() { return YEnum.siblings(this._container); }\n}\nexport class ViewPortSettings {\n    constructor() {\n        this.IRLx = 0;\n        this.IRLy = 0;\n        this.zoomx = 0;\n        this.zoomy = 0;\n        this.Lmargin = 0;\n        this.Rmargin = 0;\n        this.Tmargin = 0;\n        this.Bmargin = 0;\n        this.Width = 0;\n        this.Height = 0;\n        this.Capture = false;\n        this.IRLCaptureStartX = 0;\n        this.CaptureStartY = 0;\n        this.OriginalXAxisMin = 0;\n        this.OriginalXAxisMax = 0;\n        this.OriginalIRLx = 0;\n        this.OriginalLmargin = 0;\n        this.OriginalZoomx = 0;\n    }\n}\nexport class YFont {\n    get userData() { return this._userData; }\n    set userData(value) { this._userData = value; }\n    get directParent() { return this._directParent; }\n    constructor(parentRenderer, directParent, size, fontChangeCallback) {\n        this._userData = null;\n        this._fontChangeCallback = null;\n        this._name = \"Arial\";\n        this._italic = false;\n        this._bold = false;\n        this._color = YColor.Black;\n        // if alternate color si set, then it will be used instead of regular color\n        this._alternateColor = null;\n        this._font = null;\n        this._brush = new YSolidBrush(YColor.Black);\n        this._parentRenderer = parentRenderer;\n        this._directParent = directParent;\n        this._fontChangeCallback = fontChangeCallback ? fontChangeCallback : null;\n        this._size = new Proportional(size ? size : 10, Proportional.ResizeRule.FIXED, parentRenderer, this, this.ResetFont);\n    }\n    ResetFont(source) {\n        this._font = null;\n        if (source != null)\n            this._parentRenderer.ProportionnalValueChanged(source);\n    }\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        this.ResetFont(null);\n        this._parentRenderer.redraw();\n    }\n    get hasChanged() { return this._font == null; }\n    get size() { return this._size.value; }\n    set size(value) {\n        if (value <= 0)\n            throw new RangeError(\"Size must be a positive value\");\n        value = (Math.round(100 * value) / 100);\n        this._size.value = value;\n        this.ResetFont(null);\n        if (this._fontChangeCallback != null)\n            this._fontChangeCallback(this);\n        this._parentRenderer.redraw();\n    }\n    get italic() { return this._italic; }\n    set italic(value) {\n        if (this._italic != value) {\n            this._italic = value;\n            this.ResetFont(null);\n            this._parentRenderer.redraw();\n        }\n    }\n    get bold() { return this._bold; }\n    set bold(value) {\n        if (this._bold != value) {\n            this._bold = value;\n            this.ResetFont(null);\n            this._parentRenderer.redraw();\n        }\n    }\n    get color() { return this._color; }\n    set color(value) {\n        if (this._color != value) {\n            this._color = value;\n            this._brush = null;\n            this._parentRenderer.redraw();\n        }\n    }\n    get alternateColor() { return this._alternateColor; }\n    set alternateColor(value) {\n        if (this._alternateColor != value) {\n            this._alternateColor = value;\n            this._brush = null;\n            this._parentRenderer.redraw();\n        }\n    }\n    get fontObject() { return this._name ? this._name : \"Arial\"; }\n    get brush() {\n        if (this._brush == null)\n            this._brush = new YSolidBrush(this._alternateColor != null ? this._alternateColor : this._color);\n        return this._brush;\n    }\n    get sizeInPoints() { return this._size.value * 0.75; }\n    get sizeForCanvas() { return this._size.value * 1.15; }\n    get htmlCode() {\n        return (this._italic ? \"italic \" : \"\") + (this._bold ? \"bold \" : \"\") + this.sizeForCanvas.toString() + \"px \" + this._name;\n    }\n}\nexport class YSizeF {\n    constructor(font, st) {\n        this._w = 0;\n        this._h = 0;\n        this._lines = [];\n        this._linesCount = 0;\n        this._lineHeight = 0;\n        this._firstlineHeight = 0;\n        if (font != null) {\n            this._lineHeight = font.size * 1.25;\n            this._firstlineHeight = this._lineHeight * 0.75;\n            if (st.indexOf(\"\\n\") < 0) {\n                this._lines = [st];\n                this._linesCount = 1;\n            }\n            else {\n                this._lines = st.split(\"\\n\");\n                this._linesCount = this._lines.length;\n            }\n        }\n    }\n    get lines() { return this._lines; }\n    get linesCount() { return this._linesCount; }\n    get firstLineHeight() { return this._firstlineHeight; }\n    get lineHeight() { return this._lineHeight; }\n    get height() { return this._h; }\n    get width() { return this._w; }\n    set width(value) {\n        this._w = value;\n    }\n    set height(value) {\n        this._h = value;\n    }\n}\nexport class YTextRenderingHint {\n    constructor(value) {\n        this._value = 0;\n        this._value = value;\n    }\n    ;\n}\nYTextRenderingHint.SystemDefault = new YTextRenderingHint(0);\nYTextRenderingHint.SingleBitPerPixelGridFit = new YTextRenderingHint(1);\nYTextRenderingHint.SingleBitPerPixel = new YTextRenderingHint(2);\nYTextRenderingHint.AntiAliasGridFit = new YTextRenderingHint(3);\nYTextRenderingHint.AntiAlias = new YTextRenderingHint(4);\nYTextRenderingHint.ClearTypeGridFit = new YTextRenderingHint(5);\nexport class YSmoothingMode {\n    constructor(value) {\n        this._value = 0;\n        this._value = value;\n    }\n    ;\n}\nYSmoothingMode.Invalid = new YSmoothingMode(-1);\nYSmoothingMode.Default = new YSmoothingMode(0);\nYSmoothingMode.HighSpeed = new YSmoothingMode(1);\nYSmoothingMode.HighQuality = new YSmoothingMode(2);\nYSmoothingMode.None = new YSmoothingMode(3);\nYSmoothingMode.AntiAlias = new YSmoothingMode(4);\nclass YStringBuilder {\n    constructor() {\n        this._str = \"\";\n    }\n    AppendLine(s) { this._str += s + \"\\n\"; }\n    Append(s) { this._str += s; }\n    get contents() { return this._str; }\n}\nexport class YStringFormat {\n    get Alignment() { return this._Alignment; }\n    set Alignment(value) { this._Alignment = value; }\n    get LineAlignment() { return this._LineAlignment; }\n    set LineAlignment(value) { this._LineAlignment = value; }\n    get FormatFlags() { return this._formatFlags; }\n    set FormatFlags(value) { this._formatFlags = value; }\n    get Trimming() { return this._Trimming; }\n    set Trimming(value) { this._Trimming = value; }\n    constructor(clip) {\n        this._Alignment = 0 /* YStringFormat.StringAlignment.Near */;\n        this._LineAlignment = 0 /* YStringFormat.StringAlignment.Near */;\n        this._formatFlags = 0 /* YStringFormat.StringFormatFlags.default */;\n        this._Trimming = 0 /* YStringFormat.StringTrimming.None */;\n        this._clip = 16384 /* YStringFormat.StringFormatFlags.NoClip */;\n        this._clip = clip;\n    }\n}\nexport class YColor {\n    get name() { return this._name; }\n    set predefname(value) { this._name = value; }\n    static get predefinedColors() {\n        if (YColor._predefinedColors == null) {\n            YColor._predefinedColors = {};\n            let names = Object.getOwnPropertyNames(YColor);\n            for (let i = 0; i < names.length; i++) {\n                if (YColor[names[i]] instanceof YColor) {\n                    YColor._predefinedColors[names[i]] = YColor[names[i]];\n                    YColor._predefinedColors[names[i]].predefname = names[i];\n                }\n            }\n        }\n        return YColor._predefinedColors;\n    }\n    static FromString(value) {\n        let valueUpper = value.toUpperCase();\n        let propNames = Object.getOwnPropertyNames(YColor);\n        for (let i = 0; i < propNames.length; i++) {\n            if (propNames[i].toUpperCase() == valueUpper) {\n                if (YColor[propNames[i]] instanceof YColor) {\n                    return YColor[propNames[i]];\n                    //let o: object = Reflect.get(YColor, value);\n                    //if (o instanceof YColor) return o as YColor;\n                }\n            }\n        }\n        if ((value.length == 7) && (value.substr(0, 1).toUpperCase() == '#')) {\n            let r = parseInt(value.substr(1, 2), 16);\n            let g = parseInt(value.substr(3, 2), 16);\n            let b = parseInt(value.substr(5, 2), 16);\n            return new YColor(false, 255, r, g, b);\n        }\n        if (value.length == 12) {\n            if (value.substr(0, 4).toUpperCase() == 'RGB:') {\n                let alpha = parseInt(value.substr(4, 2), 16);\n                let r = parseInt(value.substr(6, 2), 16);\n                let g = parseInt(value.substr(8, 2), 16);\n                let b = parseInt(value.substr(10, 2), 16);\n                return new YColor(false, alpha, r, g, b);\n            }\n            else if (value.substr(0, 4).toUpperCase() == 'HSL:') {\n                let alpha = parseInt(value.substr(4, 2), 16);\n                let h = parseInt(value.substr(6, 2), 16);\n                let s = parseInt(value.substr(8, 2), 16);\n                let l = parseInt(value.substr(10, 2), 16);\n                return new YColor(true, alpha, h, s, l);\n            }\n        }\n        return null;\n        // return   YColor.Black;  // unknown color, sorry\n    }\n    static hex(v) {\n        let s = v.toString(16);\n        if (s.length <= 1)\n            return \"0\" + s;\n        return s;\n    }\n    toString() {\n        if (this.isHSLColor) {\n            return \"HSL:\" + (YColor.hex(this.transparency) + YColor.hex(this.h) + YColor.hex(this.s) + YColor.hex(this.l)).toUpperCase();\n        }\n        else { // might need some optimization\n            let propNames = Object.getOwnPropertyNames(YColor);\n            for (let i = 0; i < propNames.length; i++) {\n                let o = Reflect.get(YColor, propNames[i]);\n                let c = o;\n                if ((c.alpha == this.alpha) && (c.red == this.red) && (c.green == this.green) && (c.blue == this.blue))\n                    return propNames[i];\n            }\n        }\n        return \"RGB:\" + (YColor.hex(this.transparency) + YColor.hex(this.r) + YColor.hex(this.g) + YColor.hex(this.b)).toUpperCase();\n    }\n    get svgCode() { return \"rgb(\" + this.r.toString() + \", \" + this.g.toString() + \", \" + this.b.toString() + \")\"; }\n    get alphaCode() { return (this.transparency / 255.0).toFixed(3); }\n    static hsl2rgbInt(temp1, temp2, temp3) {\n        if (temp3 >= 170)\n            return ((temp1 + 127) / 255) >> 0;\n        if (temp3 > 42) {\n            if (temp3 <= 127)\n                return ((temp2 + 127) / 255) >> 0;\n            temp3 = 170 - temp3;\n        }\n        return ((temp1 * 255 + (temp2 - temp1) * (6 * temp3) + 32512) / 65025) >> 0;\n    }\n    hsl2rgb() {\n        let temp1;\n        let temp2;\n        let temp3;\n        this.rgbConvertionDone = true;\n        if (this.s == 0) {\n            this.r = this.l;\n            this.g = this.l;\n            this.b = this.l;\n            return;\n        }\n        if (this.l <= 127) {\n            temp2 = this.l * (255 + this.s);\n        }\n        else {\n            temp2 = (this.l + this.s) * (255) - this.l * this.s;\n        }\n        temp1 = (510) * this.l - temp2;\n        // R\n        temp3 = (this.h + 85);\n        if (temp3 > 255)\n            temp3 = temp3 - 255;\n        this.r = YColor.hsl2rgbInt(temp1, temp2, temp3);\n        // G\n        temp3 = this.h;\n        if (temp3 > 255)\n            temp3 = temp3 - 255;\n        this.g = YColor.hsl2rgbInt(temp1, temp2, temp3);\n        // B\n        if (this.h >= 85) {\n            temp3 = this.h - 85;\n        }\n        else {\n            temp3 = this.h + 170;\n        }\n        this.b = YColor.hsl2rgbInt(temp1, temp2, temp3);\n        if (this.r > 255)\n            this.r = 255; // just in case\n        if (this.g > 255)\n            this.g = 255;\n        if (this.b > 255)\n            this.b = 255;\n    }\n    computeHSL() {\n        let R = this.r;\n        let G = this.g;\n        let B = this.b;\n        let H;\n        let S;\n        let L;\n        let max = (R > G ? R : G);\n        let min = (R < G ? R : G);\n        let correction = 0;\n        let divisor = 0;\n        this.hslConvertionDone = true;\n        if (B > max)\n            max = B;\n        if (B < min)\n            min = B;\n        L = ((max + min + 1) / 2) >> 0;\n        if (max == min) {\n            this.h = 0;\n            this.s = 0;\n            this.l = L;\n            return;\n        }\n        correction = ((max + min) / 2) >> 0;\n        if (L <= 127) {\n            S = ((255 * (max - min) + correction) / (max + min)) >> 0;\n        }\n        else {\n            S = ((255 * (max - min) + 255 - correction) / (510 - (max + min))) >> 0;\n        }\n        correction = 3 * (max - min);\n        divisor = 2 * correction;\n        if (R == max) {\n            H = 0;\n            R = G;\n            G = B;\n        }\n        else if (G == max) {\n            H = 85;\n            G = R;\n            R = B;\n        }\n        else {\n            H = 170;\n        }\n        if (R >= G) {\n            H += ((255 * (R - G) + correction) / divisor) >> 0;\n        }\n        else {\n            H += 255 - ((255 * (G - R) - correction) / divisor) >> 0;\n        }\n        if (H > 255)\n            H -= 255;\n        if (S > 255)\n            S = 255; // just in case\n        if (L > 255)\n            L = 255;\n        this.h = H;\n        this.s = S;\n        this.l = L;\n    }\n    get hue() {\n        if (!this.hslConvertionDone)\n            this.computeHSL();\n        return this.h;\n    }\n    get saturation() {\n        if (!this.hslConvertionDone)\n            this.computeHSL();\n        return this.s;\n    }\n    get luminosity() {\n        if (!this.hslConvertionDone)\n            this.computeHSL();\n        return this.l;\n    }\n    get red() {\n        if (!this.rgbConvertionDone)\n            this.hsl2rgb();\n        return this.r;\n    }\n    get green() {\n        if (!this.rgbConvertionDone)\n            this.hsl2rgb();\n        return this.g;\n    }\n    get blue() {\n        if (!this.rgbConvertionDone)\n            this.hsl2rgb();\n        return this.b;\n    }\n    get alpha() {\n        return this.transparency;\n    }\n    static FromArgb(a, r, g, b) {\n        return new YColor(false, a, r, g, b);\n    }\n    static FromAhsl(a, h, s, l) {\n        return new YColor(true, a, h, s, l);\n    }\n    get isHSL() { return this.isHSLColor; }\n    get isRGB() { return !this.isHSLColor; }\n    equal(c) {\n        if (this.isHSLColor) {\n            if (!c.isHSLColor)\n                return false;\n            if (c.hue != this.hue)\n                return false;\n            if (c.saturation != this.saturation)\n                return false;\n            if (c.luminosity != this.luminosity)\n                return false;\n            if (c.alpha != this.alpha)\n                return false;\n        }\n        else {\n            if (c.isHSLColor)\n                return false;\n            if (c.red != this.red)\n                return false;\n            if (c.green != this.green)\n                return false;\n            if (c.blue != this.blue)\n                return false;\n            if (c.alpha != this.alpha)\n                return false;\n        }\n        return true;\n    }\n    clone() {\n        if (this.isHSLColor)\n            return new YColor(true, this.transparency, this.h, this.s, this.l, this.isPredefined);\n        return new YColor(false, this.transparency, this.r, this.g, this.b, this.isPredefined);\n    }\n    get isPredefined() { return this._isPredefined; }\n    constructor(isHsl, transparency, r_h, g_s, b_l, isPredefined) {\n        this.hslConvertionDone = false;\n        this.rgbConvertionDone = false;\n        this.transparency = 0;\n        this.r = 0;\n        this.g = 0;\n        this.b = 0;\n        this.h = 0;\n        this.s = 0;\n        this.l = 0;\n        this._name = \"\";\n        this._htmlcode = this.computeHTMLCode();\n        this.hslConvertionDone = isHsl;\n        this.isHSLColor = isHsl;\n        this.transparency = transparency;\n        this._isPredefined = isPredefined === true;\n        if (isHsl) {\n            this.h = r_h;\n            this.s = g_s;\n            this.l = b_l;\n            this.hsl2rgb();\n        }\n        else {\n            this.r = r_h;\n            this.g = g_s;\n            this.b = b_l;\n            this.rgbConvertionDone = true;\n        }\n        this._htmlcode = this.computeHTMLCode();\n    }\n    computeHTMLCode() {\n        let a = this.transparency / 255;\n        let r = this.r;\n        let g = this.g;\n        let b = this.b;\n        return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a.toFixed(3) + \")\";\n    }\n    get htmlCode() { return this._htmlcode; }\n}\nYColor.AliceBlue = new YColor(false, 0xFF, 0xF0, 0xF8, 0xFF, true);\nYColor.AntiqueWhite = new YColor(false, 0xFF, 0xFA, 0xEB, 0xD7, true);\nYColor.Aqua = new YColor(false, 0xFF, 0x00, 0xFF, 0xFF, true);\nYColor.Aquamarine = new YColor(false, 0xFF, 0x7F, 0xFF, 0xD4, true);\nYColor.Azure = new YColor(false, 0xFF, 0xF0, 0xFF, 0xFF, true);\nYColor.Beige = new YColor(false, 0xFF, 0xF5, 0xF5, 0xDC, true);\nYColor.Bisque = new YColor(false, 0xFF, 0xFF, 0xE4, 0xC4, true);\nYColor.Black = new YColor(false, 0xFF, 0x00, 0x00, 0x00, true);\nYColor.BlanchedAlmond = new YColor(false, 0xFF, 0xFF, 0xEB, 0xCD, true);\nYColor.Blue = new YColor(false, 0xFF, 0x00, 0x00, 0xFF, true);\nYColor.BlueViolet = new YColor(false, 0xFF, 0x8A, 0x2B, 0xE2, true);\nYColor.Brown = new YColor(false, 0xFF, 0xA5, 0x2A, 0x2A, true);\nYColor.BurlyWood = new YColor(false, 0xFF, 0xDE, 0xB8, 0x87, true);\nYColor.CadetBlue = new YColor(false, 0xFF, 0x5F, 0x9E, 0xA0, true);\nYColor.Chartreuse = new YColor(false, 0xFF, 0x7F, 0xFF, 0x00, true);\nYColor.Chocolate = new YColor(false, 0xFF, 0xD2, 0x69, 0x1E, true);\nYColor.Coral = new YColor(false, 0xFF, 0xFF, 0x7F, 0x50, true);\nYColor.CornflowerBlue = new YColor(false, 0xFF, 0x64, 0x95, 0xED, true);\nYColor.Cornsilk = new YColor(false, 0xFF, 0xFF, 0xF8, 0xDC, true);\nYColor.Crimson = new YColor(false, 0xFF, 0xDC, 0x14, 0x3C, true);\nYColor.Cyan = new YColor(false, 0xFF, 0x00, 0xFF, 0xFF, true);\nYColor.DarkBlue = new YColor(false, 0xFF, 0x00, 0x00, 0x8B, true);\nYColor.DarkCyan = new YColor(false, 0xFF, 0x00, 0x8B, 0x8B, true);\nYColor.DarkGoldenrod = new YColor(false, 0xFF, 0xB8, 0x86, 0x0B, true);\nYColor.DarkGray = new YColor(false, 0xFF, 0xA9, 0xA9, 0xA9, true);\nYColor.DarkGreen = new YColor(false, 0xFF, 0x00, 0x64, 0x00, true);\nYColor.DarkKhaki = new YColor(false, 0xFF, 0xBD, 0xB7, 0x6B, true);\nYColor.DarkMagenta = new YColor(false, 0xFF, 0x8B, 0x00, 0x8B, true);\nYColor.DarkOliveGreen = new YColor(false, 0xFF, 0x55, 0x6B, 0x2F, true);\nYColor.DarkOrange = new YColor(false, 0xFF, 0xFF, 0x8C, 0x00, true);\nYColor.DarkOrchid = new YColor(false, 0xFF, 0x99, 0x32, 0xCC, true);\nYColor.DarkRed = new YColor(false, 0xFF, 0x8B, 0x00, 0x00, true);\nYColor.DarkSalmon = new YColor(false, 0xFF, 0xE9, 0x96, 0x7A, true);\nYColor.DarkSeaGreen = new YColor(false, 0xFF, 0x8F, 0xBC, 0x8F, true);\nYColor.DarkSlateBlue = new YColor(false, 0xFF, 0x48, 0x3D, 0x8B, true);\nYColor.DarkSlateGray = new YColor(false, 0xFF, 0x2F, 0x4F, 0x4F, true);\nYColor.DarkTurquoise = new YColor(false, 0xFF, 0x00, 0xCE, 0xD1, true);\nYColor.DarkViolet = new YColor(false, 0xFF, 0x94, 0x00, 0xD3, true);\nYColor.DeepPink = new YColor(false, 0xFF, 0xFF, 0x14, 0x93, true);\nYColor.DeepSkyBlue = new YColor(false, 0xFF, 0x00, 0xBF, 0xFF, true);\nYColor.DimGray = new YColor(false, 0xFF, 0x69, 0x69, 0x69, true);\nYColor.DodgerBlue = new YColor(false, 0xFF, 0x1E, 0x90, 0xFF, true);\nYColor.Firebrick = new YColor(false, 0xFF, 0xB2, 0x22, 0x22, true);\nYColor.FloralWhite = new YColor(false, 0xFF, 0xFF, 0xFA, 0xF0, true);\nYColor.ForestGreen = new YColor(false, 0xFF, 0x22, 0x8B, 0x22, true);\nYColor.Fuchsia = new YColor(false, 0xFF, 0xFF, 0x00, 0xFF, true);\nYColor.Gainsboro = new YColor(false, 0xFF, 0xDC, 0xDC, 0xDC, true);\nYColor.GhostWhite = new YColor(false, 0xFF, 0xF8, 0xF8, 0xFF, true);\nYColor.Gold = new YColor(false, 0xFF, 0xFF, 0xD7, 0x00, true);\nYColor.Goldenrod = new YColor(false, 0xFF, 0xDA, 0xA5, 0x20, true);\nYColor.Gray = new YColor(false, 0xFF, 0x80, 0x80, 0x80, true);\nYColor.Green = new YColor(false, 0xFF, 0x00, 0x80, 0x00, true);\nYColor.GreenYellow = new YColor(false, 0xFF, 0xAD, 0xFF, 0x2F, true);\nYColor.Honeydew = new YColor(false, 0xFF, 0xF0, 0xFF, 0xF0, true);\nYColor.HotPink = new YColor(false, 0xFF, 0xFF, 0x69, 0xB4, true);\nYColor.IndianRed = new YColor(false, 0xFF, 0xCD, 0x5C, 0x5C, true);\nYColor.Indigo = new YColor(false, 0xFF, 0x4B, 0x00, 0x82, true);\nYColor.Ivory = new YColor(false, 0xFF, 0xFF, 0xFF, 0xF0, true);\nYColor.Khaki = new YColor(false, 0xFF, 0xF0, 0xE6, 0x8C, true);\nYColor.Lavender = new YColor(false, 0xFF, 0xE6, 0xE6, 0xFA, true);\nYColor.LavenderBlush = new YColor(false, 0xFF, 0xFF, 0xF0, 0xF5, true);\nYColor.LawnGreen = new YColor(false, 0xFF, 0x7C, 0xFC, 0x00, true);\nYColor.LemonChiffon = new YColor(false, 0xFF, 0xFF, 0xFA, 0xCD, true);\nYColor.LightBlue = new YColor(false, 0xFF, 0xAD, 0xD8, 0xE6, true);\nYColor.LightCoral = new YColor(false, 0xFF, 0xF0, 0x80, 0x80, true);\nYColor.LightCyan = new YColor(false, 0xFF, 0xE0, 0xFF, 0xFF, true);\nYColor.LightGoldenrodYellow = new YColor(false, 0xFF, 0xFA, 0xFA, 0xD2, true);\nYColor.LightGray = new YColor(false, 0xFF, 0xD3, 0xD3, 0xD3, true);\nYColor.LightGreen = new YColor(false, 0xFF, 0x90, 0xEE, 0x90, true);\nYColor.LightPink = new YColor(false, 0xFF, 0xFF, 0xB6, 0xC1, true);\nYColor.LightSalmon = new YColor(false, 0xFF, 0xFF, 0xA0, 0x7A, true);\nYColor.LightSeaGreen = new YColor(false, 0xFF, 0x20, 0xB2, 0xAA, true);\nYColor.LightSkyBlue = new YColor(false, 0xFF, 0x87, 0xCE, 0xFA, true);\nYColor.LightSlateGray = new YColor(false, 0xFF, 0x77, 0x88, 0x99, true);\nYColor.LightSteelBlue = new YColor(false, 0xFF, 0xB0, 0xC4, 0xDE, true);\nYColor.LightYellow = new YColor(false, 0xFF, 0xFF, 0xFF, 0xE0, true);\nYColor.Lime = new YColor(false, 0xFF, 0x00, 0xFF, 0x00, true);\nYColor.LimeGreen = new YColor(false, 0xFF, 0x32, 0xCD, 0x32, true);\nYColor.Linen = new YColor(false, 0xFF, 0xFA, 0xF0, 0xE6, true);\nYColor.Magenta = new YColor(false, 0xFF, 0xFF, 0x00, 0xFF, true);\nYColor.Maroon = new YColor(false, 0xFF, 0x80, 0x00, 0x00, true);\nYColor.MediumAquamarine = new YColor(false, 0xFF, 0x66, 0xCD, 0xAA, true);\nYColor.MediumBlue = new YColor(false, 0xFF, 0x00, 0x00, 0xCD, true);\nYColor.MediumOrchid = new YColor(false, 0xFF, 0xBA, 0x55, 0xD3, true);\nYColor.MediumPurple = new YColor(false, 0xFF, 0x93, 0x70, 0xDB, true);\nYColor.MediumSeaGreen = new YColor(false, 0xFF, 0x3C, 0xB3, 0x71, true);\nYColor.MediumSlateBlue = new YColor(false, 0xFF, 0x7B, 0x68, 0xEE, true);\nYColor.MediumSpringGreen = new YColor(false, 0xFF, 0x00, 0xFA, 0x9A, true);\nYColor.MediumTurquoise = new YColor(false, 0xFF, 0x48, 0xD1, 0xCC, true);\nYColor.MediumVioletRed = new YColor(false, 0xFF, 0xC7, 0x15, 0x85, true);\nYColor.MidnightBlue = new YColor(false, 0xFF, 0x19, 0x19, 0x70, true);\nYColor.MintCream = new YColor(false, 0xFF, 0xF5, 0xFF, 0xFA, true);\nYColor.MistyRose = new YColor(false, 0xFF, 0xFF, 0xE4, 0xE1, true);\nYColor.Moccasin = new YColor(false, 0xFF, 0xFF, 0xE4, 0xB5, true);\nYColor.NavajoWhite = new YColor(false, 0xFF, 0xFF, 0xDE, 0xAD, true);\nYColor.Navy = new YColor(false, 0xFF, 0x00, 0x00, 0x80, true);\nYColor.OldLace = new YColor(false, 0xFF, 0xFD, 0xF5, 0xE6, true);\nYColor.Olive = new YColor(false, 0xFF, 0x80, 0x80, 0x00, true);\nYColor.OliveDrab = new YColor(false, 0xFF, 0x6B, 0x8E, 0x23, true);\nYColor.Orange = new YColor(false, 0xFF, 0xFF, 0xA5, 0x00, true);\nYColor.OrangeRed = new YColor(false, 0xFF, 0xFF, 0x45, 0x00, true);\nYColor.Orchid = new YColor(false, 0xFF, 0xDA, 0x70, 0xD6, true);\nYColor.PaleGoldenrod = new YColor(false, 0xFF, 0xEE, 0xE8, 0xAA, true);\nYColor.PaleGreen = new YColor(false, 0xFF, 0x98, 0xFB, 0x98, true);\nYColor.PaleTurquoise = new YColor(false, 0xFF, 0xAF, 0xEE, 0xEE, true);\nYColor.PaleVioletRed = new YColor(false, 0xFF, 0xDB, 0x70, 0x93, true);\nYColor.PapayaWhip = new YColor(false, 0xFF, 0xFF, 0xEF, 0xD5, true);\nYColor.PeachPuff = new YColor(false, 0xFF, 0xFF, 0xDA, 0xB9, true);\nYColor.Peru = new YColor(false, 0xFF, 0xCD, 0x85, 0x3F, true);\nYColor.Pink = new YColor(false, 0xFF, 0xFF, 0xC0, 0xCB, true);\nYColor.Plum = new YColor(false, 0xFF, 0xDD, 0xA0, 0xDD, true);\nYColor.PowderBlue = new YColor(false, 0xFF, 0xB0, 0xE0, 0xE6, true);\nYColor.Purple = new YColor(false, 0xFF, 0x80, 0x00, 0x80, true);\nYColor.Red = new YColor(false, 0xFF, 0xFF, 0x00, 0x00, true);\nYColor.RosyBrown = new YColor(false, 0xFF, 0xBC, 0x8F, 0x8F, true);\nYColor.RoyalBlue = new YColor(false, 0xFF, 0x41, 0x69, 0xE1, true);\nYColor.SaddleBrown = new YColor(false, 0xFF, 0x8B, 0x45, 0x13, true);\nYColor.Salmon = new YColor(false, 0xFF, 0xFA, 0x80, 0x72, true);\nYColor.SandyBrown = new YColor(false, 0xFF, 0xF4, 0xA4, 0x60, true);\nYColor.SeaGreen = new YColor(false, 0xFF, 0x2E, 0x8B, 0x57, true);\nYColor.SeaShell = new YColor(false, 0xFF, 0xFF, 0xF5, 0xEE, true);\nYColor.Sienna = new YColor(false, 0xFF, 0xA0, 0x52, 0x2D, true);\nYColor.Silver = new YColor(false, 0xFF, 0xC0, 0xC0, 0xC0, true);\nYColor.SkyBlue = new YColor(false, 0xFF, 0x87, 0xCE, 0xEB, true);\nYColor.SlateBlue = new YColor(false, 0xFF, 0x6A, 0x5A, 0xCD, true);\nYColor.SlateGray = new YColor(false, 0xFF, 0x70, 0x80, 0x90, true);\nYColor.Snow = new YColor(false, 0xFF, 0xFF, 0xFA, 0xFA, true);\nYColor.SpringGreen = new YColor(false, 0xFF, 0x00, 0xFF, 0x7F, true);\nYColor.SteelBlue = new YColor(false, 0xFF, 0x46, 0x82, 0xB4, true);\nYColor.Tan = new YColor(false, 0xFF, 0xD2, 0xB4, 0x8C, true);\nYColor.Teal = new YColor(false, 0xFF, 0x00, 0x80, 0x80, true);\nYColor.Thistle = new YColor(false, 0xFF, 0xD8, 0xBF, 0xD8, true);\nYColor.Tomato = new YColor(false, 0xFF, 0xFF, 0x63, 0x47, true);\nYColor.Transparent = new YColor(false, 0x00, 0xFF, 0xFF, 0xFF, true);\nYColor.Turquoise = new YColor(false, 0xFF, 0x40, 0xE0, 0xD0, true);\nYColor.Violet = new YColor(false, 0xFF, 0xEE, 0x82, 0xEE, true);\nYColor.Wheat = new YColor(false, 0xFF, 0xF5, 0xDE, 0xB3, true);\nYColor.White = new YColor(false, 0xFF, 0xFF, 0xFF, 0xFF, true);\nYColor.WhiteSmoke = new YColor(false, 0xFF, 0xF5, 0xF5, 0xF5, true);\nYColor.Yellow = new YColor(false, 0xFF, 0xFF, 0xFF, 0x00, true);\nYColor.YellowGreen = new YColor(false, 0xFF, 0x9A, 0xCD, 0x32, true);\nYColor._predefinedColors = null;\nexport class YBrush {\n    constructor(c, disableAntialias) {\n        this._noAntiAlias = false;\n        this._color = c;\n        if (typeof (disableAntialias) != \"undefined\") {\n            this._noAntiAlias = disableAntialias;\n        }\n    }\n    get noAntiAlias() { return this._noAntiAlias; }\n    get color() { return this._color; }\n}\nexport class YSolidBrush extends YBrush {\n}\nexport class YLinearGradientBrush extends YBrush {\n    constructor(c1, c2) {\n        super(c1);\n        this._color1 = c1;\n        this._color2 = c2;\n    }\n    get color1() { return this._color1; }\n    get color2() { return this._color2; }\n}\nexport class YPen {\n    constructor(color, thickness, disableAntialias) {\n        this._thickness = 1.0;\n        this._color = YColor.Black;\n        this._noAntiAlias = false;\n        this._startCap = 1 /* YPen.LineCap.Square */;\n        this._endCap = 1 /* YPen.LineCap.Square */;\n        this._linejoin = YPen.LineJoin.Miter;\n        this._thickness = thickness;\n        this._color = thickness > 0 ? color : YColor.Transparent;\n        if (typeof (disableAntialias) != \"undefined\") {\n            this._noAntiAlias = disableAntialias;\n        }\n    }\n    get noAntiAlias() { return this._noAntiAlias; }\n    get lineWidth() { return this._thickness; }\n    get strokeStyle() { return this._color.htmlCode; }\n    get color() { return this._color; }\n    set startCap(value) { this._startCap = value; }\n    set endCap(value) { this._endCap = value; }\n    set linejoin(value) { this._linejoin = value; }\n}\n(function (YPen) {\n    let LineJoin;\n    (function (LineJoin) {\n        LineJoin[LineJoin[\"Miter\"] = 0] = \"Miter\";\n        LineJoin[LineJoin[\"Bevel\"] = 1] = \"Bevel\";\n        LineJoin[LineJoin[\"Round\"] = 2] = \"Round\";\n        LineJoin[LineJoin[\"MiterClipped\"] = 3] = \"MiterClipped\";\n    })(LineJoin = YPen.LineJoin || (YPen.LineJoin = {}));\n})(YPen || (YPen = {}));\nexport class YRectangle {\n    constructor(x, y, w, h) {\n        this.x = x;\n        this.y = y;\n        this.w = w;\n        this.h = h;\n    }\n}\nexport class Point {\n    constructor(valueX, valueY) {\n        this.X = valueX >> 0;\n        this.Y = valueY >> 0;\n    }\n}\nexport class PointF {\n    constructor(valueX, valueY) {\n        this.X = valueX;\n        this.Y = valueY;\n    }\n}\nexport class captureParametersSet {\n    constructor() {\n        this.captureType = YDataRenderer.CaptureType.SVG;\n        this.captureFolder = \"/\"; //Environment.GetFolderPath(Environment.SpecialFolder.MyPictures);\n        this.captureWidth = 1024;\n        this.captureHeight = 1024;\n        this.captureDPI = 96;\n    }\n}\nexport class GenericPanel {\n    get userData() { return this._userData; }\n    set userData(value) { this._userData = value; }\n    get directParent() { return this._directParent; }\n    constructor(parent, directParent) {\n        this._userData = null;\n        this._enabled = false;\n        this._panelTextAlign = GenericPanel.TextAlign.LEFT;\n        this._text = \"\";\n        this._bgColor = new YColor(false, 255, 255, 255, 192);\n        this._borderColor = YColor.Black;\n        this._borderthickness = 1.0;\n        this._padding = 10;\n        this._verticalMargin = 10;\n        this._horizontalMargin = 10;\n        this._bgBrush = null;\n        this._pen = null;\n        this._font = null;\n        this._directParent = directParent;\n        this._parentRenderer = parent;\n        this._font = new YFont(parent, this, 8, null);\n    }\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        if (this._enabled != value) {\n            this._enabled = value;\n            this._parentRenderer.clearCachedObjects();\n            this._parentRenderer.redraw();\n        }\n    }\n    get panelTextAlign() { return this._panelTextAlign; }\n    set panelTextAlign(value) {\n        this._panelTextAlign = value;\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get text() { return this._text; }\n    set text(value) {\n        this._text = value;\n        this._parentRenderer.clearCachedObjects();\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get bgColor() { return this._bgColor; }\n    set bgColor(value) {\n        this._bgColor = value;\n        this._bgBrush = null;\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get borderColor() { return this._borderColor; }\n    set borderColor(value) {\n        this._borderColor = value;\n        this._pen = null;\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get borderthickness() { return this._borderthickness; }\n    set borderthickness(value) {\n        if (value < 0)\n            throw \"Border thickness must be a positive value\";\n        this._borderthickness = value;\n        this._parentRenderer.clearCachedObjects();\n        this._pen = null;\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get padding() { return this._padding; }\n    set padding(value) {\n        if (value < 0)\n            throw new RangeError(\"Padding must be a positive value\");\n        this._padding = value;\n        this._parentRenderer.clearCachedObjects();\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get verticalMargin() { return this._verticalMargin; }\n    set verticalMargin(value) {\n        this._verticalMargin = value;\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get horizontalMargin() { return this._horizontalMargin; }\n    set horizontalMargin(value) {\n        this._horizontalMargin = value;\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get bgBrush() {\n        if (this._bgBrush == null)\n            this._bgBrush = new YSolidBrush(this._bgColor);\n        return this._bgBrush;\n    }\n    get pen() {\n        if (this._pen == null) {\n            this._pen = new YPen(this._borderColor, this._borderthickness, true);\n        }\n        return this._pen;\n    }\n    get font() { return this._font; }\n}\n(function (GenericPanel) {\n    class HorizontalAlignPosEnumItem extends YEnumItem {\n        constructor(value, humanreadable, container) {\n            super(value, humanreadable, HorizontalAlignPos);\n        }\n    }\n    GenericPanel.HorizontalAlignPosEnumItem = HorizontalAlignPosEnumItem;\n    class HorizontalAlignPos extends YEnum {\n    }\n    HorizontalAlignPos.LEFT = new HorizontalAlignPosEnumItem(\"LEFT\", \"Left\");\n    HorizontalAlignPos.CENTER = new HorizontalAlignPosEnumItem(\"CENTER\", \"Center\");\n    HorizontalAlignPos.RIGHT = new HorizontalAlignPosEnumItem(\"RIGHT\", \"Right\");\n    GenericPanel.HorizontalAlignPos = HorizontalAlignPos;\n    class VerticalAlignPosEnumItem extends YEnumItem {\n        constructor(value, humanreadable, container) {\n            super(value, humanreadable, VerticalAlignPos);\n        }\n    }\n    GenericPanel.VerticalAlignPosEnumItem = VerticalAlignPosEnumItem;\n    class VerticalAlignPos extends YEnum {\n    }\n    VerticalAlignPos.TOP = new VerticalAlignPosEnumItem(\"TOP\", \"Top\");\n    VerticalAlignPos.CENTER = new VerticalAlignPosEnumItem(\"CENTER\", \"Center\");\n    VerticalAlignPos.BOTTOM = new VerticalAlignPosEnumItem(\"BOTTOM\", \"Bottom\");\n    GenericPanel.VerticalAlignPos = VerticalAlignPos;\n    class TextAlignEnumItem extends YEnumItem {\n        constructor(value, humanreadable, container) {\n            super(value, humanreadable, TextAlign);\n        }\n    }\n    GenericPanel.TextAlignEnumItem = TextAlignEnumItem;\n    class TextAlign extends YEnum {\n    }\n    TextAlign.LEFT = new TextAlignEnumItem(\"LEFT\", \"Left\");\n    TextAlign.CENTER = new TextAlignEnumItem(\"CENTER\", \"Center\");\n    TextAlign.RIGHT = new TextAlignEnumItem(\"RIGHT\", \"Right\");\n    GenericPanel.TextAlign = TextAlign;\n})(GenericPanel || (GenericPanel = {}));\nexport class MessagePanel extends GenericPanel {\n    constructor(parent, directParent) {\n        super(parent, directParent);\n        this._panelHrzAlign = GenericPanel.HorizontalAlignPos.CENTER;\n        this._panelVrtAlign = GenericPanel.VerticalAlignPos.CENTER;\n    }\n    get panelHrzAlign() { return this._panelHrzAlign; }\n    set panelHrzAlign(value) {\n        this._panelHrzAlign = value;\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get panelVrtAlign() { return this._panelVrtAlign; }\n    set panelVrtAlign(value) {\n        this._panelVrtAlign = value;\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n}\nexport class AnnotationPanel extends GenericPanel {\n    constructor(parent, directParent) {\n        super(parent, directParent);\n        this._overlap = false;\n        this._positionOffsetX = 50;\n        this._positionOffsetY = 50;\n        this._panelHrzAlign = GenericPanel.HorizontalAlignPos.CENTER;\n        this._panelVrtAlign = GenericPanel.VerticalAlignPos.TOP;\n    }\n    get overlap() { return this._overlap; }\n    set overlap(value) {\n        if ((!value) && (this._panelHrzAlign == GenericPanel.HorizontalAlignPos.CENTER) && (this._panelVrtAlign == GenericPanel.VerticalAlignPos.CENTER)) {\n            this._panelVrtAlign = GenericPanel.VerticalAlignPos.TOP;\n        }\n        this._overlap = value;\n        this._parentRenderer.clearCachedObjects();\n        this._parentRenderer.redraw();\n    }\n    get positionOffsetX() { return this._positionOffsetX; }\n    set positionOffsetX(value) {\n        this._positionOffsetX = value;\n        this._parentRenderer.clearCachedObjects();\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get positionOffsetY() { return this._positionOffsetY; }\n    set positionOffsetY(value) {\n        this._positionOffsetY = value;\n        this._parentRenderer.clearCachedObjects();\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get panelHrzAlign() { return this._panelHrzAlign; }\n    set panelHrzAlign(value) {\n        if ((!this._overlap) && (value == GenericPanel.HorizontalAlignPos.CENTER) && (this._panelVrtAlign == GenericPanel.VerticalAlignPos.CENTER)) {\n            this._panelVrtAlign = GenericPanel.VerticalAlignPos.TOP;\n        }\n        this._panelHrzAlign = value;\n        this._parentRenderer.clearCachedObjects();\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get panelVrtAlign() { return this._panelVrtAlign; }\n    set panelVrtAlign(value) {\n        if ((!this._overlap) && (value == GenericPanel.VerticalAlignPos.CENTER) && (this._panelHrzAlign == GenericPanel.HorizontalAlignPos.CENTER)) {\n            this._panelHrzAlign = GenericPanel.HorizontalAlignPos.RIGHT;\n        }\n        this._panelVrtAlign = value;\n        this._parentRenderer.clearCachedObjects();\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n}\nexport class Zone {\n    get directParent() { return this._directParent; }\n    get userData() { return this._userData; }\n    set userData(value) { this._userData = value; }\n    resetCache() { }\n    constructor(parentRenderer, directParent) {\n        this._userData = null;\n        this._zoneBrush = null;\n        this._color = YColor.Red;\n        this._visible = false;\n        this._min = 0;\n        this._max = 100;\n        this._directParent = directParent;\n        this._parentRenderer = parentRenderer;\n    }\n    get zoneBrush() {\n        if (this._zoneBrush == null)\n            this._zoneBrush = new YSolidBrush(this._color);\n        return this._zoneBrush;\n    }\n    get color() { return this._color; }\n    set color(value) {\n        this._color = value;\n        this._zoneBrush = null;\n        if (this.visible)\n            this._parentRenderer.redraw();\n    }\n    get visible() { return this._visible; }\n    set visible(value) {\n        this._visible = value;\n        this._parentRenderer.redraw();\n    }\n    set_minMax(min, max) {\n        if (min > max)\n            throw new RangeError(\"Min cannot be greater than max \");\n        this._min = min;\n        this._max = max;\n        this.resetCache();\n        if (this.visible)\n            this._parentRenderer.redraw();\n    }\n    get min() { return this._min; }\n    set min(value) {\n        if ((value >= this._max) && !YDataRenderer.minMaxCheckDisabled) {\n            throw new RangeError(\"Min cannot be greater than max (\" + this._max.toString() + \")\");\n        }\n        this._min = value;\n        this.resetCache();\n        if (this.visible)\n            this._parentRenderer.redraw();\n    }\n    get max() { return this._max; }\n    set max(value) {\n        if ((value <= this._min) && !YDataRenderer.minMaxCheckDisabled) {\n            throw new RangeError(\"Max cannot be greater than min (\" + this._min.toString() + \")\");\n        }\n        this._max = value;\n        this.resetCache();\n        if (this.visible)\n            this._parentRenderer.redraw();\n    }\n}\nexport class Proportional {\n    get userData() { return this._userData; }\n    set userData(value) { this._userData = value; }\n    get directParent() { return this._directParent; }\n    get value() { return this._value; }\n    set value(v) {\n        this._value = v;\n        this.set_refPoint();\n        if (this._reset != null)\n            this._reset(this);\n    }\n    get resizeRule() { return this._resizeRule; }\n    set resizeRule(value) {\n        this.set_refPoint();\n        this._resizeRule = value;\n    }\n    set_refPoint() {\n        this._refWidth = Math.max(1, this._parentRenderer.usableUiWidth());\n        this._refHeight = Math.max(1, this._parentRenderer.usableUiHeight());\n        this._refValue = this._value;\n    }\n    constructor(value, resizeRule, parentRenderer, directParent, resetCallBack) {\n        this._reset = null;\n        this._refWidth = 1;\n        this._refHeight = 1;\n        this._refValue = 1;\n        this.valueStack = [];\n        this._resizeRule = Proportional.ResizeRule.FIXED;\n        this._userData = null;\n        this._reset = resetCallBack;\n        this._parentRenderer = parentRenderer;\n        this._value = value;\n        this._resizeRule = resizeRule;\n        this._directParent = directParent;\n        this.set_refPoint();\n        this._parentRenderer.AddNewProportionalToSizeValue(this);\n    }\n    containerResizedPushNewCoef(coef) {\n        this.valueStack.push(this._value);\n        this._value = Math.round(100 * this._refValue * coef) / 100;\n        if (this._reset != null)\n            this._reset(this);\n    }\n    containerResizedPop() {\n        if (this.valueStack.length <= 0)\n            throw new RangeError(\"Can't pop, empty stack.\");\n        this._value = this.valueStack.pop();\n        if (this._reset != null)\n            this._reset(this);\n    }\n    static resizeCoef(rule, refWidth, refHeight, newWidth, newHeight) {\n        switch (rule) {\n            case Proportional.ResizeRule.RELATIVETOWIDTH:\n                return newWidth / refWidth;\n            case Proportional.ResizeRule.RELATIVETOHEIGHT:\n                return newHeight / refHeight;\n            case Proportional.ResizeRule.RELATIVETOBOTH:\n                return Math.min(newHeight / refHeight, newWidth / refWidth); // original\n        }\n        return 1.0;\n    }\n    containerResized(newWidth, newHeight) {\n        this._value = Math.round(100 * this._refValue * Proportional.resizeCoef(this._resizeRule, this._refWidth, this._refHeight, newWidth, newHeight)) / 100;\n        if (this._reset != null)\n            this._reset(this);\n    }\n    forceChangeCallback() {\n        if (this._reset != null)\n            this._reset(this);\n    }\n}\n(function (Proportional) {\n    class ResizeRuleEnumItem extends YEnumItem {\n        constructor(value, humanreadable, container) {\n            super(value, humanreadable, ResizeRule);\n        }\n    }\n    Proportional.ResizeRuleEnumItem = ResizeRuleEnumItem;\n    class ResizeRule extends YEnum {\n    }\n    ResizeRule.FIXED = new ResizeRuleEnumItem(\"FIXED\", \"Fixed\");\n    ResizeRule.RELATIVETOWIDTH = new ResizeRuleEnumItem(\"RELATIVETOWIDTH\", \"Relative to Width\");\n    ResizeRule.RELATIVETOHEIGHT = new ResizeRuleEnumItem(\"RELATIVETOHEIGHT\", \"Relative to height\");\n    ResizeRule.RELATIVETOBOTH = new ResizeRuleEnumItem(\"RELATIVETOBOTH\", \"Relative to Width and Height\");\n    Proportional.ResizeRule = ResizeRule;\n})(Proportional || (Proportional = {}));\nexport class YDataRenderer {\n    get annotationPanels() { return this._annotationPanels; }\n    get userData() { return this._userData; }\n    static get minMaxCheckDisabled() { return YDataRenderer._disableMinMaxCheck; }\n    static set minMaxCheckDisabled(value) { YDataRenderer._disableMinMaxCheck = value; }\n    resetlegendPens() { }\n    get getCaptureParameters() { return this._getCaptureParameters; }\n    set getCaptureParameters(value) { this._getCaptureParameters = value; }\n    get messagePanels() { return this._messagePanels; }\n    static globalMouseMove(e) {\n        YDataRenderer.globalMouseX = e.pageX;\n        YDataRenderer.globalMouseY = e.pageY;\n    }\n    clearTransformationMatrix() {\n        this._Scr2ElmMatrix = null;\n        this._Elm2ScrMatrix = null;\n    }\n    // This is the one of the \"magic\" parts, instead on relying\n    // on each HTML element offsetLeft and offsetTop coordinates,we\n    // compute the whole transformation matrix for the canvas Element,\n    // this way, CSS transformations, including scale and rotation are\n    // handled property.  This is important since Yocto-Visualization\n    // allows in to inject a widget inside an arbitrary DIV. This\n    // also importnat to be able to make these convertion from\n    // any position on the whole page because of drag operations\n    findElementAbsolutePosition(el) {\n        let staticFound = false;\n        let relativeFound = false;\n        let dx = 0;\n        let dy = 0;\n        while (el != null) {\n            let style = window.getComputedStyle(el);\n            if ((!relativeFound) && (style.position == \"static\") && (!staticFound)) {\n                dx = el.offsetLeft + parseFloat(style.borderLeftWidth);\n                dy = el.offsetTop + parseFloat(style.borderTopWidth);\n                staticFound = true;\n            }\n            if ((style.position == \"relative\") || (style.position == \"absolute\")) {\n                dx += el.offsetLeft + parseFloat(style.borderLeftWidth);\n                dy += el.offsetTop + parseFloat(style.borderTopWidth);\n                relativeFound = true;\n            }\n            el = el.parentElement;\n        }\n        return new PointF(dx, dy);\n    }\n    get Elm2ScrMatrix() {\n        if (this._Elm2ScrMatrix == null) {\n            let el = this.UIContainer;\n            // compute el and its parents absolute absolution relative to page origin\n            // turns out it is a bit tricky when nested div have diffrent style.position\n            // values static/relative/absolute\n            let AsolutePositionsStack = [];\n            while (el != null) {\n                AsolutePositionsStack.push(this.findElementAbsolutePosition(el));\n                el = el.parentElement;\n            }\n            el = this.UIContainer;\n            let MatrixStack = [];\n            let staticFound = false;\n            let relativeFound = false;\n            let index = 0;\n            while (el != null) { //console.log(\"UP \"+el.id);\n                let parent = el.parentElement;\n                let style = window.getComputedStyle(el);\n                //console.log(el.id+\": position=\"+style.position+\" offset= (\"+el.offsetLeft.toString(2).padStart(16)+\",\"+el.offsetTop.toString(2).padStart(16)+\") (\"+el.offsetLeft+\",\"+el.offsetTop+\")  border= (\"+parseFloat(style.borderLeftWidth)+\",\"+parseFloat(style.borderTopWidth)+\") computed pos=(\"+AsolutePositionsStack[index].X+\",\"+AsolutePositionsStack[index].Y+\")\" );\n                let dx = AsolutePositionsStack[index].X;\n                let dy = AsolutePositionsStack[index].Y;\n                if (index < AsolutePositionsStack.length - 1) {\n                    dx -= AsolutePositionsStack[index + 1].X;\n                    dy -= AsolutePositionsStack[index + 1].Y;\n                }\n                //console.log(\"offset=\"+dx.toString()+\",\"+dy.toString());\n                let matrix = style['transform'];\n                if (matrix != \"none\") { //console.log(\"matrix=\"+matrix)\n                    let matrixStr = matrix.match(/matrix.*\\((.+)\\)/)[1].split(', ');\n                    let matrixValues = [];\n                    for (let i = 0; i < 6; i++) {\n                        matrixValues.push(parseFloat(matrixStr[i]));\n                    }\n                    let OriginMatrixMatrixBefore = null;\n                    let TransformMatrix = Matrix3x3.newMatrix(matrixValues[0], matrixValues[2], matrixValues[4], matrixValues[1], matrixValues[3], matrixValues[5], 0, 0, 1);\n                    let OriginMatrixMatrixAfter = null;\n                    if (style.transformOrigin) { //console.log(\"transformOrigin=\"+style.transformOrigin)\n                        let parts = style.transformOrigin.split(\" \");\n                        let Ox = Number.parseFloat(parts[0]);\n                        let Oy = Number.parseFloat(parts[1]);\n                        OriginMatrixMatrixBefore = Matrix3x3.newTranslateMatrix(-Ox, -Oy);\n                        OriginMatrixMatrixAfter = Matrix3x3.newTranslateMatrix(Ox, Oy);\n                    } //else  console.log(\"No transform\");\n                    if (OriginMatrixMatrixBefore != null)\n                        MatrixStack.push(OriginMatrixMatrixBefore);\n                    if (TransformMatrix != null)\n                        MatrixStack.push(TransformMatrix);\n                    if (OriginMatrixMatrixAfter != null)\n                        MatrixStack.push(OriginMatrixMatrixAfter);\n                } // else  console.log(\"No matrix\");\n                if ((dx != 0) || (dy != 0))\n                    MatrixStack.push(Matrix3x3.newTranslateMatrix(dx, dy));\n                el = parent;\n                index++;\n            }\n            this._Elm2ScrMatrix = Matrix3x3.newIdentityMatrix();\n            for (let i = MatrixStack.length - 1; i >= 0; i--) {\n                this._Elm2ScrMatrix = this._Elm2ScrMatrix.multiplyByM(MatrixStack[i]);\n            }\n        }\n        return this._Elm2ScrMatrix;\n    }\n    get Scr2ElmMatrix() {\n        if (this._Scr2ElmMatrix == null) {\n            this._Scr2ElmMatrix = this.Elm2ScrMatrix.inverse;\n        }\n        return this._Scr2ElmMatrix;\n    }\n    addAnnotationPanel() {\n        let p = new AnnotationPanel(this, this);\n        this._annotationPanels.push(p);\n        this.redraw();\n        return p;\n    }\n    AllowRedraw() {\n        this._redrawAllowed--;\n        if (this._redrawAllowed < 0)\n            throw new RangeError(\"Too many AllowRedraw calls\");\n        if (this._redrawAllowed == 0)\n            this.redraw();\n    }\n    AllowRedrawNoRefresh() {\n        this._redrawAllowed--;\n        if (this._redrawAllowed < 0)\n            throw new RangeError(\"Too many AllowRedraw calls\");\n    }\n    DisableRedraw() {\n        this._redrawAllowed++;\n    }\n    AddNewProportionalToSizeValue(v) {\n        if (this.ProportionalToSizeValues.indexOf(v) < 0)\n            this.ProportionalToSizeValues.push(v);\n    }\n    canRedraw() {\n        return (this._redrawAllowed == 0);\n    }\n    setPatchAnnotationCallback(callback) { this._PatchAnnotationCallback = callback; }\n    patchAnnotation(text) {\n        text = text.replace(\"\\\\n\", \"\\n\");\n        if (text.indexOf('$') < 0)\n            return text;\n        let now = new Date();\n        text = text.replace(\"$DAY$\", now.getDay().toString());\n        text = text.replace(\"$MONTH$\", now.getMonth().toString());\n        text = text.replace(\"$YEAR$\", now.getFullYear().toString());\n        text = text.replace(\"$HOUR$\", now.getHours().toString());\n        text = text.replace(\"$MINUTE$\", now.getMinutes().toString());\n        text = text.replace(\"$SECOND$\", now.getSeconds().toString());\n        if (this._PatchAnnotationCallback != null)\n            text = this._PatchAnnotationCallback(text);\n        return text;\n    }\n    mouseLocalPosition() {\n        let v = Vector3.FromXYCoord(YDataRenderer.globalMouseX, YDataRenderer.globalMouseY);\n        let m = this.Scr2ElmMatrix;\n        //   let canvasRect :  ClientRect = this.UIContainer.getBoundingClientRect();\n        //   if (YDataRenderer.globalMouseX<= canvasRect.left) return null;\n        //   if (YDataRenderer.globalMouseX>= canvasRect.left+canvasRect.width) return null;\n        //   if (YDataRenderer.globalMouseY<= canvasRect.top) return null;\n        //   if (YDataRenderer.globalMouseY>= canvasRect.top+canvasRect.height) return null;\n        let p = m.multiplyByV(v).toPoint();\n        //     console.log(\" Traditional : \"+ (YDataRenderer.globalMouseX- canvasRect.left).toString()+\",\"+(YDataRenderer.globalMouseY- canvasRect.top).toString()\n        //     +\" Matrix : \"+ p.X.toString()+\", \"+ p.Y.toString());\n        if ((p.X < 0) || (p.Y < 0) || (p.X > this.UIContainer.offsetWidth) || (p.Y > this.UIContainer.offsetHeight))\n            return null;\n        return p;\n        //   return new Point( YDataRenderer.globalMouseX- canvasRect.left,\n        //                      YDataRenderer.globalMouseY- canvasRect.top);\n    }\n    set proportionnalValueChangeCallback(value) {\n        this._proportionnalValueChangeCallback = value;\n    }\n    ProportionnalValueChanged(source) {\n        if (this._proportionnalValueChangeCallback != null)\n            this._proportionnalValueChangeCallback(source);\n    }\n    getContainerInnerWidth() {\n        return this.UIContainer.offsetWidth;\n        // let r: DOMRect  = this.UIContainer.getBoundingClientRect();\n        //  return r.width;\n        // return  this.UIContainer.width;\n    }\n    getContainerInnerHeight() {\n        return this.UIContainer.offsetHeight;\n        //let r: DOMRect  = this.UIContainer.getBoundingClientRect();\n        //return r.height;\n        //return  this.UIContainer.height;\n    }\n    Draw(timestamp) {\n        if (!this.canRedraw())\n            return 0;\n        let w = this.getContainerInnerWidth();\n        let h = this.getContainerInnerHeight();\n        if ((w <= 5) || (h <= 5))\n            return 0;\n        this.DisableRedraw();\n        let offscreenCanvas = document.createElement('canvas');\n        offscreenCanvas.width = w;\n        offscreenCanvas.height = h;\n        //let DrawArea : CanvasRenderingContext2D = this.UIContainer.getContext('2d');\n        let g = new YGraphics(offscreenCanvas, w, h, 90);\n        let start = performance.now();\n        try {\n            this.Render(g, w, h);\n            /*\n          let p: Point | null = this.mouseLocalPosition();\n          if (p!=null)\n          {\n            let ctx: CanvasRenderingContext2D = <CanvasRenderingContext2D>offscreenCanvas.getContext(\"2d\");\n            ctx.fillStyle = \"red\";\n            ctx.font = \" 24px Arial\";\n            ctx.fillText(p.X.toString()+\",\"+p.Y.toString(), 1, 1);\n          }*/\n        }\n        catch (e) {\n            debugger;\n            this.log(\"Rendering error: \" + e.message);\n        }\n        let elapsed = performance.now() - start;\n        let drawArea = this.UIContainer.getContext('2d');\n        drawArea.clearRect(0, 0, w, h);\n        drawArea.drawImage(offscreenCanvas, 0, 0);\n        this.rendererTimingTotal += elapsed;\n        this.rendererTimingCount++;\n        let avg = this.rendererTimingTotal / this.rendererTimingCount;\n        g.Dispose();\n        this.AllowRedrawNoRefresh();\n        this.renderingPostProcessing();\n        return 0;\n    }\n    renderingPostProcessing() { }\n    get resizeRule() { return this._resizeRule; }\n    set resizeRule(value) {\n        if (value != this._resizeRule) {\n            this.DisableRedraw();\n            this._resizeRule = value;\n            for (let i = 0; i < this.ProportionalToSizeValues.length; i++) {\n                this.ProportionalToSizeValues[i].resizeRule = this._resizeRule;\n            }\n            this.AllowRedraw();\n            this.redraw();\n        }\n    }\n    redraw() {\n        if (!(document.visibilityState === 'visible'))\n            return;\n        if (this._redrawAllowed > 0)\n            return;\n        if (this.getContainerInnerWidth() < 2)\n            return;\n        if (this.getContainerInnerHeight() < 2)\n            return;\n        if (this.requestAnimationFrameID != null) {\n            window.cancelAnimationFrame(this.requestAnimationFrameID);\n            //#ifdef PROFILING\n            //            console.log(\"canceled cancelAnimationFrame \");\n            //            //#endif\n        }\n        this.requestAnimationFrameID = window.requestAnimationFrame((timestamp) => {\n            try {\n                this.Draw(timestamp);\n            }\n            catch (e) {\n                console.log('caught');\n                this.requestAnimationFrameID = null;\n                throw (e);\n            }\n            this.requestAnimationFrameID = null;\n        });\n    }\n    usableUiWidth() { return this.getContainerInnerWidth(); }\n    usableUiHeight() { return this.getContainerInnerHeight(); }\n    resetProportionalSizeObjectsCachePush(newcoef) {\n        this.clearCachedObjects();\n        if (this._resizeRule != Proportional.ResizeRule.FIXED) {\n            for (let i = 0; i < this.ProportionalToSizeValues.length; i++) {\n                this.ProportionalToSizeValues[i].containerResizedPushNewCoef(newcoef);\n            }\n        }\n    }\n    resetProportionalSizeObjectsCachePop() {\n        this.clearCachedObjects();\n        if (this._resizeRule != Proportional.ResizeRule.FIXED) {\n            for (let i = 0; i < this.ProportionalToSizeValues.length; i++) {\n                this.ProportionalToSizeValues[i].containerResizedPop();\n            }\n        }\n    }\n    resetProportionalSizeObjectsCache(w, h) {\n        this.clearCachedObjects();\n        if (this._resizeRule != Proportional.ResizeRule.FIXED) {\n            for (let i = 0; i < this.ProportionalToSizeValues.length; i++) {\n                this.ProportionalToSizeValues[i].containerResized(w, h);\n            }\n        }\n    }\n    containerResized() {\n        this.containerResize(null, null);\n    }\n    containerResize(sender, e) {\n        //if (((Form)sender).WindowState == FormWindowState.Minimized) return;\n        this.clearTransformationMatrix();\n        this.DisableRedraw();\n        //let r: DOMRect  = this.UIContainer.getBoundingClientRect();\n        this.UIContainer.width = this.UIContainer.offsetWidth;\n        this.UIContainer.height = this.UIContainer.offsetHeight;\n        // console.log(\"resize \" + this.usableUiWidth().toString() + \"/\" + this.usableUiHeight().toString());\n        this.resetProportionalSizeObjectsCache(this.usableUiWidth(), this.usableUiHeight());\n        this.AllowRedraw();\n        this.redraw();\n    }\n    proportionnalsizeReset() {\n        this.resetProportionalSizeObjectsCache(this.usableUiWidth(), this.usableUiHeight());\n    }\n    captureAndDownloadImage(captureType, defaultFilename, // or null\n    captureWidth, // or null\n    captureHeight, // or null\n    captureDPI) {\n        let error = \"\";\n        let w;\n        let h;\n        let ratio = this.getContainerInnerWidth() / this.getContainerInnerHeight();\n        if (captureDPI == null)\n            captureDPI = 90;\n        if ((defaultFilename == null) || (typeof defaultFilename == \"undefined\")) {\n            defaultFilename = \"capture.\";\n            if (captureType == YDataRenderer.CaptureType.PNG) {\n                defaultFilename = defaultFilename + \"png\";\n            }\n            if (captureType == YDataRenderer.CaptureType.SVG) {\n                defaultFilename = defaultFilename + \"svg\";\n            }\n        }\n        if ((captureWidth == null) || (typeof (captureWidth) == \"undefined\")) {\n            w = this.getContainerInnerWidth();\n            if ((captureHeight == null) || (typeof (captureHeight) == \"undefined\")) {\n                h = this.getContainerInnerHeight();\n            }\n            else {\n                h = captureHeight >> 0;\n                w = (h * ratio) >> 0;\n            }\n        }\n        else {\n            w = captureWidth >> 0;\n            if ((captureHeight == null) || (typeof (captureHeight) == \"undefined\")) {\n                h = (w * ratio) >> 0;\n            }\n            else {\n                h = captureHeight >> 0;\n            }\n        }\n        if ((w <= 5) || (h <= 5))\n            return;\n        this.DisableRedraw();\n        let DrawArea = document.createElement('canvas');\n        DrawArea.width = w;\n        DrawArea.height = h;\n        let g;\n        switch (captureType) {\n            case YDataRenderer.CaptureType.PNG:\n                g = new YGraphics(DrawArea, w, h, captureDPI);\n                break;\n            case YDataRenderer.CaptureType.SVG:\n                g = new YGraphicsSVG(DrawArea, w, h, captureDPI);\n                break;\n            default:\n                throw new RangeError(\"capture :unknown type\");\n        }\n        let newCoef = Proportional.resizeCoef(Proportional.ResizeRule.RELATIVETOBOTH, this.refWidth, this.refHeight, w, h);\n        this.log(\"start capture\");\n        this.resetProportionalSizeObjectsCachePush(newCoef); // reset all size related cached objects\n        let renderok = false;\n        this._snapshotPanel.enabled = false;\n        try {\n            let t = this.Render(g, w, h);\n            renderok = true;\n        }\n        catch (e) {\n            error = e.message;\n            this.log(\"Render error: \" + error);\n        }\n        this.log(\"capture completed\");\n        this.resetProportionalSizeObjectsCachePop(); // reset all size related cached objects, again\n        if (renderok) {\n            let element = document.createElement('a');\n            let data = g.get_downloadableData();\n            element.setAttribute('href', data);\n            element.setAttribute('download', defaultFilename);\n            element.style.display = 'none';\n            document.body.appendChild(element);\n            element.click();\n            document.body.removeChild(element);\n        }\n        g.Dispose();\n        this.AllowRedraw();\n    }\n    getFocus(sender, e) {\n        this.log(\"got focus\");\n    }\n    gainFocus() {\n        //if (parentForm.Focused) return;\n        //this.parentForm.Focus();\n    }\n    lostFocus(sender, e) {\n        //if (_AllowPrintScreenCapture) _RegisKey.StopHotKey();\n    }\n    get AllowPrintScreenCapture() { return this._AllowPrintScreenCapture; }\n    set AllowPrintScreenCapture(value) { this._AllowPrintScreenCapture = value; }\n    constructor(UIContainer, logFunction) {\n        this._redrawAllowed = 1;\n        this._refWidth = 1;\n        this._refHeight = 1;\n        this.rendererTimingTotal = 0;\n        this.rendererTimingCount = 0;\n        this._PatchAnnotationCallback = null;\n        this._logFunction = null;\n        this._annotationPanels = [];\n        this._userData = null;\n        this.documentVisibiltyChangeFct = null;\n        this.containerResizedFct = null;\n        this._getCaptureParameters = null;\n        this.OnDblClick = null;\n        this.OnRightClick = null;\n        this._messagePanels = [];\n        this._Scr2ElmMatrix = null;\n        this._Elm2ScrMatrix = null;\n        this.ProportionalToSizeValues = [];\n        this._proportionnalValueChangeCallback = null;\n        this._resizeRule = Proportional.ResizeRule.FIXED;\n        this.requestAnimationFrameID = null;\n        this._snapshotPanel = null;\n        this._snapshotTimer = null;\n        this._AllowPrintScreenCapture = false;\n        if (!YDataRenderer.globalMouseMoveSet) {\n            document.addEventListener(\"mousemove\", e => { YDataRenderer.globalMouseMove(e); });\n            YDataRenderer.globalMouseMoveSet = true;\n        }\n        this.UIContainer = UIContainer;\n        this.UIContainer.width = this.getContainerInnerWidth();\n        this.UIContainer.height = this.getContainerInnerHeight();\n        //this.UIContainer.SizeMode = PictureBoxSizeMode.Normal;\n        this._logFunction = logFunction;\n        this.parentForm = UIContainer.ownerDocument;\n        this._annotationPanels = [];\n        this._messagePanels = [];\n        this.DisableRedraw();\n        this._snapshotPanel = this.addMessagePanel();\n        this._snapshotPanel.panelTextAlign = MessagePanel.TextAlign.CENTER;\n        this._snapshotPanel.text = \"Captured to clipboard\";\n        this._snapshotPanel.panelHrzAlign = MessagePanel.HorizontalAlignPos.CENTER;\n        this._snapshotPanel.panelVrtAlign = MessagePanel.VerticalAlignPos.CENTER;\n        this._snapshotPanel.bgColor = new YColor(false, 200, 0xcc, 0xf7, 0xa1);\n        this._snapshotPanel.font.size = 16;\n        this.AllowRedrawNoRefresh();\n        this.containerResizedFct = () => { this.containerResize(null, null); };\n        document.addEventListener('resize', this.containerResizedFct);\n        this.resetRefrenceSize();\n        this.documentVisibiltyChangeFct = () => {\n            if (document.visibilityState === 'visible') {\n                this.redraw();\n            }\n        };\n        document.addEventListener('visibilitychange', this.documentVisibiltyChangeFct);\n    }\n    destroy() {\n        document.removeEventListener('visibilitychange', this.documentVisibiltyChangeFct);\n        document.removeEventListener('resize', this.containerResized);\n        this.UIContainer.parentNode.removeChild(this.UIContainer);\n        this.UIContainer = null;\n        this.parentForm = null;\n        this._annotationPanels = null;\n        this._messagePanels = null;\n        this._Scr2ElmMatrix = null;\n        this._Elm2ScrMatrix = null;\n    }\n    resetRefrenceSize() {\n        this._refWidth = this.getContainerInnerWidth();\n        this._refHeight = this.getContainerInnerHeight();\n    }\n    get refWidth() { return this._refWidth; }\n    get refHeight() { return this._refHeight; }\n    RendererCanvas_Click(sender, e) {\n    }\n    RendererCanvas_DoubleClick(sender, e) {\n        // MouseEventArgs m = (MouseEventArgs)e;\n        // if (OnDblClick != null) OnDblClick(this, m);\n    }\n    addMessagePanel() {\n        let p = new MessagePanel(this, this);\n        this._messagePanels.push(p);\n        return p;\n    }\n    DrawMessagePanels(g, viewPortWidth, viewPortHeight) {\n        //g.SetClip(new YRectangle(0, 0, viewPortWidth, viewPortHeight));\n        for (let i = 0; i < this._messagePanels.length; i++) {\n            if (this._messagePanels[i].enabled) {\n                let p = this._messagePanels[i];\n                let AvailableWidth = viewPortWidth - 2 * p.padding - p.borderthickness;\n                if (AvailableWidth < 100)\n                    AvailableWidth = 100;\n                let ssize = null;\n                let sizeok = false;\n                // if panel ends up larger than avaliable space, lets reduce font size.\n                while (!sizeok) {\n                    ssize = g.MeasureString(p.text, p.font, AvailableWidth);\n                    if (((ssize.width >= this.UIContainer.width) ||\n                        (ssize.height >= this.UIContainer.height))\n                        && (p.font.size > 5)) {\n                        p.font.size = Math.round(p.font.size * 9) / 10;\n                    }\n                    else\n                        sizeok = true;\n                }\n                if (ssize == null)\n                    return; // not supposed to happen\n                let panelWidth = ssize.width + 2 * p.padding + p.borderthickness;\n                let panelHeight = ssize.height + 2 * p.padding + p.borderthickness;\n                let x = 0;\n                switch (p.panelHrzAlign) {\n                    case MessagePanel.HorizontalAlignPos.LEFT:\n                        x = p.horizontalMargin;\n                        break;\n                    case MessagePanel.HorizontalAlignPos.RIGHT:\n                        x = viewPortWidth - panelWidth - p.horizontalMargin;\n                        break;\n                    default:\n                        x = (viewPortWidth - panelWidth) / 2;\n                        break;\n                }\n                let y = 0;\n                switch (p.panelVrtAlign) {\n                    case MessagePanel.VerticalAlignPos.TOP:\n                        y = p.verticalMargin;\n                        break;\n                    case MessagePanel.VerticalAlignPos.BOTTOM:\n                        y = viewPortHeight - panelHeight - p.verticalMargin;\n                        break;\n                    default:\n                        y = (viewPortHeight - panelHeight) / 2;\n                        break;\n                }\n                g.FillRectangleXYHW(p.bgBrush, x, y, panelWidth, panelHeight);\n                if (p.borderthickness > 0)\n                    g.DrawRectangleXYHW(p.pen, x, y, panelWidth, panelHeight);\n                let sf = new YStringFormat(16384 /* YStringFormat.StringFormatFlags.NoClip */);\n                switch (p.panelTextAlign) {\n                    case MessagePanel.TextAlign.LEFT:\n                        sf.LineAlignment = 0 /* YStringFormat.StringAlignment.Near */;\n                        sf.Alignment = 0 /* YStringFormat.StringAlignment.Near */;\n                        break;\n                    case MessagePanel.TextAlign.RIGHT:\n                        sf.LineAlignment = 2 /* YStringFormat.StringAlignment.Far */;\n                        sf.Alignment = 2 /* YStringFormat.StringAlignment.Far */;\n                        break;\n                    default:\n                        sf.LineAlignment = 1 /* YStringFormat.StringAlignment.Center */;\n                        sf.Alignment = 1 /* YStringFormat.StringAlignment.Center */;\n                        break;\n                }\n                let r = new YRectangle(((x + p.padding + p.borderthickness / 2) >> 0), ((y + p.padding + p.borderthickness / 2) >> 0), ssize.width + 1, ssize.height + 1);\n                g.DrawStringRect(p.text, p.font, p.font.brush, r, sf);\n            }\n        }\n    }\n    drawAnnotationPanels(g, annotationPanels, viewPortWidth, viewPortHeight, overlap, mainViewPort) {\n        //g.TextRenderingHint = YGraphics.TextRenderingHint.SingleBitPerPixelGridFit;\n        let active = false;\n        for (let i = 0; i < this.annotationPanels.length; i++) {\n            if (this.annotationPanels[i].enabled)\n                active = true;\n        }\n        if (!active)\n            return;\n        //g.SetClip(new YRectangle(0, 0, viewPortWidth, viewPortHeight));\n        for (let i = 0; i < this.annotationPanels.length; i++) {\n            if ((annotationPanels[i].enabled) && (annotationPanels[i].overlap == overlap)) {\n                let p = annotationPanels[i];\n                let AvailableWidth = viewPortWidth - 2 * p.padding - p.borderthickness;\n                if (AvailableWidth < 100)\n                    AvailableWidth = 100;\n                let textToDisplay = p.text.replace(\"\\\\n\", \"\\n\");\n                if (textToDisplay.indexOf('$') >= 0) {\n                    textToDisplay = textToDisplay.replace(\"\\\\n\", \"\\n\");\n                    textToDisplay = this.patchAnnotation(textToDisplay);\n                }\n                let ssize = g.MeasureString(textToDisplay, p.font, AvailableWidth);\n                let panelWidth = ssize.width + 2 * p.padding + p.borderthickness;\n                let panelHeight = ssize.height + 2 * p.padding + p.borderthickness;\n                let x = 0;\n                switch (p.panelHrzAlign) {\n                    case MessagePanel.HorizontalAlignPos.LEFT:\n                        x = p.horizontalMargin;\n                        if (!annotationPanels[i].overlap && (mainViewPort.Lmargin < panelWidth + 10)) {\n                            mainViewPort.Lmargin = panelWidth + 10;\n                        }\n                        break;\n                    case MessagePanel.HorizontalAlignPos.RIGHT:\n                        x = viewPortWidth - panelWidth - p.horizontalMargin;\n                        if (!annotationPanels[i].overlap && (mainViewPort.Rmargin < panelWidth + 20)) {\n                            mainViewPort.Rmargin = panelWidth + 20;\n                        }\n                        break;\n                    default:\n                        x = (viewPortWidth - panelWidth) / 2;\n                        break;\n                }\n                let y = 0;\n                switch (p.panelVrtAlign) {\n                    case MessagePanel.VerticalAlignPos.TOP:\n                        y = p.verticalMargin;\n                        if (!annotationPanels[i].overlap && (mainViewPort.Tmargin < panelHeight + 20)) {\n                            mainViewPort.Tmargin = panelHeight + 20;\n                        }\n                        break;\n                    case MessagePanel.VerticalAlignPos.BOTTOM:\n                        y = viewPortHeight - panelHeight - p.verticalMargin;\n                        if (!annotationPanels[i].overlap && (mainViewPort.Bmargin < panelHeight + 20)) {\n                            mainViewPort.Bmargin = panelHeight + 20;\n                        }\n                        break;\n                    default:\n                        y = (viewPortHeight - panelHeight) / 2;\n                        break;\n                }\n                if (annotationPanels[i].overlap) {\n                    x += (annotationPanels[i].positionOffsetX / 100) * (viewPortWidth - panelWidth);\n                    y += (annotationPanels[i].positionOffsetY / 100) * (viewPortHeight - panelHeight);\n                    if (x < 0)\n                        x = 0;\n                    if (y < 0)\n                        y = 0;\n                    if (x > viewPortWidth - panelWidth)\n                        x = viewPortWidth - panelWidth;\n                    if (y > viewPortHeight - panelHeight)\n                        y = viewPortHeight - panelHeight;\n                }\n                g.FillRectangleXYHW(p.bgBrush, x, y, panelWidth, panelHeight);\n                if (p.borderthickness > 0)\n                    g.DrawRectangleXYHW(p.pen, x, y, panelWidth, panelHeight);\n                //g.TextRenderingHint = YGraphics.TextRenderingHint.AntiAlias;\n                let sf = new YStringFormat(16384 /* YStringFormat.StringFormatFlags.NoClip */);\n                switch (p.panelTextAlign) {\n                    case MessagePanel.TextAlign.LEFT:\n                        sf.LineAlignment = 0 /* YStringFormat.StringAlignment.Near */;\n                        sf.Alignment = 0 /* YStringFormat.StringAlignment.Near */;\n                        break;\n                    case MessagePanel.TextAlign.RIGHT:\n                        sf.LineAlignment = 2 /* YStringFormat.StringAlignment.Far */;\n                        sf.Alignment = 2 /* YStringFormat.StringAlignment.Far */;\n                        break;\n                    default:\n                        sf.LineAlignment = 1 /* YStringFormat.StringAlignment.Center */;\n                        sf.Alignment = 1 /* YStringFormat.StringAlignment.Center */;\n                        break;\n                }\n                let r = new YRectangle((x + p.padding + p.borderthickness / 2), (y + p.padding + p.borderthickness / 2), ssize.width + 1, ssize.height + 1);\n                g.DrawStringRect(textToDisplay, p.font, p.font.brush, r, sf);\n            }\n        }\n    }\n    log(s) {\n        if (this._logFunction == null)\n            return;\n        this._logFunction(s);\n    }\n}\nYDataRenderer.RendererDebug = false;\nYDataRenderer.FloatToStrformats = [\"0\", \"0\", \"0\", \"0.0\", \"0.00\", \"0.000\", \"0.0000\"];\nYDataRenderer._disableMinMaxCheck = false;\nYDataRenderer.globalMouseMoveSet = false;\nYDataRenderer.globalMouseX = -1;\nYDataRenderer.globalMouseY = -1;\n(function (YDataRenderer) {\n    class CaptureTypeEnumItem extends YEnumItem {\n        constructor(value, humanreadable, container) {\n            super(value, humanreadable, CaptureType);\n        }\n    }\n    YDataRenderer.CaptureTypeEnumItem = CaptureTypeEnumItem;\n    class CaptureType extends YEnum {\n    }\n    CaptureType.PNG = new CaptureTypeEnumItem(\"PNG\", \"Bitmap (PNG)\");\n    CaptureType.SVG = new CaptureTypeEnumItem(\"SVG\", \"Vector (SVG)\");\n    YDataRenderer.CaptureType = CaptureType;\n    class CaptureTargetEnumItem extends YEnumItem {\n        constructor(value, humanreadable, container) {\n            super(value, humanreadable, CaptureTarget);\n        }\n    }\n    YDataRenderer.CaptureTargetEnumItem = CaptureTargetEnumItem;\n    class CaptureTarget extends YEnum {\n    }\n    CaptureTarget.ToClipBoard = new CaptureTargetEnumItem(\"ToClipBoard\", \"ClipBoard\");\n    CaptureTarget.ToFile = new CaptureTargetEnumItem(\"ToFile\", \"File\");\n    YDataRenderer.CaptureTarget = CaptureTarget;\n    class CaptureFormatsEnumItem extends YEnumItem {\n        constructor(value, humanreadable, container) {\n            super(value, humanreadable, CaptureFormats);\n        }\n    }\n    YDataRenderer.CaptureFormatsEnumItem = CaptureFormatsEnumItem;\n    class CaptureFormats extends YEnum {\n    }\n    CaptureFormats.Keep = new CaptureFormatsEnumItem(\"Keep\", \"Keep original size\");\n    CaptureFormats.Fixed = new CaptureFormatsEnumItem(\"Fixed\", \"Fixed size\");\n    CaptureFormats.FixedWidth = new CaptureFormatsEnumItem(\"FixedWidth\", \"Fixed width, keep ration aspect\");\n    CaptureFormats.FixedHeight = new CaptureFormatsEnumItem(\"FixedHeight\", \"Fixed height, keep ration aspect\");\n    YDataRenderer.CaptureFormats = CaptureFormats;\n})(YDataRenderer || (YDataRenderer = {}));\n/*\n    *  abstraction layer allowing to render in both bitmap and Vector(SVG) format\n    *\n    */\nexport class YGraphics {\n    constructor(canvas, width, height, dpi) {\n        this._c = null;\n        this._g = null;\n        this._width = 0;\n        this._height = 0;\n        this._dpi = 0;\n        this._image = null;\n        this._lastPen = null;\n        this._lastBrush = null;\n        this._lastFont = null;\n        this._clipCounter = 0;\n        this._textRenderingHint = null;\n        this._smoothingMode = YSmoothingMode.Default;\n        this._c = canvas;\n        this._g = this._c.getContext(\"2d\");\n        this._g.textBaseline = 'top';\n        this._width = width;\n        this._height = height;\n        this._dpi = dpi;\n    }\n    get_downloadableData() {\n        return this._c.toDataURL('image/png');\n    }\n    get graphics() { return this._g; }\n    setPen(p) {\n        if (p == this._lastPen)\n            return;\n        if (p != null) { //if (YDataRenderer.RendererDebug)  console.log(\"set Pen to \"+p.lineWidth+\"/\"+p.strokeStyle)\n            this._g.lineWidth = p.lineWidth;\n            let st = p.strokeStyle;\n            this._g.strokeStyle = p.strokeStyle;\n        }\n        else {\n            this._g.lineWidth = 0;\n        }\n        this._lastPen = p;\n    }\n    setBrush(b) {\n        if (b == this._lastBrush)\n            return;\n        if (b instanceof YSolidBrush) {\n            this._g.fillStyle = b.color.htmlCode;\n        }\n        else if (b instanceof YLinearGradientBrush) {\n            let lingrad = this._g.createLinearGradient(0, 0, 0, this._height);\n            lingrad.addColorStop(0, b.color1.htmlCode);\n            lingrad.addColorStop(1, b.color2.htmlCode);\n            this._g.fillStyle = lingrad;\n        }\n        else {\n            throw new Error(\"invalid / insupported brush type\");\n        }\n        this._lastBrush = b;\n    }\n    setFont(f) {\n        if ((f == this._lastFont) && !f.hasChanged)\n            return;\n        this._g.font = f.htmlCode;\n        this._lastFont = f;\n    }\n    DrawLineXY(p, x1, y1, x2, y2) {\n        if (p.noAntiAlias) {\n            let offset = (p.lineWidth == p.lineWidth >> 0) && ((p.lineWidth & 1) == 1) ? 0.5 : 0;\n            x1 = Math.round(x1) + offset;\n            y1 = Math.round(y1) + offset;\n            x2 = Math.round(x2) + offset;\n            y2 = Math.round(y2) + offset;\n        }\n        this.setPen(p);\n        this._g.beginPath();\n        this._g.moveTo(x1, y1);\n        this._g.lineTo(x2, y2);\n        this._g.stroke();\n    }\n    DrawLine(p, p1, p2) {\n        this.setPen(p);\n        this._g.beginPath();\n        this._g.moveTo(p1.X, p1.Y);\n        this._g.lineTo(p2.X, p2.Y);\n        this._g.stroke();\n    }\n    SetClip(rect) {\n        this._g.save(); // save the context\n        this._g.beginPath();\n        this._g.rect(rect.x, rect.y, rect.w, rect.h);\n        this._g.clip();\n        this._clipCounter++;\n    }\n    ResetClip() {\n        if (this._clipCounter <= 0)\n            throw new Error(\"clipping stack error\");\n        this._g.restore(); // restore the context including previous clipping\n        this._clipCounter--;\n        //console.log(\"-ResetClip , counter = \"+this._clipCounter);\n    }\n    MeasureString(text, font, width) {\n        this.setFont(font);\n        let res = new YSizeF(font, text);\n        let count = res.linesCount;\n        if (count == 0)\n            return res;\n        res.height = res.firstLineHeight * 1.2 + (count - 1) * res.lineHeight;\n        let max = 0;\n        let dim;\n        for (let i = 0; i < count; i++) {\n            dim = this._g.measureText(res.lines[i]);\n            max = Math.max(max, dim.width);\n        }\n        res.width = max;\n        return res;\n    }\n    MeasureStringSF(text, font, width, stringFormat) {\n        return this.MeasureString(text, font, width);\n    }\n    FillRectangle(brush, rect) {\n        this.setBrush(brush);\n        this._g.beginPath();\n        this._g.fillRect(rect.x, rect.y, rect.w, rect.h);\n        this._g.fill();\n    }\n    FillRectangleXYHW(brush, x, y, width, height) {\n        this.setBrush(brush);\n        this._g.beginPath();\n        this._g.fillRect(x, y, width, height);\n        this._g.fill();\n    }\n    DrawRectangle(p, rect) {\n        this.setPen(p);\n        this._g.beginPath();\n        if (p.noAntiAlias) {\n            let offset = (p.lineWidth == p.lineWidth >> 0) && ((p.lineWidth & 1) == 1) ? 0.5 : 0;\n            this._g.rect(Math.round(rect.x) + offset, Math.round(rect.y) + offset, Math.round(rect.w), Math.round(rect.h));\n        }\n        else {\n            this._g.rect(rect.x, rect.y, rect.w, rect.h);\n        }\n        this._g.stroke();\n    }\n    DrawRectangleXYHW(p, x, y, width, height) {\n        if (p.noAntiAlias) {\n            let offset = (p.lineWidth == p.lineWidth >> 0) && ((p.lineWidth & 1) == 1) ? 0.5 : 0;\n            x = Math.round(x) + offset;\n            y = Math.round(y) + offset;\n            width = Math.round(width);\n            height = Math.round(height);\n        }\n        this.setPen(p);\n        this._g.beginPath();\n        this._g.rect(x, y, width, height);\n        this._g.stroke();\n    }\n    DrawStringXY(s, font, brush, x, y) {\n        this.setPen(null);\n        this.setBrush(brush);\n        this.setFont(font);\n        let totalsz = this.MeasureString(s, font, 0);\n        let dy = totalsz.lineHeight;\n        for (let i = 0; i < totalsz.linesCount; i++) {\n            this._g.fillText(totalsz.lines[i], x, y);\n            y += dy;\n        }\n    }\n    DrawStringXYF(s, font, brush, x, y, format) {\n        if (YGraphics._debugDrawString) {\n            let pen = new YPen(YColor.Red, 1);\n            this.DrawLineXY(pen, x - 5, y, x + 5, y);\n            this.DrawLineXY(pen, x, y - 5, x, y + 5);\n        }\n        let sz = this.MeasureString(s, font, 10000);\n        if (format.Alignment == 1 /* YStringFormat.StringAlignment.Center */) {\n            x -= sz.width >> 1;\n        }\n        else if (format.Alignment == 2 /* YStringFormat.StringAlignment.Far */)\n            x -= sz.width;\n        if (format.LineAlignment == 1 /* YStringFormat.StringAlignment.Center */) {\n            y -= (sz.height / 2) >> 0;\n        }\n        else if (format.LineAlignment == 2 /* YStringFormat.StringAlignment.Far */)\n            y -= sz.height;\n        this.DrawStringXY(s, font, brush, x, y);\n    }\n    DrawStringPF(s, font, brush, p, format) {\n        this.DrawStringXYF(s, font, brush, p.X, p.Y, format);\n    }\n    DrawString(s, font, brush, p) {\n        if (YGraphics._debugDrawString) {\n            let pen = new YPen(YColor.Red, 1);\n            this.DrawLineXY(pen, p.X - 5, p.Y, p.X + 5, p.Y);\n            this.DrawLineXY(pen, p.X, p.Y - 5, p.X, p.Y + 5);\n        }\n        this.setPen(null);\n        this.setBrush(brush);\n        this.setFont(font);\n        this._g.fillText(s, p.X, p.Y);\n    }\n    DrawStringRect(s, font, brush, layoutRectangle, format) {\n        if (YGraphics._debugDrawString) {\n            let pen = new YPen(YColor.Red, 1);\n            this.DrawRectangle(pen, layoutRectangle);\n        }\n        this.setPen(null);\n        this.setBrush(brush);\n        this.setFont(font);\n        let totalsz = this.MeasureString(s, font, 0);\n        let dy = totalsz.lineHeight;\n        let y = layoutRectangle.y;\n        switch (format.LineAlignment) {\n            case 0 /* YStringFormat.StringAlignment.Near */:\n                break;\n            case 1 /* YStringFormat.StringAlignment.Center */:\n                y += (layoutRectangle.h - totalsz.height) / 2;\n                break;\n            case 2 /* YStringFormat.StringAlignment.Far */:\n                y += (layoutRectangle.h - totalsz.height);\n                break;\n        }\n        let xOrigin = layoutRectangle.x;\n        if (format.FormatFlags & 2 /* YStringFormat.StringFormatFlags.DirectionVertical */) {\n            this.Transform(layoutRectangle.x, layoutRectangle.y, Math.PI / 2);\n            y -= (layoutRectangle.y + layoutRectangle.w);\n            xOrigin -= layoutRectangle.x;\n        }\n        for (let i = 0; i < totalsz.linesCount; i++) {\n            let s = totalsz.lines[i];\n            let sz = this.MeasureString(s, font, 0);\n            let x = xOrigin;\n            switch (format.Alignment) {\n                case 0 /* YStringFormat.StringAlignment.Near */:\n                    break;\n                case 1 /* YStringFormat.StringAlignment.Center */:\n                    x += (layoutRectangle.w - sz.width) / 2;\n                    break;\n                case 2 /* YStringFormat.StringAlignment.Far */:\n                    x += (layoutRectangle.w - sz.width);\n                    break;\n            }\n            this._g.fillText(s, x, y);\n            y += dy;\n        }\n        if (format.FormatFlags & 2 /* YStringFormat.StringFormatFlags.DirectionVertical */)\n            this.ResetTransform();\n    }\n    Transform(dx, dy, angle) {\n        let sin = Math.sin(angle);\n        let cos = Math.cos(angle);\n        this._g.save();\n        this._g.transform(cos, sin, -sin, cos, dx, dy);\n    }\n    ResetTransform() {\n        this._g.restore();\n    }\n    FillEllipse(brush, x, y, width, height) {\n        this.setBrush(brush);\n        this._g.beginPath();\n        this._g.ellipse(x + width / 2, y + height / 2, width / 2, height / 2, 0, 0, 2 * Math.PI);\n        this._g.fill();\n    }\n    DrawEllipse(pen, x, y, width, height) {\n        this.setPen(pen);\n        this._g.beginPath();\n        this._g.ellipse(x + width / 2, y + height / 2, width / 2, height / 2, 0, 0, 2 * Math.PI);\n        this._g.stroke();\n    }\n    FillPolygon(brush, points) {\n        this.setBrush(brush);\n        if (points.length <= 2)\n            return;\n        this._g.beginPath();\n        if (brush.noAntiAlias) {\n            this._g.moveTo(Math.round(points[0].X) + 0.5, Math.round(points[0].Y) + 0.5);\n            for (let i = 1; i < points.length; i++) {\n                this._g.lineTo(Math.round(points[i].X) + 0.5, Math.round(points[i].Y) + 0.5);\n            }\n        }\n        else {\n            this._g.moveTo(points[0].X, points[0].Y);\n            for (let i = 1; i < points.length; i++) {\n                this._g.lineTo(points[i].X, points[i].Y);\n            }\n        }\n        this._g.closePath();\n        this._g.fill();\n    }\n    DrawPolygon(pen, points) {\n        this.setPen(pen);\n        if (points.length <= 1)\n            return;\n        this._g.beginPath();\n        if (pen.noAntiAlias) {\n            let offset = (pen.lineWidth == pen.lineWidth >> 0) && ((pen.lineWidth & 1) == 1) ? 0.5 : 0;\n            this._g.moveTo(Math.round(points[0].X) + offset, Math.round(points[0].Y) + offset);\n            for (let i = 1; i < points.length; i++) {\n                this._g.lineTo(Math.round(points[i].X) + offset, Math.round(points[i].Y) + offset);\n            }\n        }\n        else {\n            this._g.moveTo(points[0].X, points[0].Y);\n            for (let i = 1; i < points.length; i++) {\n                this._g.lineTo(points[i].X, points[i].Y);\n            }\n        }\n        this._g.closePath();\n        this._g.stroke();\n    }\n    DrawLines(pen, points) {\n        this.setPen(pen);\n        if (points.length <= 1)\n            return;\n        this._g.beginPath();\n        this._g.lineCap = \"round\";\n        this._g.lineJoin = \"round\";\n        this._g.moveTo(points[0].X, points[0].Y);\n        for (let i = 1; i < points.length; i++) {\n            this._g.lineTo(points[i].X, points[i].Y);\n        }\n        this._g.stroke();\n    }\n    Dispose() {\n        this._c = null;\n        this._g = null;\n        this._width = 0;\n        this._height = 0;\n        this._dpi = 0;\n    }\n    get TextRenderingHint() { return this._textRenderingHint; }\n    set TextRenderingHint(value) { this._textRenderingHint = value; }\n    get SmoothingMode() { return this._smoothingMode; }\n    set SmoothingMode(value) { this._smoothingMode = value; }\n    DrawImage(srcimage, destRect, srcRect, srcUnit) {\n        // implementation is not complete (coordinates and sizes)\n        this._g.drawImage(srcimage, srcRect.x, srcRect.y, srcRect.w, srcRect.h, destRect.x, destRect.y, destRect.w, destRect.h);\n    }\n    comment(s) { }\n}\nYGraphics._debugDrawString = false;\nexport class YGraphicsSVG extends YGraphics {\n    constructor(canvas, width, height, dpi) {\n        super(canvas, width, height, dpi);\n        this._clipcount = 0;\n        this._clipSectionsToClose = 0;\n        this._transformSectionsToClose = 0;\n        this._gradientCount = 0;\n        YGraphicsSVG.SVGID++;\n        this._SVGdefs = new YStringBuilder();\n        this._SVGcontents = new YStringBuilder();\n        this._SVGdefs.AppendLine(\"<clipPath id=\\\"pageClip_\" + YGraphicsSVG.SVGID.toString() + \"\\\"><rect x=\\\"0\\\" y=\\\"0\\\"  width=\\\"\" + width.toString() + \"\\\" height=\\\"\" + height.toString() + \"\\\"/></clipPath>\");\n    }\n    static escapeXml(unsafe) {\n        return unsafe.replace(/[^ !#$%(-;=?-z]/g, (c) => '&#' + c.charCodeAt(0) + ';'); // MV power!  :-)\n    }\n    get_downloadableData() {\n        return \"data:image/svg+xml;base64,\" + btoa(this.get_svgContents());\n    }\n    DrawLineXY(p, x1, y1, x2, y2) {\n        this._SVGcontents.AppendLine(\"<line x1=\\\"\" + x1.toString() + \"\\\" \"\n            + \" y1 =\\\"\" + y1.toString() + \"\\\" \"\n            + \" x2 =\\\"\" + x2.toString() + \"\\\" \"\n            + \" y2 =\\\"\" + y2.toString() + \"\\\" \"\n            + \"style = \\\"stroke:\" + p.color.svgCode + \";stroke-opacity:\" + p.color.alphaCode + \"; stroke-width:\" + p.lineWidth.toString() + \"\\\"/>\");\n    }\n    DrawLine(p, p1, p2) { this.DrawLineXY(p, p1.X, p1.Y, p2.X, p2.Y); }\n    SetClip(rect) {\n        this.ResetClip();\n        this._SVGdefs.AppendLine(\"<clipPath id=\\\"clip_\" + YGraphicsSVG.SVGID.toString() + \"_\" + this._clipcount.toString() + \"\\\"><rect x=\\\"\" + rect.x.toString() + \"\\\" y=\\\"\" + rect.y.toString()\n            + \"\\\"  width=\\\"\" + rect.w.toString() + \"\\\" height=\\\"\" + rect.h.toString() + \"\\\"/></clipPath>\");\n        this._SVGcontents.AppendLine(\"<g clip-path=\\\"url(#clip_\" + YGraphicsSVG.SVGID.toString() + \"_\" + this._clipcount.toString() + \")\\\">\");\n        this._clipcount++;\n        this._clipSectionsToClose++;\n    }\n    ResetClip() {\n        if (this._clipSectionsToClose > 0) {\n            this._SVGcontents.AppendLine(\"</g>\");\n            this._clipSectionsToClose--;\n        }\n    }\n    BrushToSVG(brush, revert) {\n        let fillParam = \"\";\n        if (brush instanceof YSolidBrush) {\n            fillParam = \"fill = \\\"\" + brush.color.svgCode + \"\\\" fill-opacity=\\\"\" + brush.color.alphaCode + \"\\\" \";\n        }\n        else if (brush instanceof YLinearGradientBrush) {\n            this._SVGdefs.AppendLine(\"<linearGradient id=\\\"grad_\" + YGraphicsSVG.SVGID.toString() + \"_\" + this._gradientCount + \"\\\" \"\n                + \"x1=\\\"0%\\\" \" // over-simplified gradient translation as we only use full size vertical gradients.\n                + (revert ? \"y1=\\\"100%\\\" \" : \"y1=\\\"0%\\\" \") // Yes, I know, it's cheap.\n                + \"x2=\\\"0%\\\" \"\n                + (revert ? \"y2=\\\"0%\\\" \" : \"y2=\\\"100%\\\" \") + \">\\r\\n\"\n                + \"<stop offset=\\\"0%\\\" style =\\\"stop-color:\" + brush.color1.svgCode + \";stop-opacity:\" + brush.color1.alphaCode + \"\\\"/>\\r\\n\"\n                + \"<stop offset=\\\"100%\\\" style =\\\"stop-color:\" + brush.color2.svgCode + \";stop-opacity:\" + brush.color2.alphaCode + \"\\\"/>\\r\\n\"\n                + \"</linearGradient>\");\n            fillParam = \"fill=\\\"url(#grad_\" + YGraphicsSVG.SVGID.toString() + \"_\" + this._gradientCount + \")\\\" \";\n            this._gradientCount++;\n        }\n        else {\n            throw new ReferenceError(\"unsupported brush type.\");\n        }\n        return fillParam;\n    }\n    FillRectangle(brush, rect) {\n        this._SVGcontents.AppendLine(\"<rect x=\\\"\" + rect.x.toString() + \"\\\" \"\n            + \" y =\\\"\" + rect.y.toString() + \"\\\" \"\n            + \" width =\\\"\" + rect.w.toString() + \"\\\" \"\n            + \" height =\\\"\" + rect.h.toString() + \"\\\" \"\n            + this.BrushToSVG(brush, true)\n            + \"style=\\\"stroke-width:0\\\"/>\");\n    }\n    FillRectangleXYHW(brush, x, y, width, height) { this.FillRectangle(brush, new YRectangle(x, y, width, height)); }\n    DrawRectangle(p, rect) {\n        this._SVGcontents.AppendLine(\"<rect x=\\\"\" + rect.x.toString() + \"\\\" \"\n            + \" y =\\\"\" + rect.y.toString() + \"\\\" \"\n            + \" width =\\\"\" + rect.w.toString() + \"\\\" \"\n            + \" height =\\\"\" + rect.h.toString() + \"\\\" \"\n            + \" fill=\\\"none\\\" \"\n            + \"style = \\\"stroke:\" + p.color.svgCode + \";stroke-opacity:\" + p.color.alphaCode + \"; stroke-width:\" + p.lineWidth.toString() + \"\\\"/>\");\n    }\n    DrawRectangleXYHW(p, x, y, width, height) { this.DrawRectangle(p, new YRectangle(x, y, width, height)); }\n    DrawEllipse(pen, x, y, width, height) {\n        this._SVGcontents.AppendLine(\"<ellipse  cx=\\\"\" + (x + width / 2.0).toString() + \"\\\" \"\n            + \" cy =\\\"\" + (y + height / 2.0).toString() + \"\\\" \"\n            + \" rx =\\\"\" + (width / 2).toString() + \"\\\" \"\n            + \" ry =\\\"\" + (height / 2).toString() + \"\\\" \"\n            + \" fill=\\\"none\\\" \"\n            + \"style = \\\"stroke:\" + pen.color.svgCode + \";stroke-opacity:\" + pen.color.alphaCode + \"; stroke-width:\" + pen.lineWidth.toString() + \"\\\"/>\");\n    }\n    FillEllipse(brush, x, y, width, height) {\n        this._SVGcontents.AppendLine(\"<ellipse  cx=\\\"\" + (x + width / 2.0).toString() + \"\\\" \"\n            + \" cy =\\\"\" + (y + height / 2.0).toString() + \"\\\" \"\n            + \" rx =\\\"\" + (width / 2).toString() + \"\\\" \"\n            + \" ry =\\\"\" + (height / 2).toString() + \"\\\" \"\n            + this.BrushToSVG(brush, false)\n            + \"style=\\\"stroke-width:0\\\"/>\");\n    }\n    DrawStringXY(s, font, brush, x, y) {\n        let tokens = s.split('\\n');\n        for (let i = 0; i < tokens.length; i++) {\n            s = tokens[i];\n            this._SVGcontents.AppendLine(\"<text x=\\\"\" + x.toString() + \"\\\" y=\\\"\" + (y + font.sizeInPoints).toString() + \"\\\" text-anchor=\\\"start\\\" \" // dominant-baseline=\\\"hanging\\\" \" //Not supported in  Inkscape :-(\n                + \"font-family=\\\"\" + font.name.toString() + \"\\\" \"\n                + \"font-size=\\\"\" + font.sizeInPoints.toString() + \"pt\\\" \"\n                + \"font-weight=\\\"\" + (font.bold ? \"bold\" : \"normal\") + \"\\\" \"\n                + \"font-style=\\\"\" + (font.italic ? \"italic\" : \"normal\") + \"\\\" \"\n                + this.BrushToSVG(brush, false)\n                + \"style=\\\"stroke-width:0\\\">\\r\\n\"\n                + YGraphicsSVG.escapeXml(s)\n                + \"\\r\\n</text>\");\n            y += (font.sizeInPoints * 1.75);\n        }\n    }\n    DrawString(s, font, brush, p) {\n        if (YGraphics._debugDrawString) {\n            let pen = new YPen(YColor.Red, 1);\n            this.DrawLineXY(pen, p.X - 5, p.Y, p.X + 5, p.Y);\n            this.DrawLineXY(pen, p.X, p.Y - 5, p.X, p.Y + 5);\n        }\n        this.DrawStringXY(s, font, brush, p.X, p.Y);\n    }\n    DrawStringF(s, font, brush, point, format) {\n        let totalsz = this.MeasureString(s, font, 0);\n        let y = point.Y + font.size * 1.25;\n        switch (format.LineAlignment) {\n            case 0 /* YStringFormat.StringAlignment.Near */:\n                break;\n            case 1 /* YStringFormat.StringAlignment.Center */:\n                y += -totalsz.height / 2;\n                break;\n            case 2 /* YStringFormat.StringAlignment.Far */:\n                y += -totalsz.height;\n                break;\n        }\n        let tokens = s.split('\\n');\n        for (let i = 0; i < tokens.length; i++) {\n            let s = tokens[i];\n            let sz = this.MeasureString(s, font, 0);\n            let x = point.X;\n            switch (format.Alignment) {\n                case 0 /* YStringFormat.StringAlignment.Near */:\n                    break;\n                case 1 /* YStringFormat.StringAlignment.Center */:\n                    x += -sz.width / 2;\n                    break;\n                case 2 /* YStringFormat.StringAlignment.Far */:\n                    x += -sz.width;\n                    break;\n            }\n            this._SVGcontents.AppendLine(\"<text x=\\\"\" + x.toString() + \"\\\" y=\\\"\" + y.toString() + \"\\\" text-anchor=\\\"start\\\" \" // dominant-baseline=\\\"hanging\\\" \" //Not supported in  Inkscape :-(\n                + \"font-family=\\\"\" + font.name.toString() + \"\\\" \"\n                + \"font-size=\\\"\" + font.sizeInPoints.toString() + \"pt\\\" \"\n                + \"font-weight=\\\"\" + (font.bold ? \"bold\" : \"normal\") + \"\\\" \"\n                + \"font-style=\\\"\" + (font.italic ? \"italic\" : \"normal\") + \"\\\" \"\n                + this.BrushToSVG(brush, false)\n                + \"style=\\\"stroke-width:0\\\">\\r\\n\"\n                + YGraphicsSVG.escapeXml(s)\n                + \"\\r\\n</text>\");\n            y += (font.sizeInPoints * 1.75);\n        }\n    }\n    DrawStringRect(s, font, brush, layoutRectangle, format) {\n        if (YGraphics._debugDrawString) {\n            let pen = new YPen(YColor.Red, 1);\n            this.DrawRectangle(pen, layoutRectangle);\n        }\n        let totalsz = this.MeasureString(s, font, 0);\n        let y = layoutRectangle.y + font.sizeInPoints * 1.1;\n        switch (format.LineAlignment) {\n            case 0 /* YStringFormat.StringAlignment.Near */:\n                break;\n            case 1 /* YStringFormat.StringAlignment.Center */:\n                y += (layoutRectangle.h - totalsz.height) / 2;\n                break;\n            case 2 /* YStringFormat.StringAlignment.Far */:\n                y += (layoutRectangle.h - totalsz.height);\n                break;\n        }\n        let tokens = s.split('\\n');\n        for (let i = 0; i < tokens.length; i++) {\n            let s = tokens[i];\n            let sz = this.MeasureString(s, font, 0);\n            let x = layoutRectangle.x;\n            switch (format.Alignment) {\n                case 0 /* YStringFormat.StringAlignment.Near */:\n                    break;\n                case 1 /* YStringFormat.StringAlignment.Center */:\n                    x += (layoutRectangle.w - sz.width) / 2;\n                    break;\n                case 2 /* YStringFormat.StringAlignment.Far */:\n                    x += (layoutRectangle.w - sz.width);\n                    break;\n            }\n            this._SVGcontents.AppendLine(\"<text x=\\\"\" + x.toString() + \"\\\" y=\\\"\" + y.toString() + \"\\\" text-anchor=\\\"start\\\" \" // dominant-baseline=\\\"hanging\\\" \" //Not supported in  Inkscape :-(\n                + \"font-family=\\\"\" + font.name.toString() + \"\\\" \"\n                + \"font-size=\\\"\" + (font.sizeInPoints * 1.1).toString() + \"pt\\\" \"\n                + \"font-weight=\\\"\" + (font.bold ? \"bold\" : \"normal\") + \"\\\" \"\n                + \"font-style=\\\"\" + (font.italic ? \"italic\" : \"normal\") + \"\\\" \"\n                + this.BrushToSVG(brush, false)\n                + \"style=\\\"stroke-width:0\\\">\\r\\n\"\n                + YGraphicsSVG.escapeXml(s)\n                + \"\\r\\n</text>\");\n            y += (font.sizeInPoints * 1.75);\n        }\n    }\n    Transform(dx, dy, angle) {\n        this._SVGcontents.AppendLine(\"<g transform=\\\"translate(\" + dx.toString() + \" \" + dy.toString() + \") rotate(\" + (180 * angle / Math.PI).toString() + \")\\\">\");\n        this._transformSectionsToClose++;\n    }\n    ResetTransform() {\n        if (this._transformSectionsToClose > 0) {\n            this._SVGcontents.AppendLine(\"</g>\");\n            this._transformSectionsToClose--;\n        }\n    }\n    DrawPolygon(pen, points) {\n        if (points.length < 2)\n            return;\n        this._SVGcontents.Append(\"<path  d=\\\"M \" + points[0].X.toString() + \" \" + points[0].Y.toString());\n        for (let i = 1; i < points.length; i += 1) {\n            this._SVGcontents.Append(\" L \" + points[i].X.toString() + \" \" + points[i].Y.toString());\n        }\n        this._SVGcontents.AppendLine(\" z\\\" fill=\\\"none\\\" \"\n            + \"style=\\\"stroke:\" + pen.color.svgCode + \";stroke-opacity:\" + pen.color.alphaCode + \"; stroke-width:\" + pen.lineWidth.toString() + \"\\\"/>\");\n    }\n    DrawLines(pen, points) {\n        if (points.length < 2)\n            return;\n        this._SVGcontents.Append(\"<path  d=\\\"M \" + points[0].X.toString() + \" \" + points[0].Y.toString());\n        for (let i = 1; i < points.length; i++) {\n            this._SVGcontents.Append(\" L \" + points[i].X.toString() + \" \" + points[i].Y.toString());\n        }\n        this._SVGcontents.AppendLine(\"\\\" fill=\\\"none\\\" \"\n            + \"style=\\\"stroke:\" + pen.color.svgCode + \";stroke-opacity:\" + pen.color.alphaCode + \"; stroke-linecap:round; stroke-linejoin:round;stroke-width:\" + pen.lineWidth.toString() + \"\\\"/>\");\n    }\n    FillPolygon(brush, points) {\n        if (points.length < 2)\n            return;\n        this._SVGcontents.Append(\"<path  d=\\\"M \" + points[0].X.toString() + \" \" + points[0].Y.toString());\n        for (let i = 1; i < points.length; i++) {\n            this._SVGcontents.Append(\" L \" + points[i].X.toString() + \" \" + points[i].Y.toString());\n        }\n        this._SVGcontents.AppendLine(\" z\\\" \" + this.BrushToSVG(brush, false)\n            + \"style=\\\"stroke-width:0\\\"/>\\r\\n\");\n    }\n    DrawImage(image, destRect, srcRect, srcUnit) { throw new Error(\"DrawImage not supported, find an other way.\"); }\n    save(filename) {\n        throw new Error(\"Direct save to file not supported.\");\n    }\n    comment(s) { this._SVGcontents.AppendLine(\"<!--\" + s + \"-->\"); }\n    get_svgContents() {\n        let physicalWidth = (2.54 * (this._width / this._dpi)).toFixed(3);\n        let physicalheight = (2.54 * (this._height / this._dpi)).toFixed(3);\n        while (this._clipSectionsToClose > 0) {\n            this._SVGcontents.AppendLine(\"</g>\");\n            this._clipSectionsToClose--;\n        }\n        while (this._transformSectionsToClose > 0) {\n            this._SVGcontents.AppendLine(\"</g>\");\n            this._transformSectionsToClose--;\n        }\n        return \"<?xml version = \\\"1.0\\\" standalone = \\\"no\\\" ?>\\r\\n\"\n            + \"<!DOCTYPE svg PUBLIC \\\"-//W3C//DTD SVG 1.1//EN\\\" \\\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\\\">\\r\\n\"\n            + \"<svg width = \\\"\" + physicalWidth + \"cm\\\" height = \\\"\" + physicalheight + \"cm\\\" viewBox = \\\"0 0 \" + this._width.toString() + \" \" + this._height.toString() + \"\\\" \"\n            + \"xmlns = \\\"http://www.w3.org/2000/svg\\\" version = \\\"1.1\\\" >\\r\\n\"\n            + \"<defs>\\r\\n\"\n            + this._SVGdefs.contents\n            + \"</defs>\\r\\n\"\n            + \"<g clip-path=\\\"url(#pageClip_\" + YGraphicsSVG.SVGID.toString() + \")\\\">\\r\\n\"\n            + this._SVGcontents.contents\n            + \"</g>\\r\\n\"\n            + \"</svg>\\n\";\n    }\n}\nYGraphicsSVG.SVGID = 0;\n", "/*\n*   Yocto-Visualization (for web), a free web-based application\n*   to visualize Yoctopuce Sensors.\n*\n*  Solid gauge widget renderer\n*\n*   - - - - - - - - - License information: - - - - - - - - -\n*\n*  Copyright (C) 2021 and beyond by Yoctopuce Sarl, Switzerland.\n*\n*  Yoctopuce Sarl (hereafter Licensor) grants to you a perpetual\n*  non-exclusive license to use, modify, copy and integrate this\n*  file into your software for the sole purpose of interfacing\n*  with Yoctopuce products.\n*\n*  You may reproduce and distribute copies of this file in\n*  source or object form, as long as the sole purpose of this\n*  code is to interface with Yoctopuce products. You must retain\n*  this notice in the distributed source file.\n*\n*  You should refer to Yoctopuce General Terms and Conditions\n*  for additional information regarding your rights and\n*  obligations.\n*\n*  THE SOFTWARE AND DOCUMENTATION ARE PROVIDED \"AS IS\" WITHOUT\n*  WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING\n*  WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, FITNESS\n*  FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO\n*  EVENT SHALL LICENSOR BE LIABLE FOR ANY INCIDENTAL, SPECIAL,\n*  INDIRECT OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA,\n*  COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY OR\n*  SERVICES, ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT\n*  LIMITED TO ANY DEFENSE THEREOF), ANY CLAIMS FOR INDEMNITY OR\n*  CONTRIBUTION, OR OTHER SIMILAR COSTS, WHETHER ASSERTED ON THE\n*  BASIS OF CONTRACT, TORT (INCLUDING NEGLIGENCE), BREACH OF\n*  WARRANTY, OR OTHERWISE.\n*/\nimport * as YDataRendering from \"./YDataRendererCommon.js\";\nexport class YAngularZone extends YDataRendering.Zone {\n    get path() {\n        return this._path;\n    }\n    setPathSize(count) {\n        this._path = new Array(count).fill(null);\n    }\n    setPathPoint(index, p) {\n        this._path[index] = p;\n    }\n    resetPath() {\n        this._path = null;\n    }\n    resetCache() {\n        this.resetPath();\n    }\n    get width() {\n        return this._width;\n    }\n    set width(value) {\n        if (value <= 0)\n            throw new RangeError(\"Width must be a positive value\");\n        this._width = value;\n        this._path = null;\n        this._parentRenderer.redraw();\n    }\n    get outerRadius() {\n        return this._outerRadius;\n    }\n    set outerRadius(value) {\n        this._outerRadius = Math.max(0, Math.min(100, value));\n        this._path = null;\n        this._parentRenderer.redraw();\n    }\n    constructor(parentRenderer, directParent) {\n        super(parentRenderer, directParent);\n        this._path = null;\n        this._width = 10;\n        this._outerRadius = 98;\n    }\n}\nexport class YAngularGauge extends YDataRendering.YDataRenderer {\n    get min() {\n        return this._min;\n    }\n    set min(value) {\n        if ((value >= this._max) && (!YDataRendering.YDataRenderer.minMaxCheckDisabled)) {\n            throw new RangeError(\"Min cannot be greater than max (\" + this._max.toString() + \")\");\n        }\n        this._min = value;\n        for (let i = 0; i < this._zones.length; i++) {\n            this._zones[i].resetPath();\n        }\n        if (this._needleValue < this._min) {\n            this._needleValue = this._min;\n        }\n        this.redraw();\n    }\n    get max() {\n        return this._max;\n    }\n    set max(value) {\n        if ((value <= this._min) && (!YDataRendering.YDataRenderer.minMaxCheckDisabled)) {\n            throw new RangeError(\"Max cannot be less than min (\" + this._min.toString() + \")\");\n        }\n        this._max = value;\n        for (let i = 0; i < this._zones.length; i++) {\n            this._zones[i].resetPath();\n        }\n        if (this._needleValue > this._max) {\n            this._needleValue = this._max;\n        }\n        this.redraw();\n    }\n    get borderpen() {\n        if (this._borderpen == null) {\n            this._borderpen = new YDataRendering.YPen(this._borderColor, this._borderThickness);\n            this._borderpen.startCap = 1 /* YDataRendering.YPen.LineCap.Square */;\n            this._borderpen.endCap = 1 /* YDataRendering.YPen.LineCap.Square */;\n        }\n        return this._borderpen;\n    }\n    get borderColor() {\n        return this._borderColor;\n    }\n    set borderColor(value) {\n        this._borderColor = value;\n        this._borderpen = null;\n        this.redraw();\n    }\n    get backgroundColor1() {\n        return this._backgroundColor1;\n    }\n    set backgroundColor1(value) {\n        this._backgroundColor1 = value;\n        this._bgBrush = null;\n        this.redraw();\n    }\n    get backgroundColor2() {\n        return this._backgroundColor2;\n    }\n    set backgroundColor2(value) {\n        this._backgroundColor2 = value;\n        this._bgBrush = null;\n        this.redraw();\n    }\n    get borderThickness() {\n        return this._borderThickness;\n    }\n    set borderThickness(value) {\n        if (value < 0)\n            throw new RangeError(\"thickness must be a positive value\");\n        this._borderThickness = value;\n        this._borderpen = null;\n        this.redraw();\n    }\n    get valueFormater() {\n        return this._valueFormater;\n    }\n    set valueFormater(value) {\n        this._valueFormater = value;\n        this.redraw();\n    }\n    get minmaxFormater() {\n        return this._minmaxFormater;\n    }\n    set minmaxFormater(value) {\n        this._minmaxFormater = value;\n        this.redraw();\n    }\n    get thickness() {\n        return this._thickness;\n    }\n    set thickness(value) {\n        if (value < 0)\n            throw new RangeError(\"Thickness must be a positive value\");\n        this._thickness = Math.max(Math.min(value, 80), 1);\n        this.redraw();\n    }\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        this._value = value;\n        this.redraw();\n    }\n    get color1() {\n        return this._color1;\n    }\n    set color1(value) {\n        this._color1 = value;\n        this.redraw();\n    }\n    get color2() {\n        return this._color2;\n    }\n    set color2(value) {\n        this._color2 = value;\n        this.redraw();\n    }\n    get graduationColor() {\n        return this._graduationColor;\n    }\n    set graduationColor(value) {\n        this._graduationColor = value;\n        this._graduationPen = null;\n        this.redraw();\n    }\n    get graduationThickness() {\n        return this._graduationThickness;\n    }\n    set graduationThickness(value) {\n        if (value < 0)\n            throw new RangeError(\"Thickness must be a positive value\");\n        this._graduationThickness = value;\n        this._graduationPen = null;\n        this.redraw();\n    }\n    get graduationSize() {\n        return this._graduationSize;\n    }\n    set graduationSize(value) {\n        if (value <= 0)\n            throw new RangeError(\"Graduation size must be a positive value\");\n        this._graduationSize = value;\n        this.redraw();\n    }\n    get graduation() {\n        return this._graduation;\n    }\n    set graduation(value) {\n        this._graduation = value;\n        this.redraw();\n    }\n    get unitFactor() {\n        return this._unitFactor;\n    }\n    set unitFactor(value) {\n        if (value == 0)\n            throw new RangeError(\"Factor cannot be zero.\");\n        this._unitFactor = value;\n        this.redraw();\n    }\n    get unit() {\n        return this._unit;\n    }\n    set unit(value) {\n        this._unit = value;\n        this.redraw();\n    }\n    get unitFont() {\n        return this._unitFont;\n    }\n    get subgraduationColor() {\n        return this._subgraduationColor;\n    }\n    set subgraduationColor(value) {\n        this._subgraduationColor = value;\n        this._subgraduationPen = null;\n        this.redraw();\n    }\n    get subgraduationThickness() {\n        return this._subgraduationThickness;\n    }\n    set subgraduationThickness(value) {\n        if (value < 0)\n            throw new RangeError(\"Thickness must be a positive value\");\n        this._subgraduationThickness = value;\n        this._subgraduationPen = null;\n        this.redraw();\n    }\n    get subgraduationSize() {\n        return this._subgraduationSize;\n    }\n    set subgraduationSize(value) {\n        if (value <= 0)\n            throw new RangeError(\"Size must be a positive value\");\n        this._subgraduationSize = value;\n        this.redraw();\n    }\n    get graduationOuterRadiusSize() {\n        return this._graduationOuterRadiusSize;\n    }\n    set graduationOuterRadiusSize(value) {\n        this._graduationOuterRadiusSize = Math.max(0, Math.min(100, value));\n        this.redraw();\n    }\n    get subgraduationCount() {\n        return this._subgraduationCount;\n    }\n    set subgraduationCount(value) {\n        if (value < 0)\n            throw new RangeError(\"Count must be a positive value\");\n        this._subgraduationCount = value;\n        this.redraw();\n    }\n    get statusColor() {\n        return this._statusColor;\n    }\n    set statusColor(value) {\n        this._statusColor = value;\n        this.redraw();\n    }\n    get statusFont() {\n        return this._unitFont;\n    }\n    get statusLine() {\n        return this._statusLine;\n    }\n    set statusLine(value) {\n        this._statusLine = value;\n        this.redraw();\n    }\n    get showNeedle() {\n        return this._showNeedle;\n    }\n    set showNeedle(value) {\n        this._showNeedle = value;\n        this.redraw();\n    }\n    get needleColor() {\n        return this._needleColor;\n    }\n    set needleColor(value) {\n        this._needleColor = value;\n        this._needleBrush = null;\n        this.redraw();\n    }\n    get needleMaxSpeed() {\n        return this._needleMaxSpeed;\n    }\n    set needleMaxSpeed(value) {\n        if (value <= 0)\n            throw new RangeError(\"Speed must be a positive value\");\n        this._needleMaxSpeed = value;\n        this.redraw();\n    }\n    get needleLength1() {\n        return this._needleLength1;\n    }\n    set needleLength1(value) {\n        this._needleLength1 = value;\n        this.redraw();\n    }\n    get needleLength2() {\n        return this._needleLength2;\n    }\n    set needleLength2(value) {\n        this._needleLength2 = value;\n        this.redraw();\n    }\n    get needleWidth() {\n        return this._needleWidth;\n    }\n    set needleWidth(value) {\n        if (value <= 0)\n            throw new RangeError(\"Width must be a positive value\");\n        this._needleWidth = value;\n        this.redraw();\n    }\n    get needleContourColor() {\n        return this._needleContourColor;\n    }\n    set needleContourColor(value) {\n        this._needleContourColor = value;\n        this._needleContourPen = null;\n        this.redraw();\n    }\n    get needleContourThickness() {\n        return this._needleContourThickness;\n    }\n    set needleContourThickness(value) {\n        if (value < 0)\n            throw new RangeError(\"Thickness must be a positive value\");\n        this._needleContourThickness = value;\n        this._needleContourPen = null;\n        this.redraw();\n    }\n    get graduationFont() {\n        return this._graduationFont;\n    }\n    get showMinMax() {\n        return this._showMinMax;\n    }\n    set showMinMax(value) {\n        this._showMinMax = value;\n        this.redraw();\n    }\n    constructor(UIContainer, logFunction) {\n        super(UIContainer, logFunction);\n        this._min = 0;\n        this._max = 100;\n        this.SegmentMaxLength = 8;\n        this._borderpen = null;\n        this._borderColor = YDataRendering.YColor.Black;\n        this._bgBrush = null;\n        this._backgroundColor1 = YDataRendering.YColor.FromArgb(255, 240, 240, 240);\n        this._backgroundColor2 = YDataRendering.YColor.FromArgb(255, 200, 200, 200);\n        this._borderThickness = 5;\n        this._valueFormater = null;\n        this._minmaxFormater = null;\n        this._thickness = 20;\n        this._value = 0;\n        this._needleValue = 0;\n        this._color1 = YDataRendering.YColor.Green;\n        this._color2 = YDataRendering.YColor.Red;\n        this._graduationPen = null;\n        this._graduationColor = YDataRendering.YColor.Black;\n        this._graduationThickness = 2;\n        this._graduationSize = 10;\n        this._graduation = 10;\n        this._unitFactor = 1;\n        this._unit = \"\";\n        this._subgraduationPen = null;\n        this._subgraduationColor = YDataRendering.YColor.Black;\n        this._subgraduationThickness = 1;\n        this._subgraduationSize = 5;\n        this._graduationOuterRadiusSize = 98;\n        this._subgraduationCount = 5;\n        this._statusColor = YDataRendering.YColor.Gray;\n        this._statusLine = \"\";\n        this._showNeedle = true;\n        this._needleBrush = null;\n        this._needleColor = YDataRendering.YColor.Red;\n        this._needleMaxSpeed = 5;\n        this._needleLength1 = 90;\n        this._needleLength2 = 5;\n        this._needleWidth = 5;\n        this._needleContourPen = null;\n        this._needleContourColor = YDataRendering.YColor.DarkRed;\n        this._needleContourThickness = 1;\n        this._showMinMax = true;\n        this._path = null;\n        this._graduationFont = new YDataRendering.YFont(this, this, Math.min(this.getContainerInnerWidth(), this.getContainerInnerHeight()) / 15, null);\n        this._unitFont = new YDataRendering.YFont(this, this, Math.min(this.getContainerInnerWidth(), this.getContainerInnerHeight()) / 20, null);\n        this._statusFont = new YDataRendering.YFont(this, this, Math.min(this.getContainerInnerWidth(), this.getContainerInnerHeight()) / 15, null);\n        this.unitFont.color = YDataRendering.YColor.DarkGray;\n        this._statusFont.color = YDataRendering.YColor.DarkGray;\n        this.resizeRule = YDataRendering.Proportional.ResizeRule.RELATIVETOBOTH;\n        this._zones = [];\n    }\n    clearCachedObjects() {\n        if (this._zones != null) {\n            for (let i = 0; i < this._zones.length; i++) {\n                this._zones[i].resetPath();\n            }\n        }\n        this._path = null;\n        this._bgBrush = null;\n    }\n    get zones() {\n        return this._zones;\n    }\n    AddZone() {\n        let z = new YAngularZone(this, this);\n        this._zones.push(z);\n        return z;\n    }\n    Render(g, w, h) {\n        let mainViewPort = new YDataRendering.ViewPortSettings();\n        mainViewPort.Lmargin = 0;\n        mainViewPort.Rmargin = 0;\n        mainViewPort.Tmargin = 0;\n        mainViewPort.Bmargin = 0;\n        g.SmoothingMode = YDataRendering.YSmoothingMode.HighQuality;\n        g.TextRenderingHint = YDataRendering.YTextRenderingHint.AntiAlias;\n        let stringFormat4Sizing = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\n        let stringFormat = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\n        stringFormat.Alignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\n        stringFormat.LineAlignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\n        this.drawAnnotationPanels(g, this._annotationPanels, w, h, false, mainViewPort);\n        g.TextRenderingHint = YDataRendering.YTextRenderingHint.AntiAlias;\n        let xcenter = mainViewPort.Lmargin + (w - mainViewPort.Lmargin - mainViewPort.Rmargin) / 2;\n        let ycenter = mainViewPort.Tmargin + (h - mainViewPort.Tmargin - mainViewPort.Bmargin) / 2;\n        let radius = Math.min((w - mainViewPort.Lmargin - mainViewPort.Rmargin) / 2, (h - mainViewPort.Tmargin - mainViewPort.Bmargin) / 2) - this.borderThickness;\n        let circonference = (2 * radius * 3.14) >> 0;\n        let AngleAperture = 4 * 2 * Math.PI / 5;\n        if (this._path == null) {\n            let outterlength = (2 * radius * Math.PI);\n            let stepCount = (outterlength / this.SegmentMaxLength) >> 0;\n            let stepsize = (2 * Math.PI) / stepCount;\n            this._path = new Array(stepCount).fill(null);\n            let n = 0;\n            for (let i = 0; i < stepCount; i++) {\n                let a = (2 * i * Math.PI) / stepCount;\n                this._path[n++] = new YDataRendering.PointF((xcenter + radius * Math.cos(a)), (ycenter - radius * Math.sin(a)));\n            }\n        }\n        if (this._bgBrush == null)\n            this._bgBrush = new YDataRendering.YLinearGradientBrush(this._backgroundColor1, this._backgroundColor2);\n        if (this._borderpen == null) {\n            this._borderpen = new YDataRendering.YPen(this._borderColor, this._borderThickness);\n            this._borderpen.linejoin = YDataRendering.YPen.LineJoin.Round;\n        }\n        if (this._path.length > 3)\n            g.FillPolygon(this._bgBrush, this._path);\n        if (this._graduationPen == null)\n            this._graduationPen = new YDataRendering.YPen(this._graduationColor, this._graduationThickness);\n        if (this._subgraduationPen == null)\n            this._subgraduationPen = new YDataRendering.YPen(this._subgraduationColor, this._subgraduationThickness);\n        // draw unit\n        let unitDesc = ((this._unitFactor != 1) ? \"x\" + this._unitFactor.toString() + \" \" : \"\") + this._unit;\n        let size = g.MeasureStringSF(unitDesc.toString(), this._unitFont, 10000, stringFormat4Sizing);\n        let unitPos = new YDataRendering.YRectangle((xcenter - size.width / 2) >> 0, (ycenter + radius / 2 - size.height / 2) >> 0, (size.width + 1) >> 0, (size.height + 1) >> 0);\n        g.DrawStringRect(unitDesc, this._unitFont, this._unitFont.brush, unitPos, stringFormat);\n        // draw status line\n        if (this._statusLine != \"\") {\n            size = g.MeasureStringSF(this._statusLine, this._statusFont, 10000, stringFormat4Sizing);\n            let statusPos = new YDataRendering.YRectangle((xcenter - size.width / 2) >> 0, (ycenter - radius / 3 - size.height / 2) >> 0, (size.width + 1), (size.height + 1));\n            g.DrawStringRect(this._statusLine, this._statusFont, this._statusFont.brush, statusPos, stringFormat);\n        }\n        let firstGraduation;\n        let gratuationCount;\n        let Angle, C, S, R1, R2;\n        let outerCoef = this._graduationOuterRadiusSize / 100;\n        // draw zones\n        for (let i = 0; i < this._zones.length; i++) {\n            if (this._zones[i].visible) {\n                if (this._zones[i].path == null) {\n                    let zmin = Math.max(this._min, Math.min(this._max, this._zones[i].min));\n                    let zmax = Math.max(this._min, Math.min(this._max, this._zones[i].max));\n                    if (zmax > zmin) {\n                        let zOuterCoef = this._zones[i].outerRadius / 100;\n                        let Angle1 = ((Math.PI - AngleAperture) / 2) + AngleAperture * (zmin - this._min) / (this._max - this._min);\n                        let Angle2 = ((Math.PI - AngleAperture) / 2) + AngleAperture * (zmax - this._min) / (this._max - this._min);\n                        let outterlength = (Angle2 - Angle1) * radius;\n                        let stepCount = (outterlength / this.SegmentMaxLength) >> 0;\n                        if (stepCount < 2)\n                            stepCount = 2;\n                        this._zones[i].setPathSize(2 * stepCount + 2);\n                        // let Path: YDataRendering.PointF[] = new Array(2 * stepCount + 2).fill(null);\n                        for (let j = 0; j <= stepCount; j++) {\n                            let A = Angle1 + ((Angle2 - Angle1) * j) / stepCount;\n                            this._zones[i].setPathPoint(j, new YDataRendering.PointF((xcenter - radius * zOuterCoef * Math.cos(A)), (ycenter - radius * zOuterCoef * Math.sin(A))));\n                        }\n                        let innerRadiusCoef = zOuterCoef - (this._zones[i].width / 100);\n                        for (let j = stepCount; j >= 0; j--) {\n                            let A = Angle1 + ((Angle2 - Angle1) * j) / stepCount;\n                            this._zones[i].setPathPoint(2 * stepCount + 1 - j, new YDataRendering.PointF((xcenter - radius * innerRadiusCoef * Math.cos(A)), (ycenter - radius * innerRadiusCoef * Math.sin(A))));\n                        }\n                    }\n                }\n                if (this._zones[i].path != null)\n                    g.FillPolygon(this._zones[i].zoneBrush, this._zones[i].path);\n            }\n        }\n        firstGraduation = this._graduation * (this._min / this._graduation) >> 0;\n        if (this._min < 0)\n            firstGraduation -= this._graduation;\n        while (firstGraduation < this._min) {\n            firstGraduation += this._graduation;\n        }\n        gratuationCount = 1 + ((this._max - this._min) / this._graduation) >> 0;\n        // draw sub graduations\n        if ((this._subgraduationCount > 0) && ((this._subgraduationCount * gratuationCount) < circonference)) {\n            let subgraduation = this._graduation / this._subgraduationCount;\n            firstGraduation = subgraduation * ((this._min / subgraduation) >> 0);\n            if (this._min < 0)\n                firstGraduation -= subgraduation;\n            while (firstGraduation < this._min) {\n                firstGraduation += subgraduation;\n            }\n            gratuationCount = 1 + ((this._max - this._min) / subgraduation) >> 0;\n            for (let i = 0; i < gratuationCount; i++) {\n                let value = firstGraduation + i * subgraduation;\n                if (value <= this._max) {\n                    Angle = ((Math.PI - AngleAperture) / 2) + AngleAperture * (value - this._min) / (this._max - this._min);\n                    C = Math.cos(Angle);\n                    S = Math.sin(Angle);\n                    R1 = (outerCoef * (radius - this._borderThickness / 2));\n                    R2 = (100 - this._subgraduationSize) * (outerCoef * (radius - this._borderThickness / 2)) / 100;\n                    g.DrawLineXY(this._subgraduationPen, (xcenter - R1 * C), (ycenter - R1 * S), (xcenter - R2 * C), (ycenter - R2 * S));\n                }\n            }\n        }\n        // draw Main graduations\n        if (gratuationCount < circonference) // stop drawing graduation if too many\n         {\n            for (let i = 0; i < gratuationCount; i++) {\n                let gvalue = firstGraduation + i * this._graduation;\n                if (gvalue <= this._max) {\n                    Angle = ((Math.PI - AngleAperture) / 2) + AngleAperture * (gvalue - this._min) / (this._max - this._min);\n                    C = Math.cos(Angle);\n                    S = Math.sin(Angle);\n                    R1 = (outerCoef * (radius - this._borderThickness / 2));\n                    R2 = (100 - this._graduationSize) * (outerCoef * (radius - this._borderThickness / 2)) / 100;\n                    g.DrawLineXY(this._graduationPen, (xcenter - R1 * C), (ycenter - R1 * S), (xcenter - R2 * C), (ycenter - R2 * S));\n                    size = g.MeasureStringSF(gvalue.toString().trim(), this._graduationFont, 1000, stringFormat4Sizing);\n                    let HalfDiagonal = 0.4 * Math.sqrt(size.width * size.width + size.height * size.height);\n                    let position = new YDataRendering.YRectangle((xcenter - (R2 - HalfDiagonal) * C - (size.width / 2)) >> 0, (ycenter - (R2 - HalfDiagonal) * S - (size.height / 2)) >> 0, (size.width >> 0) + 1, size.height >> 0);\n                    //  g.DrawRectangle(new YDataRendering.YPen(Color.Red, 1), position);\n                    g.DrawStringRect(gvalue.toString(), this._graduationFont, this._graduationFont.brush, position, stringFormat);\n                }\n            }\n        }\n        // draw Border\n        if ((this._borderThickness > 0) && (this._path.length > 3))\n            g.DrawPolygon(this._borderpen, this._path);\n        this.drawAnnotationPanels(g, this._annotationPanels, w, h, true, mainViewPort);\n        // draw Needle\n        if (this._showNeedle) {\n            if (this._needleValue != this._value) {\n                let step = this._unitFactor * this._needleMaxSpeed * (this._max - this._min) / 100;\n                if (Math.abs(this._value - this._needleValue) < step) {\n                    this._needleValue = this._value;\n                }\n                else if (this._needleValue < this.value) {\n                    this._needleValue += step;\n                }\n                else {\n                    this._needleValue -= step;\n                }\n            }\n            let needlevalue = this._needleValue / this._unitFactor;\n            let allowedOverflow = (this._max - this.min) * 0.05;\n            if (needlevalue < this._min - allowedOverflow)\n                needlevalue = this._min - allowedOverflow;\n            if (needlevalue > this._max + allowedOverflow)\n                needlevalue = this._max + allowedOverflow;\n            Angle = ((Math.PI - AngleAperture) / 2) + AngleAperture * (needlevalue - this._min) / (this._max - this._min);\n            C = Math.cos(Angle);\n            S = Math.sin(Angle);\n            R1 = (radius * this._needleLength1) / 100;\n            R2 = (radius * this._needleLength2) / 100;\n            let R3 = (radius * this._needleWidth) / 200;\n            let needlepath = new Array(4).fill(null);\n            needlepath[0] = new YDataRendering.PointF((xcenter - R1 * C), (ycenter - R1 * S));\n            needlepath[1] = new YDataRendering.PointF((xcenter + R3 * S), (ycenter - R3 * C));\n            needlepath[2] = new YDataRendering.PointF((xcenter + R2 * C), (ycenter + R2 * S));\n            needlepath[3] = new YDataRendering.PointF((xcenter - R3 * S), (ycenter + R3 * C));\n            if (this._needleBrush == null)\n                this._needleBrush = new YDataRendering.YSolidBrush(this._needleColor);\n            g.FillPolygon(this._needleBrush, needlepath);\n            if (this._needleContourThickness > 0) {\n                if (this._needleContourPen == null) {\n                    this._needleContourPen = new YDataRendering.YPen(this._needleContourColor, this._needleContourThickness);\n                    this._needleContourPen.startCap = 2 /* YDataRendering.YPen.LineCap.Round */;\n                    this._needleContourPen.endCap = 2 /* YDataRendering.YPen.LineCap.Round */;\n                    this._needleContourPen.linejoin = YDataRendering.YPen.LineJoin.Round;\n                }\n                let needlepath2 = new Array(5).fill(null);\n                needlepath2[0] = needlepath[0];\n                needlepath2[1] = needlepath[1];\n                needlepath2[2] = needlepath[2];\n                needlepath2[3] = needlepath[3];\n                needlepath2[4] = needlepath[0];\n                g.DrawLines(this._needleContourPen, needlepath2);\n            }\n        }\n        this.DrawMessagePanels(g, w, h);\n        return 0;\n    }\n    renderingPostProcessing() {\n        if (this._needleValue != this._value)\n            this.redraw();\n    }\n}\n", "/*\n*   Yocto-Visualization (for web), a free web-based application\n*   to visualize Yoctopuce Sensors.\n*\n*  Digital display  widget renderer\n*\n*   - - - - - - - - - License information: - - - - - - - - -\n*\n*  Copyright (C) 2021 and beyond by Yoctopuce Sarl, Switzerland.\n*\n*  Yoctopuce Sarl (hereafter Licensor) grants to you a perpetual\n*  non-exclusive license to use, modify, copy and integrate this\n*  file into your software for the sole purpose of interfacing\n*  with Yoctopuce products.\n*\n*  You may reproduce and distribute copies of this file in\n*  source or object form, as long as the sole purpose of this\n*  code is to interface with Yoctopuce products. You must retain\n*  this notice in the distributed source file.\n*\n*  You should refer to Yoctopuce General Terms and Conditions\n*  for additional information regarding your rights and\n*  obligations.\n*\n*  THE SOFTWARE AND DOCUMENTATION ARE PROVIDED \"AS IS\" WITHOUT\n*  WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING\n*  WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, FITNESS\n*  FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO\n*  EVENT SHALL LICENSOR BE LIABLE FOR ANY INCIDENTAL, SPECIAL,\n*  INDIRECT OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA,\n*  COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY OR\n*  SERVICES, ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT\n*  LIMITED TO ANY DEFENSE THEREOF), ANY CLAIMS FOR INDEMNITY OR\n*  CONTRIBUTION, OR OTHER SIMILAR COSTS, WHETHER ASSERTED ON THE\n*  BASIS OF CONTRACT, TORT (INCLUDING NEGLIGENCE), BREACH OF\n*  WARRANTY, OR OTHERWISE.\n*/\nimport * as YDataRendering from \"./YDataRendererCommon.js\";\nexport class YDigitalDisplay extends YDataRendering.YDataRenderer {\n    get backgroundColor1() { return this._backgroundColor1; }\n    set backgroundColor1(value) {\n        this._backgroundColor1 = value;\n        this._bgBrush = null;\n        this.redraw();\n    }\n    get backgroundColor2() { return this._backgroundColor2; }\n    set backgroundColor2(value) {\n        this._backgroundColor2 = value;\n        this._bgBrush = null;\n        this.redraw();\n    }\n    get alternateValue() { return this._alternateValue; }\n    set alternateValue(value) {\n        this._alternateValue = value;\n        this.redraw();\n    }\n    get valueFormater() { return this._valueFormater; }\n    set valueFormater(value) {\n        this._valueFormater = value;\n        this.redraw();\n    }\n    get hrzAlignmentOfset() { return this._hrzAlignmentOfset; }\n    set hrzAlignmentOfset(value) {\n        this._hrzAlignmentOfset = value;\n        this.redraw();\n    }\n    get hrzAlignment() { return this._hrzAlignment; }\n    set hrzAlignment(value) {\n        this._hrzAlignment = value;\n        this.redraw();\n    }\n    get outOfRangeMin() { return this._outOfRangeMin; }\n    set outOfRangeMin(value) {\n        if (!Number.isNaN(value) && !Number.isNaN(this._outOfRangeMax) && !YDataRendering.YDataRenderer.minMaxCheckDisabled) {\n            if (value >= this._outOfRangeMax)\n                throw new RangeError(\"Min cannot be greater than max (\" + this._outOfRangeMax.toString() + \")\");\n        }\n        this._outOfRangeMin = value;\n        this.redraw();\n    }\n    get outOfRangeMax() { return this._outOfRangeMax; }\n    set outOfRangeMax(value) {\n        if (!Number.isNaN(value) && !Number.isNaN(this._outOfRangeMin) && !YDataRendering.YDataRenderer.minMaxCheckDisabled) {\n            if (value <= this._outOfRangeMin)\n                throw new RangeError(\"Min cannot be less than max (\" + this._outOfRangeMin.toString() + \")\");\n        }\n        this._outOfRangeMax = value;\n        this.redraw();\n    }\n    get outOfRangeColor() { return this._outOfRangeColor; }\n    set outOfRangeColor(value) {\n        this._outOfRangeColor = value;\n        this.redraw();\n    }\n    get value() { return this._value; }\n    set value(value) {\n        this._value = value;\n        this.redraw();\n    }\n    get font() { return this._font; }\n    constructor(UIContainer, logFunction) {\n        super(UIContainer, logFunction);\n        this._bgBrush = null;\n        this._backgroundColor1 = YDataRendering.YColor.Black;\n        this._backgroundColor2 = YDataRendering.YColor.FromArgb(255, 48, 48, 48);\n        this._alternateValue = null;\n        this._valueFormater = null;\n        this._hrzAlignmentOfset = 5.0;\n        this._hrzAlignment = YDigitalDisplay.HrzAlignment.DECIMAL;\n        this._outOfRangeMin = Number.NaN;\n        this._outOfRangeMax = Number.NaN;\n        this._outOfRangeColor = YDataRendering.YColor.Red;\n        this._value = 0.0;\n        this._font = new YDataRendering.YFont(this, this, Math.min(UIContainer.width / 5, UIContainer.height / 2), null);\n        this._font.color = YDataRendering.YColor.LightGreen;\n        this.resizeRule = YDataRendering.Proportional.ResizeRule.RELATIVETOBOTH;\n    }\n    clearCachedObjects() {\n        if (this.font != null)\n            this.font.ResetFont(null);\n        this._bgBrush = null;\n    }\n    Render(g, w, h) {\n        let mainViewPort = new YDataRendering.ViewPortSettings();\n        mainViewPort.Lmargin = 0;\n        mainViewPort.Rmargin = 0;\n        mainViewPort.Tmargin = 0;\n        mainViewPort.Bmargin = 0;\n        g.SmoothingMode = YDataRendering.YSmoothingMode.HighQuality;\n        g.TextRenderingHint = YDataRendering.YTextRenderingHint.AntiAlias;\n        let stringFormat = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\n        stringFormat.Alignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\n        stringFormat.LineAlignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\n        if (this._bgBrush == null) {\n            this._bgBrush = new YDataRendering.YLinearGradientBrush(this._backgroundColor1, this._backgroundColor2);\n        }\n        g.FillRectangleXYHW(this._bgBrush, 0, 0, w, h);\n        this.drawAnnotationPanels(g, this._annotationPanels, w, h, false, mainViewPort);\n        if (mainViewPort.Tmargin >= 20)\n            mainViewPort.Tmargin -= 10; // AnnotationPanels adds at least 20px warnings\n        if (mainViewPort.Bmargin >= 20)\n            mainViewPort.Bmargin -= 10; // which is a bit much for digital display\n        g.TextRenderingHint = YDataRendering.YTextRenderingHint.AntiAlias;\n        let availWidth = w - (mainViewPort.Lmargin + mainViewPort.Rmargin);\n        let availHeight = h - (mainViewPort.Tmargin + mainViewPort.Bmargin);\n        if ((availWidth > 10) && (availHeight > 10)) { // draw unit\n            let svalue;\n            if (this._alternateValue == null) {\n                svalue = this._valueFormater == null ? this.value.toFixed(3) : this._valueFormater(this, this.value);\n                if ((!Number.isNaN(this._outOfRangeMin)) && (this.value < this._outOfRangeMin)) {\n                    this.font.alternateColor = this._outOfRangeColor;\n                }\n                else if ((!Number.isNaN(this._outOfRangeMax)) && (this.value > this._outOfRangeMax)) {\n                    this.font.alternateColor = this._outOfRangeColor;\n                }\n                else {\n                    this.font.alternateColor = null;\n                }\n            }\n            else {\n                this._font.alternateColor = null;\n                svalue = this._alternateValue;\n            }\n            let size = g.MeasureStringSF(svalue, this.font, 10000, stringFormat);\n            let pos;\n            let align = this._hrzAlignment;\n            if ((this._alternateValue != null) && (align == YDigitalDisplay.HrzAlignment.DECIMAL))\n                align = YDigitalDisplay.HrzAlignment.RIGHT;\n            if ((align == YDigitalDisplay.HrzAlignment.DECIMAL) && (svalue.indexOf(\".\") < 0))\n                align = YDigitalDisplay.HrzAlignment.RIGHT;\n            switch (align) {\n                case YDigitalDisplay.HrzAlignment.LEFT:\n                    pos = new YDataRendering.YRectangle(mainViewPort.Lmargin + ((availWidth * this.hrzAlignmentOfset / 100) >> 0), mainViewPort.Tmargin + ((availHeight - size.height) / 2) >> 0, (size.width + 1) >> 0, (size.height + 1) >> 0);\n                    g.DrawStringRect(svalue, this.font, this.font.brush, pos, stringFormat);\n                    break;\n                case YDigitalDisplay.HrzAlignment.CENTER:\n                    pos = new YDataRendering.YRectangle(mainViewPort.Lmargin + ((availWidth - size.width) / 2) >> 0, mainViewPort.Tmargin + ((availHeight - size.height) / 2) >> 0, (size.width + 1) >> 0, (size.height + 1) >> 0);\n                    g.DrawStringRect(svalue, this.font, this.font.brush, pos, stringFormat);\n                    break;\n                case YDigitalDisplay.HrzAlignment.DECIMAL:\n                    let left = \"\";\n                    let p = svalue.lastIndexOf(',');\n                    if (p < 0)\n                        p = svalue.lastIndexOf('.');\n                    if (p >= 0) {\n                        left = svalue.substring(0, p + 1);\n                    }\n                    else {\n                        p = 0;\n                        while ((p < svalue.length) && ((svalue[p] >= '0' && svalue[p] <= '9') || (svalue[p] == '-') || (svalue[p] == '\\'') || (svalue[p] == ' '))) {\n                            p++;\n                        }\n                        left = svalue.substring(0, p);\n                    }\n                    let lsize = g.MeasureStringSF(left, this.font, 10000, stringFormat);\n                    pos = new YDataRendering.YRectangle(mainViewPort.Lmargin + (availWidth - lsize.width - availWidth * this.hrzAlignmentOfset / 100) >> 0, mainViewPort.Tmargin + ((availHeight - size.height) / 2) >> 0, (size.width + 1) >> 0, (size.height + 1) >> 0);\n                    g.DrawStringRect(svalue, this.font, this.font.brush, pos, stringFormat);\n                    break;\n                case YDigitalDisplay.HrzAlignment.RIGHT:\n                    pos = new YDataRendering.YRectangle(mainViewPort.Lmargin + (availWidth - size.width - availWidth * this.hrzAlignmentOfset / 100) >> 0, mainViewPort.Tmargin + ((availHeight - size.height) / 2) >> 0, (size.width + 1) >> 0, (size.height + 1) >> 0);\n                    g.DrawStringRect(svalue, this.font, this.font.brush, pos, stringFormat);\n                    break;\n            }\n        }\n        this.drawAnnotationPanels(g, this._annotationPanels, w, h, true, mainViewPort);\n        this.DrawMessagePanels(g, w, h);\n        return 0;\n    }\n}\n(function (YDigitalDisplay) {\n    class HrzAlignmentEnumItem extends YDataRendering.YEnumItem {\n        constructor(value, humanreadable, container) {\n            super(value, humanreadable, HrzAlignment);\n        }\n    }\n    YDigitalDisplay.HrzAlignmentEnumItem = HrzAlignmentEnumItem;\n    class HrzAlignment extends YDataRendering.YEnum {\n    }\n    HrzAlignment.LEFT = new HrzAlignmentEnumItem(\"LEFT\", \"Left\");\n    HrzAlignment.CENTER = new HrzAlignmentEnumItem(\"CENTER\", \"Center\");\n    HrzAlignment.DECIMAL = new HrzAlignmentEnumItem(\"DECIMAL\", \"Decimal\");\n    HrzAlignment.RIGHT = new HrzAlignmentEnumItem(\"RIGHT\", \"Right\");\n    YDigitalDisplay.HrzAlignment = HrzAlignment;\n    //export const enum HrzAlignment { LEFT = \"Left\", CENTER = \"Center\", DECIMAL=\"Decimal\", RIGHT =\"Right\"  }\n})(YDigitalDisplay || (YDigitalDisplay = {}));\n", "/*\n*   Yocto-Visualization (for web), a free web-based application\n*   to visualize Yoctopuce Sensors.\n*\n*  Graph widget renderer\n*\n*   - - - - - - - - - License information: - - - - - - - - -\n*\n*  Copyright (C) 2021 and beyond by Yoctopuce Sarl, Switzerland.\n*\n*  Yoctopuce Sarl (hereafter Licensor) grants to you a perpetual\n*  non-exclusive license to use, modify, copy and integrate this\n*  file into your software for the sole purpose of interfacing\n*  with Yoctopuce products.\n*\n*  You may reproduce and distribute copies of this file in\n*  source or object form, as long as the sole purpose of this\n*  code is to interface with Yoctopuce products. You must retain\n*  this notice in the distributed source file.\n*\n*  You should refer to Yoctopuce General Terms and Conditions\n*  for additional information regarding your rights and\n*  obligations.\n*\n*  THE SOFTWARE AND DOCUMENTATION ARE PROVIDED \"AS IS\" WITHOUT\n*  WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING\n*  WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, FITNESS\n*  FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO\n*  EVENT SHALL LICENSOR BE LIABLE FOR ANY INCIDENTAL, SPECIAL,\n*  INDIRECT OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA,\n*  COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY OR\n*  SERVICES, ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT\n*  LIMITED TO ANY DEFENSE THEREOF), ANY CLAIMS FOR INDEMNITY OR\n*  CONTRIBUTION, OR OTHER SIMILAR COSTS, WHETHER ASSERTED ON THE\n*  BASIS OF CONTRACT, TORT (INCLUDING NEGLIGENCE), BREACH OF\n*  WARRANTY, OR OTHERWISE.\n*/\nimport * as YDataRendering from \"./YDataRendererCommon.js\";\nexport class pointXY {\n    constructor(X, Y) {\n        this.x = X === undefined ? 0 : X;\n        this.y = Y === undefined ? 0 : Y;\n    }\n    clone() { return new pointXY(this.x, this.y); }\n}\nexport class TimeConverterParseResult {\n    constructor() {\n        this.success = false;\n        this.result = 0;\n    }\n}\nclass TimeResolution {\n    constructor() {\n        this.step = 0;\n        this.format = 0;\n    }\n}\nexport class YDate extends Date {\n    ToString(format) {\n        let res = \"\";\n        let ampm = \"\";\n        if (format & YDate.D)\n            res = res + this.getDate() + \" \";\n        if (format & YDate.M)\n            res = res + YDate.months[this.getMonth()] + \" \";\n        if (format & YDate.YY) {\n            let y = this.getFullYear().toString();\n            res = res + y.substr(y.length - 2) + \" \";\n        }\n        else if (format & YDate.YYYY) {\n            let y = this.getFullYear().toString();\n            res = res + y + \" \";\n        }\n        if (format & YDate.CR)\n            res = res + \"\\n\";\n        if (format & YDate.h) {\n            if (YDate.use24Hformat) {\n                let h = \"0\" + this.getHours().toString();\n                res = res + h.substring(h.length - 2);\n                if (!(format & YDate.m))\n                    res = res + \"H\";\n            }\n            else {\n                let hour = this.getHours();\n                ampm = \"AM\";\n                if (hour > 11)\n                    ampm = \"PM\";\n                if (hour > 12)\n                    hour = hour - 12;\n                if (hour == 0)\n                    hour = 12;\n                res = res + hour.toString();\n            }\n        }\n        if (format & YDate.m) {\n            let m = \"0\" + this.getMinutes().toString();\n            res = res + \":\" + m.substring(m.length - 2);\n        }\n        if (format & YDate.s) {\n            let s = \"0\" + this.getSeconds().toString();\n            res = res + \":\" + s.substring(s.length - 2);\n        }\n        if (format & YDate.ms1) {\n            let ms = \"00\" + this.getMilliseconds().toString();\n            res = res + \".\" + ms.substring(ms.length - 3).substring(1);\n        }\n        else if (format & YDate.ms01) {\n            let ms = \"00\" + this.getMilliseconds().toString();\n            res = res + \".\" + ms.substring(ms.length - 3).substring(2);\n        }\n        else if (format & YDate.ms001) {\n            let ms = \"00\" + this.getMilliseconds().toString();\n            res = res + \".\" + ms.substring(ms.length - 3).substring(3);\n        }\n        if ((format & YDate.h) && !YDate.use24Hformat) {\n            res = res + ampm;\n        }\n        return res;\n    }\n}\nYDate.D = 1;\nYDate.DD = 2;\nYDate.M = 4;\nYDate.YY = 8;\nYDate.h = 16;\nYDate.m = 32;\nYDate.s = 64;\nYDate.ms1 = 128;\nYDate.ms01 = 256;\nYDate.ms001 = 512;\nYDate.CR = 1024;\nYDate.isRelative = 2048;\nYDate.YYYY = 4096;\nYDate.d = (new Date()).toLocaleTimeString().toUpperCase();\nYDate.use24Hformat = (YDate.d.indexOf(\"AM\") < 0) && (YDate.d.indexOf(\"PM\") < 0);\nYDate.months = [\"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"];\nexport class TimeConverter {\n    static UTCNow() { return new YDate(); }\n    static ToUnixTime(datetime) { return datetime.getTime() / 1000.0; }\n    static FromUnixTime(unixtime) {\n        let t = new YDate();\n        t.setTime(unixtime * 1000);\n        return t;\n    }\n    static tryParseStringToAbsDateTime(str) {\n        let res = new TimeConverterParseResult();\n        res.success = false;\n        let date = new Date();\n        let year = date.getFullYear();\n        let month = date.getMonth();\n        let day = date.getDate();\n        let hours = 0;\n        let minutes = 0;\n        let seconds = 0;\n        str = str.trim();\n        while (str.indexOf(\"  \") > 0) {\n            str = str.replace(\"  \", \" \");\n        }\n        let dateFound = false;\n        let timeFound = false;\n        let it = str.split(\" \");\n        if (it.length <= 0)\n            return res;\n        for (let i = 0; i < (it.length) && (i < 2); i++) {\n            if (it[i].indexOf(\"-\") > 0) {\n                let tokens = it[i].split(\"-\");\n                if (tokens.length == 1) {\n                    day = parseInt(tokens[0]);\n                }\n                else if (tokens.length == 2) {\n                    day = parseInt(tokens[1]);\n                    month = parseInt(tokens[0]) - 1;\n                }\n                else {\n                    day = parseInt(tokens[2]);\n                    month = parseInt(tokens[1]) - 1;\n                    year = parseInt(tokens[0]);\n                }\n                dateFound = true;\n            }\n            else if (it[i].indexOf(\":\") > 0) {\n                let tokens = it[i].split(\":\");\n                if (tokens.length == 1) {\n                    hours = parseInt(tokens[0]);\n                }\n                else if (tokens.length == 2) {\n                    hours = parseInt(tokens[0]);\n                    minutes = parseInt(tokens[1]);\n                }\n                else {\n                    hours = parseInt(tokens[0]);\n                    minutes = parseInt(tokens[1]);\n                    seconds = parseFloat(tokens[2]);\n                }\n                timeFound = true;\n            }\n        }\n        if ((!timeFound) && (!dateFound))\n            return res;\n        if (isNaN(year) || isNaN(month) || isNaN(day) || isNaN(hours) || isNaN(minutes) || isNaN(seconds))\n            return res;\n        date.setFullYear(year, month, day);\n        date.setHours(hours, minutes, seconds >> 0, (1000 * (seconds % 1)) >> 0);\n        res.result = date.getTime() / 1000; //- 60*date.getTimezoneOffset();\n        res.success = true;\n        return res;\n    }\n    static tryParseStringToSecTimeSpan(st) {\n        let res = new TimeConverterParseResult();\n        let d = 0;\n        st = st.toUpperCase();\n        let n = st.indexOf(\"D\");\n        if (n > 0) {\n            d = parseFloat(st.substring(0, n));\n            if (isNaN(d)) {\n                return res;\n            }\n            res.result += +d * 86400;\n            if (n == st.length - 1) {\n                res.success = true;\n                return res;\n            }\n            st = st.substring(n + 1);\n        }\n        n = st.indexOf(\"H\");\n        if (n > 0) {\n            d = parseFloat(st.substring(0, n));\n            if (isNaN(d)) {\n                return res;\n            }\n            res.result += d * 3600;\n            if (n == st.length - 1) {\n                res.success = true;\n                return res;\n            }\n            st = st.substring(n + 1);\n        }\n        n = st.indexOf(\"M\");\n        if (n > 0) {\n            d = parseFloat(st.substring(0, n));\n            if (isNaN(d)) {\n                return res;\n            }\n            res.result += d * 60;\n            if (n == st.length - 1) {\n                res.success = true;\n                return res;\n            }\n            st = st.substring(n + 1);\n        }\n        n = st.indexOf(\"S\");\n        if (n < 0)\n            n = st.length;\n        d = parseFloat(st.substring(0, n));\n        if (isNaN(d)) {\n            return res;\n        }\n        res.result += d;\n        res.success = true;\n        return res;\n    }\n    //public static  secTimeSpanToString( timespan:number):string\n    //  { return TimeConverter.secTimeSpanToString( timespan, 0); }\n    static secTimeSpanToString(timespan, resolution) {\n        let started = false;\n        let res = \"\";\n        if (timespan < 0) {\n            res = \"-\";\n            timespan = -timespan;\n        }\n        if (timespan >= 86400) {\n            let d = (timespan / 86400) >> 0;\n            res = res + d.toString() + \"d\";\n            timespan -= 86400 * d;\n            started = true;\n        }\n        if (resolution >= 86400)\n            return res != \"\" ? res : \"0d\";\n        if (timespan >= 3600) {\n            let d = ((timespan / 3600) >> 0);\n            let ds = d.toString();\n            if (started && ds.length == 1)\n                ds = \"0\" + ds;\n            res = res + ds + \"h\";\n            timespan -= 3600 * d;\n            started = true;\n        }\n        if (resolution >= 3600)\n            return res != \"\" ? res : \"0h\";\n        if (timespan < resolution)\n            return res != \"\" ? res : \"0h\";\n        if (timespan >= 60) {\n            let d = (timespan / 60) >> 0;\n            let ds = d.toString();\n            if (started && ds.length == 1)\n                ds = \"0\" + ds;\n            res = res + ds + \"m\";\n            timespan -= 60 * d;\n            started = true;\n        }\n        if (resolution >= 60)\n            return res != \"\" ? res : \"0m\";\n        if (timespan < resolution)\n            return res != \"\" ? res : \"0m\";\n        timespan = Math.round(timespan * 100) / 100;\n        let s;\n        if (resolution > 0.1) {\n            s = timespan.toFixed(0);\n        }\n        else if (resolution > 0.01) {\n            s = timespan.toFixed(1);\n        }\n        else if (resolution > 0.001) {\n            s = timespan.toFixed(2);\n        }\n        else {\n            s = timespan.toString();\n        }\n        if (started && timespan < 10)\n            s = \"0\" + s;\n        res = res + s + \"s\";\n        return res;\n    }\n    static RelativeFormat(dataDeltaTime, viewportDeltaTime, resolution) {\n        let ShowSecondsTenth = true;\n        let ShowSecondsHundredth = true;\n        let ShowSeconds = true;\n        let ShowMinutes = false;\n        let ShowHours = false;\n        let ShowDays = false;\n        if (dataDeltaTime <= 0.10) {\n            ShowSecondsHundredth = true;\n        }\n        if (dataDeltaTime <= 1) {\n            ShowSecondsTenth = true;\n        }\n        if ((dataDeltaTime >= 60) || (viewportDeltaTime >= 60)) {\n            ShowMinutes = true;\n        }\n        if ((dataDeltaTime >= 3600) || (viewportDeltaTime >= 3600)) {\n            ShowHours = true;\n        }\n        if ((dataDeltaTime >= 86400) || (viewportDeltaTime >= 86400)) {\n            ShowDays = true;\n        }\n        if (resolution >= .1)\n            ShowSecondsHundredth = false;\n        if (resolution >= 1)\n            ShowSecondsTenth = false;\n        if (resolution >= 60)\n            ShowSeconds = false;\n        if (resolution >= 3600)\n            ShowMinutes = false;\n        if (resolution >= 86400)\n            ShowHours = false;\n        let format = 0;\n        format |= YDate.isRelative;\n        if (ShowSecondsTenth)\n            format |= YDate.ms1;\n        if (ShowSecondsHundredth)\n            format |= YDate.ms01;\n        if (ShowSeconds)\n            format |= YDate.s;\n        if (ShowMinutes)\n            format |= YDate.m;\n        if (ShowHours)\n            format |= YDate.h;\n        if (ShowDays)\n            format |= YDate.D;\n        return format;\n    }\n    static BestTimeformat(dataDeltaTime, viewportDeltaTime, tref) {\n        let res = new TimeResolution();\n        let ShowSecondsTenth = true;\n        let ShowSecondsHundredth = true;\n        let ShowSeconds = true;\n        let ShowMinutes = false;\n        let ShowHours = false;\n        let ShowDays = false;\n        let ShowMonths = false;\n        let ShowYears = false;\n        if (viewportDeltaTime <= 0.10) {\n            res.step = 0.01;\n        }\n        else if (viewportDeltaTime <= 1) {\n            res.step = 0.1;\n        }\n        else if (viewportDeltaTime <= 2) {\n            res.step = 0.2;\n        }\n        else if (viewportDeltaTime <= 5) {\n            res.step = 0.5;\n        }\n        else if (viewportDeltaTime <= 10) {\n            res.step = 1;\n        }\n        else if (viewportDeltaTime <= 20) {\n            res.step = 2;\n        }\n        else if (viewportDeltaTime <= 30) {\n            res.step = 3;\n        }\n        else if (viewportDeltaTime <= 40) {\n            res.step = 4;\n        }\n        else if (viewportDeltaTime <= 60) {\n            res.step = 5;\n        }\n        else if (viewportDeltaTime <= 120) {\n            res.step = 10;\n        }\n        else if (viewportDeltaTime <= 300) {\n            res.step = 30;\n        }\n        else if (viewportDeltaTime <= 900) {\n            res.step = 60;\n        }\n        else if (viewportDeltaTime <= 1800) {\n            res.step = 180;\n        }\n        else if (viewportDeltaTime <= 3600) {\n            res.step = 300;\n        }\n        else if (viewportDeltaTime <= 7200) {\n            res.step = 600;\n        }\n        else if (viewportDeltaTime <= 14000) {\n            res.step = 900;\n        }\n        else if (viewportDeltaTime <= 21600) {\n            res.step = 1800;\n        }\n        else if (viewportDeltaTime <= 43200) {\n            res.step = 3600;\n        }\n        else if (viewportDeltaTime <= 86400) {\n            res.step = 7200;\n        }\n        else if (viewportDeltaTime <= 2 * 86400) {\n            res.step = 2 * 7200;\n        }\n        else if (viewportDeltaTime <= 4 * 86400) {\n            res.step = 4 * 7200;\n        }\n        else if (viewportDeltaTime <= 7 * 86400) {\n            res.step = 86400;\n        }\n        else if (viewportDeltaTime <= 14 * 86400) {\n            res.step = 2 * 86400;\n        }\n        else if (viewportDeltaTime <= 28 * 86400) {\n            res.step = 4 * 86400;\n        }\n        else if (viewportDeltaTime <= 56 * 86400) {\n            res.step = 7 * 86400;\n        }\n        else if (viewportDeltaTime <= 112 * 86400) {\n            res.step = 14 * 86400;\n        }\n        else if (viewportDeltaTime <= 224 * 86400) {\n            res.step = 31 * 86400;\n        }\n        else if (viewportDeltaTime <= 448 * 86400) {\n            res.step = 62 * 86400;\n        }\n        else if (viewportDeltaTime <= 896 * 86400) {\n            res.step = 93 * 86400;\n        }\n        else {\n            res.step = 365 * 86400;\n        }\n        if (tref == TimeConverter.TimeReference.ABSOLUTE) {\n            ShowSecondsHundredth = true;\n            ShowSecondsTenth = true;\n            ShowMinutes = true;\n            ShowHours = true;\n            ShowDays = dataDeltaTime > 86400;\n            ShowMonths = dataDeltaTime > 86400;\n            ShowYears = dataDeltaTime > 28 * 6 * 86400;\n            if (res.step >= .1)\n                ShowSecondsHundredth = false;\n            if (res.step >= 1)\n                ShowSecondsTenth = false;\n            if (res.step >= 60)\n                ShowSeconds = false;\n            if (res.step >= 3600)\n                ShowMinutes = false;\n            if (res.step >= 86400)\n                ShowHours = false;\n            if (res.step >= 31 * 86400)\n                ShowDays = false;\n            if (res.step >= 365 * 86400)\n                ShowMonths = false;\n            res.format = 0;\n            if (ShowSecondsHundredth)\n                res.format |= YDate.ms01;\n            if (ShowSecondsTenth)\n                res.format |= YDate.ms1;\n            if (ShowSeconds)\n                res.format |= YDate.s;\n            if (ShowMinutes)\n                res.format = res.format |= YDate.m;\n            if (ShowHours)\n                res.format = res.format |= YDate.h;\n            if ((res.format != 0) && (ShowDays || ShowMonths))\n                res.format |= YDate.CR;\n            if (ShowDays)\n                res.format |= YDate.D;\n            if (ShowMonths)\n                res.format |= YDate.M;\n            if (ShowYears)\n                res.format |= YDate.YY;\n            if (res.format == YDate.YY)\n                res.format = YDate.YYYY;\n            /*\n      res.format = \"\";\n      if (ShowSecondsHundredth) res.format = \".ff\";\n      if (ShowSecondsTenth) res.format = \".f\";\n      if (ShowSeconds) res.format = \"ss\" + res.format;\n      if (ShowMinutes) res.format = \"mm\" + (res.format == \"\" ? \"\" : \":\") + res.format;\n      if (ShowHours) res.format = \"HH\" + (res.format == \"\" ? \"\\\\H\" : \":\") + res.format;\n      if ((res.format != \"\") && (ShowDays || ShowMonths)) res.format += \"\\n\";\n      if (ShowDays) res.format = res.format + \"d\";\n      if (ShowMonths) res.format = res.format + \" MMM\";\n      if (ShowYears) res.format = res.format + \" yyyy\";\n  */\n        }\n        else {\n            res.format = TimeConverter.RelativeFormat(dataDeltaTime, viewportDeltaTime, res.step);\n        }\n        return res;\n    }\n}\n(function (TimeConverter) {\n    class TimeReferenceEnumItem extends YDataRendering.YEnumItem {\n        constructor(value, humanreadable, container) {\n            super(value, humanreadable, TimeReference);\n        }\n    }\n    TimeConverter.TimeReferenceEnumItem = TimeReferenceEnumItem;\n    // export const enum TimeReference {ABSOLUTE = \"Absolute\", RELATIVE = \"Relative to first data\" }\n    class TimeReference extends YDataRendering.YEnum {\n    }\n    TimeReference.ABSOLUTE = new TimeReferenceEnumItem(\"ABSOLUTE\", \"Absolute\");\n    TimeReference.RELATIVE = new TimeReferenceEnumItem(\"RELATIVE\", \"Relative to first data\");\n    TimeConverter.TimeReference = TimeReference;\n})(TimeConverter || (TimeConverter = {}));\nexport class MinMax {\n    constructor(minimum, maximum) {\n        this.Min = 0;\n        this.Max = 0;\n        this.Min = minimum;\n        this.Max = maximum;\n    }\n}\nexport class MinMaxHandler {\n    static extend(M, factor) {\n        if (isNaN(M.Min))\n            return M;\n        let delta = M.Max - M.Min;\n        return new MinMax(M.Min - (delta * (factor - 1)) / 2, M.Max + (delta * (factor - 1)) / 2);\n    }\n    static DefaultValue(value1, value2) {\n        if (typeof value2 === \"undefined\") {\n            if (typeof value1 === \"undefined\")\n                return new MinMax(Number.NaN, Number.NaN);\n            return new MinMax(value1, value1);\n        }\n        if (typeof value1 === \"undefined\")\n            return new MinMax(value2, value2);\n        if (value2 < value1)\n            throw new RangeError(\"MinMax invalid parameters (\" + value1.toString() + \">\" + value2.toString());\n        return new MinMax(value1, value2);\n    }\n    static isDefined(v) {\n        return !isNaN(v.Min);\n    }\n    static Combine(M1, M2) {\n        if (isNaN(M1.Min))\n            return new MinMax(M2.Min, M2.Max);\n        if (isNaN(M2.Min))\n            return new MinMax(M1.Min, M1.Max);\n        let res = new MinMax(M2.Min, M2.Max);\n        if (M1.Min < res.Min)\n            res.Min = M1.Min;\n        if (M1.Max < res.Min)\n            res.Min = M1.Max;\n        if (M1.Min > res.Max)\n            res.Max = M1.Min;\n        if (M1.Max > res.Max)\n            res.Max = M1.Max;\n        return res;\n    }\n    static CombineWithNumber(M1, value) {\n        if (isNaN(M1.Min))\n            return new MinMax(value, value);\n        if (value < M1.Min)\n            return new MinMax(value, M1.Max);\n        if (value > M1.Max)\n            return new MinMax(M1.Min, value);\n        return new MinMax(M1.Min, M1.Max);\n    }\n}\nexport class DataSegment {\n    static ArrayCopy(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {\n        for (let i = 0; i < length; i++) {\n            destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i].clone();\n        }\n    }\n    constructor(p) {\n        this.data = [];\n        this.count = 0;\n        if (p instanceof Array) {\n            this.data = new Array(p.length);\n            DataSegment.ArrayCopy(p, 0, this.data, 0, p.length);\n            this.count = p.length;\n        }\n        else if (p instanceof pointXY) { /*\n       this.data = new Array();\n       this.data.push(p);\n       this.count =1;\n       while (this.data.length <  DataSegment.SegmentGranularity) { this.data.push(new pointXY()); }\n       */\n            this.data = new Array(DataSegment.SegmentGranularity);\n            this.data[0] = p;\n            this.count = 1;\n        }\n        else {\n            throw new Error(\"invalid constructor paramter type\");\n        }\n    }\n    grow() {\n        let targetCount = this.data.length + DataSegment.SegmentGranularity;\n        while (this.data.length < targetCount) {\n            this.data.push(null);\n        }\n    }\n}\nDataSegment.SegmentGranularity = 1000;\nexport class DataSerie {\n    get userData() { return this._userData; }\n    set userData(value) { this._userData = value; }\n    static get MaxPointsPerSeries() { return DataSerie._MaxPointsPerSeries; }\n    static set MaxPointsPerSeries(value) { DataSerie._MaxPointsPerSeries = value; }\n    get timeRange() { return this._timeRange; }\n    get valueRange() { return this._valueRange; }\n    constructor(parent) {\n        this.totalPointCount = 0;\n        this._userData = null;\n        this._yAxisIndex = 0;\n        this._pen = null;\n        this._legendPen = null;\n        this._brush = null;\n        this._navigatorpen = null;\n        this._visible = true; // whet not visible, series is  not shown but still intervene in Axis auto range calculus\n        this._disabled = false; // when series is disabled,rendering acts just like to series does not exists\n        this._color = YDataRendering.YColor.Black;\n        this._thickness = 1.0;\n        this._legend = \"\";\n        this._unit = \"\";\n        this.segments = [];\n        if (parent.yAxes.length <= 0)\n            throw new Error(\"Define at least one yAxis\");\n        this._timeRange = MinMaxHandler.DefaultValue();\n        this._valueRange = MinMaxHandler.DefaultValue();\n        this.parent = parent;\n    }\n    get yAxisIndex() { return this._yAxisIndex; }\n    set yAxisIndex(value) {\n        if (value >= this.parent.yAxes.length)\n            throw new RangeError(\"No such yAxis (\" + value.toString() + \")\");\n        this._yAxisIndex = value;\n        this.parent.yAxes[this._yAxisIndex].AutoShow();\n    }\n    get pen() {\n        if (this._pen == null) {\n            this._pen = new YDataRendering.YPen(this._color, this._thickness);\n            this._pen.endCap = 2 /* YDataRendering.YPen.LineCap.Round */;\n            this._pen.linejoin = YDataRendering.YPen.LineJoin.Round;\n        }\n        return this._pen;\n    }\n    get legendPen() {\n        if (this._legendPen == null) {\n            this._legendPen = new YDataRendering.YPen(this._color, this._thickness * this.parent.legendPanel.traceWidthFactor);\n        }\n        return this._legendPen;\n    }\n    resetlegendPen() { this._legendPen = null; }\n    get brush() {\n        if (this._brush == null)\n            this._brush = new YDataRendering.YSolidBrush(this._color);\n        return this._brush;\n    }\n    get navigatorpen() {\n        if (this._navigatorpen == null) {\n            this._navigatorpen = new YDataRendering.YPen(YDataRendering.YColor.FromArgb(100, this._color.red, this._color.green, this._color.blue), 1.0);\n        }\n        return this._navigatorpen;\n    }\n    get visible() { return this._visible; }\n    set visible(value) {\n        this._visible = value;\n        this.parent.redraw();\n    }\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = value;\n        this.parent.redraw();\n    }\n    get color() { return this._color; }\n    set color(value) {\n        this._color = value;\n        this._pen = null;\n        this._legendPen = null;\n        this._brush = null;\n        this._navigatorpen = null;\n        this.parent.redraw();\n    }\n    get thickness() { return this._thickness; }\n    set thickness(value) {\n        if (value < 0)\n            throw new RangeError(\"Thickness must be a positive value\");\n        this._thickness = value;\n        this._pen = null;\n        this._legendPen = null;\n        this.parent.redraw();\n    }\n    get legend() { return this._legend; }\n    set legend(value) {\n        this._legend = value;\n        this.parent.redraw();\n    }\n    get unit() { return this._unit; }\n    set unit(value) {\n        this._unit = value;\n        this.parent.redraw();\n    }\n    AddNewSegment(p) {\n        this.segments.splice(0, 0, new DataSegment(p));\n    }\n    getlastPoint() {\n        if (this.segments.length <= 0) {\n            return new pointXY(NaN, NaN);\n        }\n        return this.segments[this.segments.length - 1].data[this.segments[this.segments.length - 1].count - 1];\n    }\n    AddPoint(p) {\n        this._timeRange = MinMaxHandler.CombineWithNumber(this._timeRange, p.x);\n        this._valueRange = MinMaxHandler.CombineWithNumber(this._valueRange, p.y);\n        if (this.segments.length <= 0) {\n            this.AddNewSegment(p);\n            this.totalPointCount++;\n            return;\n        }\n        else if (this.segments[0].count > 1) {\n            let delta1 = this.segments[0].data[this.segments[0].count - 1].x - this.segments[0].data[this.segments[0].count - 2].x;\n            let delta2 = p.x - this.segments[0].data[this.segments[0].count - 1].x;\n            if ((delta2 > 0.1) && ((delta2 < 0) || (delta2 > 2 * delta1))) {\n                this.AddNewSegment(p);\n                return;\n            }\n            else if (this.segments[0].count >= this.segments[0].data.length)\n                this.segments[0].grow();\n        }\n        this.segments[0].data[this.segments[0].count] = p;\n        this.segments[0].count++;\n        this.totalPointCount++;\n        if ((DataSerie._MaxPointsPerSeries > 0) && (this.totalPointCount > DataSerie._MaxPointsPerSeries))\n            this.dataCleanUp();\n        this.parent.adjustGlobalTimeRange(p.x);\n        this.parent.redraw();\n    }\n    dataCleanUp() {\n        if (this.segments.length <= 0)\n            return;\n        let newLimit = ((DataSerie._MaxPointsPerSeries * 90) / 100);\n        while (this.segments[this.segments.length - 1].count <= (this.totalPointCount - newLimit)) {\n            this.totalPointCount -= this.segments[this.segments.length - 1].count;\n            this.segments.splice(this.segments.length - 1, 1);\n        }\n        if (this.totalPointCount > newLimit) {\n            let delta = this.totalPointCount - newLimit;\n            let newsize = this.segments[this.segments.length - 1].count - delta;\n            let newdata = new Array(newsize);\n            DataSegment.ArrayCopy(this.segments[this.segments.length - 1].data, delta, newdata, 0, this.segments[this.segments.length - 1].count - delta);\n            this.segments[this.segments.length - 1].data = newdata;\n            this.segments[this.segments.length - 1].count -= delta;\n            this.totalPointCount -= delta;\n        }\n        let tmin = this.segments[0].data[0].x;\n        let tmax = this.segments[0].data[0].x;\n        let ymin = this.segments[0].data[0].y;\n        let ymax = this.segments[0].data[0].y;\n        for (let i = 0; i < this.segments.length; i++) {\n            let count = this.segments[i].count;\n            if (tmin > this.segments[i].data[0].x)\n                tmin = this.segments[i].data[0].x;\n            if (tmax < this.segments[i].data[count - 1].x)\n                tmax = this.segments[i].data[count - 1].x;\n            for (let j = 0; j < count; j++) {\n                if (ymin > this.segments[i].data[j].y)\n                    ymin = this.segments[i].data[j].y;\n                if (ymax < this.segments[i].data[j].y)\n                    ymax = this.segments[i].data[j].y;\n            }\n        }\n        this._timeRange.Min = tmin;\n        this._timeRange.Max = tmax;\n        this._valueRange.Min = ymin;\n        this._valueRange.Max = ymax;\n    }\n    InsertPoints(points) {\n        if (points.length == 0)\n            return;\n        if (points.length == 1) {\n            this._timeRange = MinMaxHandler.CombineWithNumber(this._timeRange, points[0].x);\n            this._valueRange = MinMaxHandler.CombineWithNumber(this._valueRange, points[0].y);\n            return;\n        }\n        let FirstStep = points[1].x - points[0].x;\n        let LastStep = points[points.length - 1].x - points[points.length - 2].x;\n        let InsertAtBegining = -1;\n        let InsertAtEnd = -1;\n        //int sz = System.Runtime.InteropServices.Marshal.SizeOf(typeof(pointXY));\n        // can we merge with one already existing segment ?\n        for (let i = 0; i < this.segments.length; i++) {\n            if (this.segments[i].count > 1) {\n                let DeltaInsertAtBegining = this.segments[i].data[0].x - points[points.length - 1].x;\n                let DeltaInsertAtEnd = points[0].x - this.segments[i].data[this.segments[i].count - 1].x;\n                if ((DeltaInsertAtBegining > 0) && (DeltaInsertAtBegining < 2 * FirstStep))\n                    InsertAtBegining = i;\n                if ((DeltaInsertAtEnd > 0) && (DeltaInsertAtEnd < 2 * LastStep))\n                    InsertAtEnd = i;\n            }\n        }\n        if (InsertAtBegining >= 0) // insert at the beginning of segments[InsertAtBeginning]\n         {\n            if (this.segments[InsertAtBegining].count + points.length >= this.segments[InsertAtBegining].data.length)\n                this.segments[InsertAtBegining].grow();\n            DataSegment.ArrayCopy(this.segments[InsertAtBegining].data, 0, this.segments[InsertAtBegining].data, points.length, this.segments[InsertAtBegining].count);\n            DataSegment.ArrayCopy(points, 0, this.segments[InsertAtBegining].data, 0, points.length);\n            this.segments[InsertAtBegining].count += points.length;\n            this.totalPointCount += points.length;\n        }\n        else if (InsertAtEnd >= 0) // insert at the end of segments[InsertAtEnd]\n         {\n            if (this.segments[InsertAtEnd].count + points.length >= this.segments[InsertAtEnd].data.length)\n                this.segments[InsertAtEnd].grow();\n            DataSegment.ArrayCopy(points, 0, this.segments[InsertAtEnd].data, this.segments[InsertAtEnd].count, points.length);\n            this.segments[InsertAtEnd].count += points.length;\n            this.totalPointCount += points.length;\n        }\n        else // create a whole new segment\n         {\n            this.segments.push(new DataSegment(points));\n            this.totalPointCount += points.length;\n        }\n        this._timeRange = MinMaxHandler.CombineWithNumber(this._timeRange, points[0].x);\n        this._timeRange = MinMaxHandler.CombineWithNumber(this._timeRange, points[points.length - 1].x);\n        for (let i = 0; i < points.length; i++) {\n            this._valueRange = MinMaxHandler.CombineWithNumber(this._valueRange, points[i].y);\n        }\n        if ((DataSerie._MaxPointsPerSeries > 0) && (this.totalPointCount > DataSerie._MaxPointsPerSeries))\n            this.dataCleanUp();\n        this.parent.redraw();\n    }\n    static CompareSegments(a, b) {\n        if (a.data[0].x > b.data[0].x)\n            return -1;\n        if (a.data[0].x < b.data[0].x)\n            return 1;\n        return 0;\n    }\n    getData() {\n        let res = [];\n        this.segments.sort(DataSerie.CompareSegments);\n        for (let i = this.segments.length - 1; i >= 0; i--) {\n            for (let j = 0; j < this.segments[i].count; j++) {\n                res.push(this.segments[i].data[j]);\n            }\n        }\n        return res;\n    }\n    findClosestValue(x, AllowInterpolation) {\n        let N1 = 0;\n        let N2 = 0;\n        let Pos = 0;\n        if (this.segments.length <= 0)\n            return null;\n        // check for best match inside segments\n        for (let i = 0; i < this.segments.length; i++) {\n            if ((x >= this.segments[i].data[0].x) && (x <= this.segments[i].data[this.segments[i].count - 1].x)) {\n                let data = this.segments[i].data;\n                N1 = 0;\n                N2 = this.segments[i].count - 1;\n                while (N2 - N1 > 1) {\n                    let N = (N1 + N2) >> 1;\n                    if (data[N].x > x)\n                        N2 = N;\n                    else\n                        N1 = N;\n                }\n                Pos = N1 - 1;\n                if (Pos < 0)\n                    Pos = 0;\n                if (!AllowInterpolation) {\n                    if (x - data[Pos].x < data[Pos + 1].x - x)\n                        return data[Pos];\n                    else\n                        return data[Pos + 1];\n                }\n                else {\n                    Pos++;\n                    if (x == data[Pos].x)\n                        return data[Pos];\n                    if (x == data[Pos + 1].x)\n                        return data[Pos + 1];\n                    let p = new pointXY();\n                    p.x = x;\n                    p.y = data[Pos].y + (data[Pos + 1].y - data[Pos].y) * (x - data[Pos].x) / (data[Pos + 1].x - data[Pos].x);\n                    return p;\n                }\n            }\n        }\n        if (AllowInterpolation)\n            return null;\n        // check for best match outside segments\n        try {\n            this.segments[0].data[0].clone();\n        }\n        catch (e) {\n            debugger;\n        }\n        let match = this.segments[0].data[0];\n        let delta = Math.abs(this.segments[0].data[0].x - x);\n        for (let i = 0; i < this.segments.length; i++) {\n            let d1 = Math.abs(this.segments[i].data[0].x - x);\n            let d2 = Math.abs(this.segments[i].data[this.segments[i].count - 1].x - x);\n            if (d1 < delta) {\n                match = this.segments[i].data[0];\n                delta = d1;\n            }\n            if (d2 < delta) {\n                match = this.segments[i].data[this.segments[i].count - 1];\n                delta = d2;\n            }\n        }\n        return match.clone();\n    }\n    clear() {\n        this.segments = [];\n        this._timeRange = MinMaxHandler.DefaultValue();\n        this._valueRange = MinMaxHandler.DefaultValue();\n        this.parent.clearCachedObjects();\n        this.totalPointCount = 0;\n    }\n}\nDataSerie._MaxPointsPerSeries = 0;\nexport class DataTracker {\n    get directParent() { return this._directParent; }\n    get userData() { return this._userData; }\n    set userData(value) { this._userData = value; }\n    constructor(parent, directParent) {\n        this._userData = null;\n        this._enabled = false;\n        this._showSerieName = false;\n        this._showTimeStamp = false;\n        this._dataPrecisionString = \"\";\n        this._dataPrecision = DataTracker.DataPrecision.PRECISION_NOLIMIT;\n        this._diameter = 5;\n        this._handleLength = 25;\n        this._detectionDistance = 50;\n        this._bgColor = YDataRendering.YColor.FromArgb(200, 255, 255, 255);\n        this._borderColor = YDataRendering.YColor.Black;\n        this._borderthickness = 1.0;\n        this._padding = 10;\n        this._verticalMargin = 10;\n        this._horizontalMargin = 10;\n        this._bgBrush = null;\n        this._pen = null;\n        this._font = null;\n        this._directParent = directParent;\n        this._parentRenderer = parent;\n        this._font = new YDataRendering.YFont(parent, this, 8, null);\n    }\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        this._enabled = value;\n        this._parentRenderer.redraw();\n    }\n    get showSerieName() { return this._showSerieName; }\n    set showSerieName(value) {\n        this._showSerieName = value;\n        this._parentRenderer.redraw();\n    }\n    get showTimeStamp() { return this._showTimeStamp; }\n    set showTimeStamp(value) {\n        this._showTimeStamp = value;\n        this._parentRenderer.redraw();\n    }\n    get dataPrecisionString() { return this._dataPrecisionString; }\n    get dataPrecision() { return this._dataPrecision; }\n    set dataPrecision(value) {\n        this._dataPrecision = value;\n        this.compute_dataPrecisionString();\n        this._parentRenderer.redraw();\n    }\n    compute_dataPrecisionString() {\n        if (this._dataPrecision == DataTracker.DataPrecision.PRECISION_NOLIMIT) {\n            this._dataPrecisionString = \"\";\n            return;\n        }\n        this._dataPrecisionString = \"0.\";\n        // FIXME\n        // for (let i: number = 1; i < this._dataPrecision; i++) this._dataPrecisionString += \"#\";\n    }\n    get diameter() { return this._diameter; }\n    set diameter(value) {\n        if (value < 0)\n            throw new RangeError(\"Diameter must be a positive value\");\n        this._diameter = value;\n        this._parentRenderer.redraw();\n    }\n    get handleLength() { return this._handleLength; }\n    set handleLength(value) {\n        if (value < 0)\n            throw new RangeError(\"Hanle length must be a positive value\");\n        this._handleLength = value;\n        this._parentRenderer.redraw();\n    }\n    get detectionDistance() { return this._detectionDistance; }\n    set detectionDistance(value) {\n        if (value <= 0)\n            throw new RangeError(\"Distance must be a positive value\");\n        this._detectionDistance = value;\n    }\n    get bgColor() { return this._bgColor; }\n    set bgColor(value) {\n        this._bgColor = value;\n        this._bgBrush = null;\n        this._parentRenderer.redraw();\n    }\n    get borderColor() { return this._borderColor; }\n    set borderColor(value) {\n        this._borderColor = value;\n        this._pen = null;\n        this._parentRenderer.redraw();\n    }\n    get borderthickness() { return this._borderthickness; }\n    set borderthickness(value) {\n        if (value < 0)\n            throw new RangeError(\"Thickness must be a positive value\");\n        this._borderthickness = value;\n        this._pen = null;\n        this._parentRenderer.redraw();\n    }\n    get padding() { return this._padding; }\n    set padding(value) {\n        if (value < 0)\n            throw new RangeError(\"Padding must be a positive value\");\n        this._padding = value;\n        this._parentRenderer.redraw();\n    }\n    get verticalMargin() { return this._verticalMargin; }\n    set verticalMargin(value) {\n        if (value < 0)\n            throw new RangeError(\"Margin must be a positive value\");\n        this._verticalMargin = value;\n        this._parentRenderer.redraw();\n    }\n    get horizontalMargin() { return this._horizontalMargin; }\n    set horizontalMargin(value) {\n        if (value < 0)\n            throw new RangeError(\"Margin must be a positive value\");\n        this._horizontalMargin = value;\n        this._parentRenderer.redraw();\n    }\n    get bgBrush() {\n        if (this._bgBrush == null) {\n            this._bgBrush = new YDataRendering.YSolidBrush(this._bgColor);\n        }\n        return this._bgBrush;\n    }\n    get pen() {\n        if (this._pen == null)\n            this._pen = new YDataRendering.YPen(this._borderColor, this._borderthickness, true);\n        return this._pen;\n    }\n    get font() { return this._font; }\n}\n(function (DataTracker) {\n    class DataPrecisionEnumItem extends YDataRendering.YEnumItem {\n        constructor(value, humanreadable, container) {\n            super(value, humanreadable, DataPrecision);\n        }\n    }\n    DataTracker.DataPrecisionEnumItem = DataPrecisionEnumItem;\n    class DataPrecision extends YDataRendering.YEnum {\n    }\n    DataPrecision.PRECISION_NOLIMIT = new DataPrecisionEnumItem(\"PRECISION_NOLIMIT\", \"As is\");\n    DataPrecision.PRECISION_1 = new DataPrecisionEnumItem(\"PRECISION_1\", \"1\");\n    DataPrecision.PRECISION_01 = new DataPrecisionEnumItem(\"PRECISION_01\", \"0.1\");\n    DataPrecision.PRECISION_001 = new DataPrecisionEnumItem(\"PRECISION_001\", \"0.01\");\n    DataPrecision.PRECISION_0001 = new DataPrecisionEnumItem(\"PRECISION_0001\", \"0.001\");\n    DataPrecision.PRECISION_00001 = new DataPrecisionEnumItem(\"PRECISION_00001\", \"0.0001\");\n    DataPrecision.PRECISION_000001 = new DataPrecisionEnumItem(\"PRECISION_000001\", \"0.00001\");\n    DataPrecision.PRECISION_0000001 = new DataPrecisionEnumItem(\"PRECISION_0000001\", \"0.000001\");\n    DataPrecision.PRECISION_00000001 = new DataPrecisionEnumItem(\"PRECISION_00000001\", \"0.0000001\");\n    DataPrecision.PRECISION_000000001 = new DataPrecisionEnumItem(\"PRECISION_000000001\", \"0.00000001\");\n    DataPrecision.PRECISION_0000000001 = new DataPrecisionEnumItem(\"PRECISION_0000000001\", \"0.000000001\");\n    DataTracker.DataPrecision = DataPrecision;\n})(DataTracker || (DataTracker = {}));\nexport class LegendPanel {\n    get directParent() { return this._directParent; }\n    get userData() { return this._userData; }\n    set userData(value) { this._userData = value; }\n    get traceWidthFactor() { return this._traceWidth; }\n    set traceWidthFactor(value) {\n        if (value <= 0)\n            throw new RangeError(\"This has to be a strictly positive value\");\n        this._traceWidth = value;\n        this._parentRenderer.resetlegendPens();\n        this._parentRenderer.redraw();\n    }\n    constructor(parent, directParent) {\n        this._userData = null;\n        this._traceWidth = 1.0;\n        this._enabled = false;\n        this._position = LegendPanel.Position.BOTTOM;\n        this._overlap = false;\n        this._bgColor = YDataRendering.YColor.FromArgb(200, 255, 255, 255);\n        this._borderColor = YDataRendering.YColor.Black;\n        this._borderthickness = 1.0;\n        this._padding = 10;\n        this._verticalMargin = 10;\n        this._horizontalMargin = 10;\n        this._bgBrush = null;\n        this._pen = null;\n        this._font = null;\n        this._directParent = directParent;\n        this._parentRenderer = parent;\n        this._font = new YDataRendering.YFont(parent, this, 8, null);\n    }\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        this._enabled = value;\n        this._parentRenderer.redraw();\n    }\n    get position() { return this._position; }\n    set position(value) {\n        this._position = value;\n        this._parentRenderer.redraw();\n    }\n    get overlap() { return this._overlap; }\n    set overlap(value) {\n        this._overlap = value;\n        this._parentRenderer.redraw();\n    }\n    get bgColor() { return this._bgColor; }\n    set bgColor(value) {\n        this._bgColor = value;\n        this._bgBrush = null;\n        this._parentRenderer.redraw();\n    }\n    get borderColor() { return this._borderColor; }\n    set borderColor(value) {\n        this._borderColor = value;\n        this._pen = null;\n        this._parentRenderer.redraw();\n    }\n    get borderthickness() { return this._borderthickness; }\n    set borderthickness(value) {\n        if (value < 0)\n            throw new RangeError(\"Thickness must be a positive value\");\n        this._borderthickness = value;\n        this._pen = null;\n        this._parentRenderer.redraw();\n    }\n    get padding() { return this._padding; }\n    set padding(value) {\n        if (value < 0)\n            throw new RangeError(\"Padding must be a positive value\");\n        this._padding = value;\n        this._parentRenderer.redraw();\n    }\n    get verticalMargin() { return this._verticalMargin; }\n    set verticalMargin(value) {\n        if (value < 0)\n            throw new RangeError(\"Margin must be a positive value\");\n        this._verticalMargin = value;\n        this._parentRenderer.redraw();\n    }\n    get horizontalMargin() { return this._horizontalMargin; }\n    set horizontalMargin(value) {\n        if (value < 0)\n            throw new RangeError(\"Margin must be a positive value\");\n        this._horizontalMargin = value;\n        this._parentRenderer.redraw();\n    }\n    get bgBrush() {\n        if (this._bgBrush == null) {\n            this._bgBrush = new YDataRendering.YSolidBrush(this._bgColor);\n        }\n        return this._bgBrush;\n    }\n    get pen() {\n        if (this._pen == null)\n            this._pen = new YDataRendering.YPen(this._borderColor, this._borderthickness, true);\n        return this._pen;\n    }\n    get font() { return this._font; }\n}\n(function (LegendPanel) {\n    class PositionEnumItem extends YDataRendering.YEnumItem {\n        constructor(value, humanreadable, container) {\n            super(value, humanreadable, Position);\n        }\n    }\n    LegendPanel.PositionEnumItem = PositionEnumItem;\n    class Position extends YDataRendering.YEnum {\n    }\n    Position.LEFT = new PositionEnumItem(\"LEFT\", \"Left\");\n    Position.TOPLEFT = new PositionEnumItem(\"TOPLEFT\", \"Top-Left\");\n    Position.TOP = new PositionEnumItem(\"TOP\", \"Top\");\n    Position.TOPRIGHT = new PositionEnumItem(\"TOPRIGHT\", \"Top-Right\");\n    Position.RIGHT = new PositionEnumItem(\"RIGHT\", \"Right\");\n    Position.BOTTOMRIGHT = new PositionEnumItem(\"BOTTOMRIGHT\", \"Bottom-Right\");\n    Position.BOTTOM = new PositionEnumItem(\"BOTTOM\", \"Bottom\");\n    Position.BOTTOMLEFT = new PositionEnumItem(\"BOTTOMLEFT\", \"Bottom-Left\");\n    LegendPanel.Position = Position;\n})(LegendPanel || (LegendPanel = {}));\nexport class Navigator {\n    get directParent() { return this._directParent; }\n    get userData() { return this._userData; }\n    set userData(value) { this._userData = value; }\n    get showXAxisZones() { return this._showXAxisZones; }\n    set showXAxisZones(value) { this._showXAxisZones = value; }\n    get relativeheight() { return this._relativeheight; }\n    set relativeheight(value) {\n        if (value < 10)\n            value = 10;\n        if (value > 50)\n            value = 50;\n        this._relativeheight = value;\n        this._parentRenderer.redraw();\n    }\n    constructor(parent, directParent) {\n        this._userData = null;\n        this._viewport = new YDataRendering.ViewPortSettings();\n        this.Xrange = null;\n        this._showXAxisZones = true;\n        this._relativeheight = 10;\n        this._enabled = false;\n        this._bgColor1 = YDataRendering.YColor.FromArgb(255, 225, 225, 225);\n        this._cursorBorderColor = YDataRendering.YColor.FromArgb(255, 40, 40, 40);\n        this._yAxisHandling = Navigator.YAxisHandling.AUTO;\n        this._bgColor2 = YDataRendering.YColor.FromArgb(255, 225, 225, 225);\n        this._cursorColor = YDataRendering.YColor.FromArgb(100, 0, 255, 0);\n        this._cursorBrush = null;\n        this._pen = null;\n        this._cursorBorderPen = null;\n        this._xAxisColor = YDataRendering.YColor.Black;\n        this._xAxisThickness = 1.0;\n        this._borderPen = null;\n        this._borderColor = YDataRendering.YColor.DimGray;\n        this._borderThickness = 1.0;\n        this._bgBrush = null;\n        this._font = null;\n        this._directParent = directParent;\n        this._parentRenderer = parent;\n        this._font = new YDataRendering.YFont(parent, this, 8, null);\n    }\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        this._enabled = value;\n        this._parentRenderer.redraw();\n    }\n    get bgColor1() { return this._bgColor1; }\n    set bgColor1(value) {\n        this._bgColor1 = value;\n        this._bgBrush = null;\n        this._parentRenderer.redraw();\n    }\n    get cursorBorderColor() { return this._cursorBorderColor; }\n    set cursorBorderColor(value) {\n        this._cursorBorderColor = value;\n        this._cursorBorderPen = null;\n        this._parentRenderer.redraw();\n    }\n    get yAxisHandling() { return this._yAxisHandling; }\n    set yAxisHandling(value) {\n        this._yAxisHandling = value;\n        this._parentRenderer.redraw();\n    }\n    get bgColor2() { return this._bgColor2; }\n    set bgColor2(value) {\n        this._bgColor2 = value;\n        this._bgBrush = null;\n        this._parentRenderer.redraw();\n    }\n    get cursorColor() { return this._cursorColor; }\n    set cursorColor(value) {\n        this._cursorColor = value;\n        this._cursorBrush = null;\n        this._parentRenderer.redraw();\n    }\n    get cursorBrush() {\n        if (this._cursorBrush == null) {\n            this._cursorBrush = new YDataRendering.YSolidBrush(this._cursorColor);\n        }\n        return this._cursorBrush;\n    }\n    get pen() {\n        if (this._pen == null)\n            this._pen = new YDataRendering.YPen(this._xAxisColor, this._xAxisThickness, true);\n        return this._pen;\n    }\n    get cursorBorderPen() {\n        if (this._cursorBorderPen == null)\n            this._cursorBorderPen = new YDataRendering.YPen(this._cursorBorderColor, 1, true);\n        return this._cursorBorderPen;\n    }\n    get xAxisColor() { return this._xAxisColor; }\n    set xAxisColor(value) {\n        this._xAxisColor = value;\n        this._pen = null;\n        this._parentRenderer.redraw();\n    }\n    get xAxisThickness() { return this._xAxisThickness; }\n    set xAxisThickness(value) {\n        if (value < 0)\n            throw new RangeError(\"Thickness must be a positive value\");\n        this._xAxisThickness = value;\n        this._pen = null;\n        this._parentRenderer.redraw();\n    }\n    get borderPen() {\n        if (this._borderPen == null)\n            this._borderPen = new YDataRendering.YPen(this._borderColor, this._borderThickness, true);\n        return this._borderPen;\n    }\n    get borderColor() { return this._borderColor; }\n    set borderColor(value) {\n        this._borderColor = value;\n        this._borderPen = null;\n        this._parentRenderer.redraw();\n    }\n    get borderThickness() { return this._borderThickness; }\n    set borderThickness(value) {\n        if (value < 0)\n            throw new RangeError(\"Thickness must be a positive value\");\n        this._borderThickness = value;\n        this._borderPen = null;\n        this._parentRenderer.redraw();\n    }\n    setPosition(ParentWidth, ParentHeight, Lmargin, Rmargin, Tmargin, Bmargin) {\n        if ((this._viewport.Lmargin != Lmargin) || (this._viewport.Rmargin != Rmargin)\n            || (this._viewport.Tmargin != Tmargin) || (this._viewport.Bmargin != Bmargin)) {\n            this._bgBrush = null;\n        }\n        this._viewport.Lmargin = Lmargin;\n        this._viewport.Rmargin = Rmargin;\n        this._viewport.Bmargin = Bmargin;\n        this._viewport.Tmargin = Tmargin;\n        this._viewport.Width = ParentWidth;\n        this._viewport.Height = ParentHeight;\n    }\n    setIRLPosition(IRLx, IRLy, xZoom, yZoom) {\n        this._viewport.IRLx = IRLx;\n        this._viewport.IRLy = IRLy;\n        this._viewport.zoomx = xZoom;\n        this._viewport.zoomy = yZoom;\n    }\n    startCapture(IRLStartPoint, xAxisMin, xAxisMax) {\n        this._viewport.OriginalXAxisMin = xAxisMin;\n        this._viewport.OriginalXAxisMax = xAxisMax;\n        this._viewport.OriginalIRLx = this._viewport.IRLx;\n        this._viewport.OriginalLmargin = this._viewport.Lmargin;\n        this._viewport.OriginalZoomx = this._viewport.zoomx;\n        this._viewport.IRLCaptureStartX = IRLStartPoint.x;\n        this._viewport.Capture = true;\n    }\n    get Capture() { return this._viewport.Capture; }\n    stopCapture() { this._viewport.Capture = false; }\n    get viewport() { return this._viewport; }\n    get bgBrush() {\n        if (this._bgBrush == null) {\n            this._bgBrush = new YDataRendering.YLinearGradientBrush(this._bgColor1, this._bgColor2);\n        }\n        return this._bgBrush;\n    }\n    get font() { return this._font; }\n}\n(function (Navigator) {\n    class YAxisHandlingEnumItem extends YDataRendering.YEnumItem {\n        constructor(value, humanreadable, container) {\n            super(value, humanreadable, YAxisHandling);\n        }\n    }\n    Navigator.YAxisHandlingEnumItem = YAxisHandlingEnumItem;\n    class YAxisHandling extends YDataRendering.YEnum {\n    }\n    YAxisHandling.AUTO = new YAxisHandlingEnumItem(\"AUTO\", \"Automatic\");\n    YAxisHandling.INHERIT = new YAxisHandlingEnumItem(\"INHERIT\", \"Inherit from main view\");\n    Navigator.YAxisHandling = YAxisHandling;\n})(Navigator || (Navigator = {}));\nexport class Marker {\n    get userData() { return this._userData; }\n    set userData(value) { this._userData = value; }\n    static _round100(v) { return Math.round(100 * v) / 100; }\n    get stringFormat() {\n        if (this._stringFormat != null)\n            return this._stringFormat;\n        this._stringFormat = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\n        this._stringFormat.LineAlignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\n        switch (this._textAlign) {\n            case Marker.TextAlign.LEFT:\n                this._stringFormat.Alignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\n                break;\n            case Marker.TextAlign.CENTER:\n                this._stringFormat.Alignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\n                break;\n            case Marker.TextAlign.RIGHT:\n                this._stringFormat.Alignment = 2 /* YDataRendering.YStringFormat.StringAlignment.Far */;\n                break;\n        }\n        return this._stringFormat;\n    }\n    get PatchTextCallback() { return this._MarkerTextCallback; }\n    set PatchTextCallback(callback) { this._MarkerTextCallback = callback; }\n    get directParent() { return this._directParent; }\n    constructor(parent, directParent) {\n        this._userData = null;\n        this._stringFormat = null;\n        this._MarkerTextCallback = null;\n        this._enabled = false;\n        this._xposition = 0.0;\n        this._xpositionIsRelative = false;\n        this._yposition = 92.0;\n        this._text = \"Marker\";\n        this._textAlign = Marker.TextAlign.CENTER;\n        this._bgColor = YDataRendering.YColor.FromArgb(255, 255, 255, 192);\n        this._borderColor = YDataRendering.YColor.DarkRed;\n        this._borderthickness = 1;\n        this._arrowSize = 5;\n        this._padding = 5;\n        this._verticalMargin = 5;\n        this._horizontalMargin = 5;\n        this._bgBrush = null;\n        this._arrowBrush = null;\n        this._pen = null;\n        this._navigatorpen = null;\n        this._font = null;\n        this._directParent = directParent;\n        this._parentRenderer = parent;\n        this._font = new YDataRendering.YFont(parent, this, 8, null);\n    }\n    startCapture() {\n        this._parentRenderer.startMarkerCapture(this);\n    }\n    setCapturedPosition(position, axis) {\n        this.enabled = true;\n        this._xpositionIsRelative = (axis.timeReference == TimeConverter.TimeReference.RELATIVE) && axis.zeroTime > 0;\n        this._xposition = Marker._round100(this._xpositionIsRelative ? position - axis.zeroTime : position);\n        this._parentRenderer.clearCachedObjects();\n        this._parentRenderer.redraw();\n    }\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        if (this._enabled != value) {\n            this._enabled = value;\n            this._parentRenderer.clearCachedObjects();\n            this._parentRenderer.redraw();\n        }\n    }\n    get xposition() { return this._xposition; }\n    set xposition(value) {\n        this._xposition = Marker._round100(value);\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get timereference() { return this._xpositionIsRelative ? TimeConverter.TimeReference.RELATIVE : TimeConverter.TimeReference.ABSOLUTE; }\n    set timereference(value) {\n        let v = value == TimeConverter.TimeReference.RELATIVE;\n        if (this._xpositionIsRelative != v) {\n            let ZeroPosition = this._directParent.zeroTime;\n            if (isNaN(ZeroPosition))\n                ZeroPosition = 0;\n            if (v) {\n                this._xpositionIsRelative = true;\n                this._xposition -= ZeroPosition;\n            }\n            else {\n                this._xpositionIsRelative = false;\n                this._xposition += ZeroPosition;\n            }\n            this._xposition = Marker._round100(this._xposition);\n            this._parentRenderer.redraw();\n        }\n    }\n    // a special variant which also to get/set both xposition and xpositionIsRelative at the same time\n    // and allow to start position capture as well.\n    get positionOnXAxis() { return new xAxisPosition(this._xposition, this._xpositionIsRelative); }\n    set positionOnXAxis(value) {\n        if (value.capture) {\n            this.startCapture();\n        }\n        else {\n            let v = Marker._round100(value.value);\n            if ((this._xpositionIsRelative != value.relative) || (this._xposition != v)) {\n                this._xposition = v;\n                this._xpositionIsRelative = value.relative;\n                if (this._enabled)\n                    this._parentRenderer.redraw();\n            }\n        }\n    }\n    get yposition() { return this._yposition; }\n    set yposition(value) {\n        this._yposition = Math.min(100, Math.max(0, value));\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get text() { return this._text; }\n    set text(value) {\n        this._text = value;\n        this._parentRenderer.clearCachedObjects();\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get textAlign() { return this._textAlign; }\n    set textAlign(value) {\n        this._textAlign = value;\n        this._stringFormat = null;\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get shortText() {\n        if (this._text.length <= 20)\n            return this._text;\n        return this._text.substring(0, 18) + \"..\";\n    }\n    get bgColor() { return this._bgColor; }\n    set bgColor(value) {\n        this._bgColor = value;\n        this._bgBrush = null;\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get borderColor() { return this._borderColor; }\n    set borderColor(value) {\n        this._borderColor = value;\n        this._arrowBrush = null;\n        this._pen = null;\n        this._navigatorpen = null;\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get borderthickness() { return this._borderthickness; }\n    set borderthickness(value) {\n        if (value < 0)\n            throw new RangeError(\"thickness must be a positive value\");\n        this._borderthickness = value;\n        this._parentRenderer.clearCachedObjects();\n        this._pen = null;\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get arrowSize() { return this._arrowSize; }\n    set arrowSize(value) {\n        this._arrowSize = value;\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get padding() { return this._padding; }\n    set padding(value) {\n        if (value < 0)\n            throw new RangeError(\"Padding must be a positive value\");\n        this._padding = value;\n        this._parentRenderer.clearCachedObjects();\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get verticalMargin() { return this._verticalMargin; }\n    set verticalMargin(value) {\n        this._verticalMargin = value;\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get horizontalMargin() { return this._horizontalMargin; }\n    set horizontalMargin(value) {\n        this._horizontalMargin = value;\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get bgBrush() {\n        if (this._bgBrush == null) {\n            this._bgBrush = new YDataRendering.YSolidBrush(this._bgColor);\n        }\n        return this._bgBrush;\n    }\n    get arrowBrush() {\n        if (this._arrowBrush == null) {\n            this._arrowBrush = new YDataRendering.YSolidBrush(this._borderColor, true);\n        }\n        return this._arrowBrush;\n    }\n    get pen() {\n        if (this._pen == null)\n            this._pen = new YDataRendering.YPen(this._borderColor, this._borderthickness, true);\n        return this._pen;\n    }\n    get navigatorpen() {\n        if (this._navigatorpen == null)\n            this._navigatorpen = new YDataRendering.YPen(this._borderColor, 1.0);\n        return this._navigatorpen;\n    }\n    get font() { return this._font; }\n}\n(function (Marker) {\n    /* export enum TextAlign\n  {\n    LEFT = \"Left\", CENTER = \"Center\", RIGHT = \"Right\"\n  }*/\n    class TextAlignEnumItem extends YDataRendering.YEnumItem {\n        constructor(value, humanreadable, container) {\n            super(value, humanreadable, TextAlign);\n        }\n    }\n    Marker.TextAlignEnumItem = TextAlignEnumItem;\n    class TextAlign extends YDataRendering.YEnum {\n    }\n    TextAlign.LEFT = new TextAlignEnumItem(\"LEFT\", \"Left\");\n    TextAlign.CENTER = new TextAlignEnumItem(\"CENTER\", \"Center\");\n    TextAlign.RIGHT = new TextAlignEnumItem(\"RIGHT\", \"Right\");\n    Marker.TextAlign = TextAlign;\n})(Marker || (Marker = {}));\nexport class Legend {\n    get directParent() { return this._directParent; }\n    get userData() { return this._userData; }\n    set userData(value) { this._userData = value; }\n    constructor(parent, directParent) {\n        this._userData = null;\n        this._title = \"\";\n        this._font = null;\n        this._directParent = directParent;\n        this._parentRenderer = parent;\n        this._font = new YDataRendering.YFont(parent, this, 12, null);\n    }\n    get title() { return this._title; }\n    set title(value) {\n        this._title = value;\n        this._parentRenderer.redraw();\n    }\n    get font() { return this._font; }\n}\nexport class GenericAxis {\n    get directParent() { return this._directParent; }\n    get zones() { return this._zones; }\n    AddZone() {\n        let z = new YDataRendering.Zone(this._parentRenderer, this);\n        this._zones.push(z);\n        return z;\n    }\n    get userData() { return this._userData; }\n    set userData(value) { this._userData = value; }\n    get AxisChanged() { return this._AxisChanged; }\n    set AxisChanged(value) { this._AxisChanged = value; }\n    constructor(parent, directParent) {\n        this._userData = null;\n        this._AxisChanged = null;\n        this._pen = null;\n        this._gridPen = null;\n        this._visible = true;\n        this._AllowAutoShow = false;\n        this._min = Number.NaN;\n        this._max = Number.NaN;\n        this._step = Number.NaN;\n        this._thickness = 1.0;\n        this._color = YDataRendering.YColor.Black;\n        this._showGrid = false;\n        this._gridColor = YDataRendering.YColor.FromArgb(50, 0, 0, 0);\n        this._gridThickness = 1.0;\n        this._font = null;\n        this._zones = [];\n        this._directParent = directParent;\n        this._parentRenderer = parent;\n        this._legend = new Legend(parent, this);\n        this._font = new YDataRendering.YFont(parent, this);\n    }\n    get pen() {\n        if (this._pen == null)\n            this._pen = new YDataRendering.YPen(this._color, this._thickness, true);\n        return this._pen;\n    }\n    get gridPen() {\n        if (this._gridPen == null)\n            this._gridPen = new YDataRendering.YPen(this._gridColor, this._gridThickness, true);\n        return this._gridPen;\n    }\n    get visible() { return this._visible; }\n    set visible(value) {\n        this._visible = value;\n        if (!value) {\n            this._AllowAutoShow = false;\n        }\n        this._parentRenderer.redraw();\n    }\n    get AllowAutoShow() { return this._AllowAutoShow; }\n    set AllowAutoShow(value) { this._AllowAutoShow = value; }\n    AutoShow() {\n        if (this._AllowAutoShow) {\n            this.visible = true;\n            if (this._AxisChanged != null)\n                this._AxisChanged(this);\n        }\n    }\n    set_minMax(value_min, value_max) {\n        if (!isNaN(value_min) && !isNaN(value_max) && (value_min >= value_max)) {\n            throw new RangeError(\"Min (\" + value_min.toString() + \") cannot be greater than max (\" + value_max.toString() + \")\");\n        }\n        this._min = value_min;\n        this._max = value_max;\n        this._parentRenderer.redraw();\n    }\n    get min() { return this._min; }\n    set min(value) {\n        if (!isNaN(value) && !isNaN(this._max) && !YDataRendering.YDataRenderer.minMaxCheckDisabled) {\n            if (value >= this._max) {\n                throw new RangeError(\"Min cannot be greater than max (\" + this._max.toString() + \")\");\n            }\n        }\n        this._min = value;\n        this._parentRenderer.redraw();\n    }\n    setMinMax(min, max) {\n        if (min < max) {\n            this._min = min;\n            this._max = max;\n            this._parentRenderer.redraw();\n        }\n    }\n    get max() { return this._max; }\n    set max(value) {\n        if (!isNaN(value) && !isNaN(this._min) && !YDataRendering.YDataRenderer.minMaxCheckDisabled) {\n            if (value <= this._min)\n                throw new RangeError(\"Max cannot be less than min (\" + this._min.toString() + \")\");\n        }\n        this._max = value;\n        this._parentRenderer.redraw();\n    }\n    get step() { return this._step; }\n    set step(value) {\n        if (!isNaN(value) && (value < 0))\n            throw new RangeError(\"Steps must be a strictely positive value\");\n        this._step = value;\n        this._parentRenderer.redraw();\n    }\n    get thickness() { return this._thickness; }\n    set thickness(value) {\n        if (value < 0)\n            throw new RangeError(\"Thickness must be a positive value\");\n        this._thickness = value;\n        this._pen = null;\n        this._parentRenderer.redraw();\n    }\n    get color() { return this._color; }\n    set color(value) {\n        this._color = value;\n        this._pen = null;\n        this._parentRenderer.redraw();\n    }\n    get showGrid() { return this._showGrid; }\n    set showGrid(value) {\n        this._showGrid = value;\n        this._parentRenderer.redraw();\n    }\n    get gridColor() { return this._gridColor; }\n    set gridColor(value) {\n        this._gridColor = value;\n        this._gridPen = null;\n        this._parentRenderer.redraw();\n    }\n    get gridThickness() { return this._gridThickness; }\n    set gridThickness(value) {\n        if (value < 0)\n            throw new RangeError(\"Thickness must be a positive value\");\n        this._gridThickness = value;\n        this._gridPen = null;\n        this._parentRenderer.redraw();\n    }\n    get font() { return this._font; }\n    get legend() { return this._legend; }\n}\nexport class StartStopStep {\n    constructor() {\n        this.dataMin = 0;\n        this.dataMax = 0;\n        this.absMin = 0;\n        this.absMax = 0;\n        this.step = 0;\n        this.start = 0;\n        this.stop = 0;\n        this.precision = 0;\n    }\n}\n/*  never used?\n\npublic class ReadOnlyIndexedProperty<TValue>\n{\n  readonly List<TValue> ContainerList;\n\n  public ReadOnlyIndexedProperty(List<TValue> list)\n{\n  this.ContainerList = list;\n}\n\npublic TValue this[int i]\n{\n  get\n  {\n    return ContainerList[i];\n  }\n}\n\npublic int Count { get { return ContainerList.Count; } }\n}\n*/\nexport class xAxisPosition {\n    get relative() { return this._isRelative; }\n    set relative(value) { this._isRelative = value; }\n    get value() { return this._value; }\n    set value(value) { this._value = value; }\n    constructor(v, rel, capture) {\n        this._isRelative = false;\n        this._value = 0;\n        // a weird way to start the marker position capture\n        // through a property change, as Yocto-Visualization\n        // editor can only change properties.\n        this._capture = false;\n        this._isRelative = rel;\n        this._value = v;\n        this._capture = typeof (capture) == \"undefined\" ? false : capture;\n    }\n    clone() {\n        return new xAxisPosition(this._value, this._isRelative, this._capture);\n    }\n    toString() {\n        if (this._isRelative) {\n            return TimeConverter.secTimeSpanToString(this._value, 0);\n        }\n        else { // will need a fix to use this.DTdisplayformat\n            let date = TimeConverter.FromUnixTime(this._value);\n            let res = date.getFullYear().toString() + \"-\" + (date.getMonth() + 1).toString() + \"-\" + date.getDate().toString()\n                + \" \" + date.getHours().toString() + \":\";\n            let st = date.getMinutes().toString();\n            if (st.length <= 1)\n                st = \"0\" + st;\n            res = res + st + \":\";\n            let s = date.getSeconds();\n            let ms = date.getMilliseconds();\n            s = s + ms / 1000;\n            if (s < 10)\n                res = res + \"0\";\n            if (ms == 0) {\n                res = res + s.toString();\n            }\n            else {\n                res = res + s.toFixed(3);\n            }\n            return res;\n        }\n    }\n    TryParse(str) {\n        if (this._isRelative)\n            return TimeConverter.tryParseStringToSecTimeSpan(str);\n        return TimeConverter.tryParseStringToAbsDateTime(str);\n    }\n    get capture() { return this._capture; }\n    set capture(value) { this._capture = value; }\n}\nxAxisPosition.DTdisplayformat = \"DD/MM/YY hh:mm:ss.ff\";\nxAxisPosition.TSdisplayformat = \"dd.hh:mm:ss.ff\";\nclass YNumberFormatInfo {\n    constructor() {\n        this.NumberDecimalSeparator = \".\";\n    }\n}\nexport class YAxis extends GenericAxis {\n    constructor(parent, directParent, index) {\n        super(parent, directParent);\n        this._index = 0;\n        this._highlightZero = false;\n        this._position = YAxis.HrzPosition.LEFT;\n        this.innerWidth = 0; // public, really?\n        this.zoom = 0;\n        this.IRLy = 0;\n        this._index = index;\n        this.nfi = new YNumberFormatInfo();\n        this.nfi.NumberDecimalSeparator = \".\";\n        this.startStopStep = new StartStopStep();\n        this.startStopStep.start = 0;\n        this.startStopStep.stop = 1;\n        this.startStopStep.step = .1;\n    }\n    get index() { return this._index; }\n    lockMinMax() {\n        this._min = this.startStopStep.absMin;\n        this._max = this.startStopStep.absMax;\n        this._parentRenderer.redraw();\n    }\n    unlockMinMax() {\n        this._min = Number.NaN;\n        this._max = Number.NaN;\n        this._parentRenderer.redraw();\n    }\n    get highlightZero() { return this._highlightZero; }\n    set highlightZero(value) {\n        this._highlightZero = value;\n        this._parentRenderer.redraw();\n    }\n    get position() { return this._position; }\n    set position(value) {\n        this._position = value;\n        this._parentRenderer.redraw();\n    }\n    computeStartAndStep(M) {\n        let res = new StartStopStep();\n        let min = this.min;\n        let max = this.max;\n        res.step = this.step;\n        res.precision = 0;\n        if (!MinMaxHandler.isDefined(M)) {\n            M = MinMaxHandler.DefaultValue();\n            M.Min = 0;\n            M.Max = 100.0;\n        }\n        if (isNaN(min))\n            min = M.Min;\n        if (isNaN(max))\n            max = M.Max;\n        res.absMax = max;\n        res.absMin = min;\n        if (min == max) {\n            min -= 0.5;\n            max += 0.5;\n        }\n        if (min != 0)\n            min -= (max - min) * 0.025;\n        if (max != 0)\n            max += (max - min) * 0.025;\n        res.start = min;\n        res.stop = max;\n        res.dataMin = min;\n        res.dataMax = max;\n        let Delta = max - min;\n        if (isNaN(res.step)) {\n            let MagnitudePwr = Math.log10(Delta);\n            if ((MagnitudePwr - Math.floor(MagnitudePwr)) != 0)\n                MagnitudePwr = Math.floor(MagnitudePwr) + 1;\n            res.precision = (MagnitudePwr - 1) >> 0;\n            let Magnitude = Math.pow(10, res.precision);\n            let C = Delta / Magnitude;\n            if (C <= 2) {\n                res.step = (Magnitude / 5);\n                res.precision--;\n            }\n            else if (C <= 5) {\n                res.step = (Magnitude / 2);\n                res.precision--;\n            }\n            else {\n                res.step = (Magnitude);\n            }\n            if (isNaN(this.min)) {\n                let c = min / res.step;\n                if (c - Math.floor(c) != 0)\n                    c = (c > 0) ? Math.floor(c) + 1 : Math.floor(c) - 1;\n                res.start = res.step * c;\n                //     if ((M.Min < 0) && (M.Min - (int)M.Min != 0)) res.start -= res.step;\n            }\n        }\n        else {\n            let v = res.step.toString();\n            let p = v.indexOf('.');\n            if (p >= 0) {\n                res.precision = -(v.length - p - 1);\n            }\n            else {\n                res.precision = 0;\n            }\n        }\n        this.startStopStep = res;\n        return res;\n    }\n}\n(function (YAxis) {\n    // export enum HrzPosition { LEFT = 'Left', RIGHT = 'Right' }\n    //\n    class HrzPositionEnumItem extends YDataRendering.YEnumItem {\n        constructor(value, humanreadable, container) {\n            super(value, humanreadable, HrzPosition);\n        }\n    }\n    YAxis.HrzPositionEnumItem = HrzPositionEnumItem;\n    class HrzPosition extends YDataRendering.YEnum {\n    }\n    HrzPosition.LEFT = new HrzPositionEnumItem(\"LEFT\", \"Left\");\n    HrzPosition.RIGHT = new HrzPositionEnumItem(\"RIGHT\", \"Right\");\n    YAxis.HrzPosition = HrzPosition;\n})(YAxis || (YAxis = {}));\nexport class XAxis extends GenericAxis {\n    get position() { return this._position; }\n    set position(value) {\n        this._position = value;\n        this._parentRenderer.redraw();\n    }\n    get markers() { return this._markers; }\n    AddMarker() {\n        let m = new Marker(this._parentGraph, this);\n        this._markers.push(m);\n        this._parentGraph.clearCachedObjects();\n        this._parentGraph.redraw();\n        return m;\n    }\n    get initialZoom() { return this._initialZoom; }\n    set initialZoom(value) {\n        if (value <= 0)\n            throw new RangeError(\"Zoom must be a positive value\");\n        this._initialZoom = value;\n        this.min = this.min - (this._initialZoom * this._initialOffset / 100);\n        this.max = this.min + this.initialZoom;\n        this._parentRenderer.redraw();\n    }\n    get initialOffset() { return this._initialOffset; }\n    set initialOffset(value) {\n        this._initialOffset = value;\n        let p = this._parentGraph.getMostRecentPoint();\n        if (isNaN(p.x)) {\n            this._min = this._min - (this._initialZoom * this._initialOffset / 100);\n            this._max = this._min + this._initialZoom;\n            this._parentRenderer.redraw();\n        }\n        else {\n            let zoom = this._max - this._min;\n            this._min = p.x - (zoom * this._initialOffset / 100);\n            this._max = this._min + zoom;\n        }\n        this._parentRenderer.redraw();\n    }\n    get labelFormat() { return this._format; }\n    set labelFormat(value) {\n        this._format = value;\n        this._parentRenderer.redraw();\n    }\n    constructor(parent, directParent) {\n        super(parent, directParent);\n        this._position = XAxis.VrtPosition.BOTTOM;\n        this._markers = [];\n        this._initialZoom = 300;\n        this._initialOffset = 0;\n        this._format = XAxis.FORMATAUTO;\n        this._timeReference = TimeConverter.TimeReference.ABSOLUTE;\n        // in case of relative time reference : position of the Zero\n        this._zeroTime = 0;\n        //  Max timestamp- Min timestamp of all series values\n        this._fullSize = 0;\n        this.innerHeight = 0;\n        this._overflowHandling = XAxis.OverflowHandling.DONOTHING;\n        this._parentGraph = parent;\n        this._markers = [];\n        this.min = TimeConverter.ToUnixTime(TimeConverter.UTCNow());\n        this.max = this.min + this.initialZoom;\n        this.step = 30;\n    }\n    get timeReference() { return this._timeReference; }\n    set timeReference(value) {\n        this._timeReference = value;\n        this._parentRenderer.redraw();\n    }\n    get zeroTime() { return this._zeroTime; }\n    set zeroTime(value) { this._zeroTime = value; }\n    get fullSize() { return this._fullSize; }\n    set fullSize(value) { this._fullSize = value; }\n    bestFormat(dataTimedelta, viewportTimedelta) {\n        return TimeConverter.BestTimeformat(dataTimedelta, viewportTimedelta, this._timeReference);\n    }\n    get overflowHandling() { return this._overflowHandling; }\n    set overflowHandling(value) { this._overflowHandling = value; }\n}\nXAxis.FORMATAUTO = 0;\n(function (XAxis) {\n    // export enum VrtPosition {TOP =\"Top\", BOTTOM = 'Bottom' }\n    class VrtPositionEnumItem extends YDataRendering.YEnumItem {\n        constructor(value, humanreadable, container) {\n            super(value, humanreadable, VrtPosition);\n        }\n    }\n    XAxis.VrtPositionEnumItem = VrtPositionEnumItem;\n    class VrtPosition extends YDataRendering.YEnum {\n    }\n    VrtPosition.TOP = new VrtPositionEnumItem(\"TOP\", \"Top\");\n    VrtPosition.BOTTOM = new VrtPositionEnumItem(\"BOTTOM\", \"Bottom\");\n    XAxis.VrtPosition = VrtPosition;\n    class OverflowHandlingEnumItem extends YDataRendering.YEnumItem {\n        constructor(value, humanreadable, container) {\n            super(value, humanreadable, OverflowHandling);\n        }\n    }\n    XAxis.OverflowHandlingEnumItem = OverflowHandlingEnumItem;\n    class OverflowHandling extends YDataRendering.YEnum {\n    }\n    OverflowHandling.DONOTHING = new OverflowHandlingEnumItem(\"DONOTHING\", \"Do nothing\");\n    OverflowHandling.SCROLL = new OverflowHandlingEnumItem(\"SCROLL\", \"Scroll contents\");\n    OverflowHandling.CONTRACT = new OverflowHandlingEnumItem(\"CONTRACT\", \"Squeeze contents\");\n    XAxis.OverflowHandling = OverflowHandling;\n})(XAxis || (XAxis = {}));\nexport class DataPanel extends YDataRendering.GenericPanel {\n    constructor(parent, directParent) {\n        super(parent, directParent);\n        this._panelHrzAlign = DataPanel.HorizontalAlign.CENTERED;\n        this._panelVrtAlign = DataPanel.VerticalAlign.CENTERED;\n        this._horizontalPosition = DataPanel.HorizontalPosition.ABSOLUTEX;\n        this._verticalPosition = DataPanel.VerticalPosition.ABSOLUTEY;\n        this._AbsoluteXposition = 0;\n        this._AbsoluteYposition = 0;\n        this._YScaleIndex = 0;\n    }\n    get panelHrzAlign() { return this._panelHrzAlign; }\n    set panelHrzAlign(value) {\n        this._panelHrzAlign = value;\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get panelVrtAlign() { return this._panelVrtAlign; }\n    set panelVrtAlign(value) {\n        this._panelVrtAlign = value;\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get horizontalPosition() { return this._horizontalPosition; }\n    set horizontalPosition(value) {\n        this._horizontalPosition = value;\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get verticalPosition() { return this._verticalPosition; }\n    set verticalPosition(value) {\n        this._verticalPosition = value;\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get AbsoluteXposition() { return this._AbsoluteXposition; }\n    set AbsoluteXposition(value) {\n        this._AbsoluteXposition = value;\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get AbsoluteYposition() { return this._AbsoluteYposition; }\n    set AbsoluteYposition(value) {\n        this._AbsoluteYposition = value;\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n    get yScaleIndex() { return this._YScaleIndex; }\n    set yScaleIndex(value) {\n        this._YScaleIndex = value;\n        if (this._enabled)\n            this._parentRenderer.redraw();\n    }\n}\n(function (DataPanel) {\n    class HorizontalAlignEnumItem extends YDataRendering.YEnumItem {\n        constructor(value, humanreadable, container) {\n            super(value, humanreadable, HorizontalAlign);\n        }\n    }\n    DataPanel.HorizontalAlignEnumItem = HorizontalAlignEnumItem;\n    class HorizontalAlign extends YDataRendering.YEnum {\n    }\n    HorizontalAlign.LEFTOF = new HorizontalAlignEnumItem(\"LEFTOF\", \"Left\");\n    HorizontalAlign.CENTERED = new HorizontalAlignEnumItem(\"CENTERED\", \"Center\");\n    HorizontalAlign.RIGHTOF = new HorizontalAlignEnumItem(\"RIGHTOF\", \"Right\");\n    DataPanel.HorizontalAlign = HorizontalAlign;\n    class VerticalAlignEnumItem extends YDataRendering.YEnumItem {\n        constructor(value, humanreadable, container) {\n            super(value, humanreadable, VerticalAlign);\n        }\n    }\n    DataPanel.VerticalAlignEnumItem = VerticalAlignEnumItem;\n    // export  enum VerticalAlign  {ABOVE=\"Top\",CENTERED=\"Center\", BELOW=\"Bottom\"}\n    class VerticalAlign extends YDataRendering.YEnum {\n    }\n    VerticalAlign.ABOVE = new VerticalAlignEnumItem(\"ABOVE\", \"Top\");\n    VerticalAlign.CENTERED = new VerticalAlignEnumItem(\"CENTERED\", \"Center\");\n    VerticalAlign.BELOW = new VerticalAlignEnumItem(\"BELOW\", \"Bottom\");\n    DataPanel.VerticalAlign = VerticalAlign;\n    class HorizontalPositionEnumItem extends YDataRendering.YEnumItem {\n        constructor(value, humanreadable, container) {\n            super(value, humanreadable, HorizontalPosition);\n        }\n    }\n    DataPanel.HorizontalPositionEnumItem = HorizontalPositionEnumItem;\n    class HorizontalPosition extends YDataRendering.YEnum {\n    }\n    HorizontalPosition.LEFTBORDER = new HorizontalPositionEnumItem(\"LEFTBORDER\", \"Left border\");\n    HorizontalPosition.ABSOLUTEX = new HorizontalPositionEnumItem(\"ABSOLUTEX\", \"Absolute X position\");\n    HorizontalPosition.RIGHTBORDER = new HorizontalPositionEnumItem(\"RIGHTBORDER\", \"Right borde\");\n    DataPanel.HorizontalPosition = HorizontalPosition;\n    class VerticalPositionEnumItem extends YDataRendering.YEnumItem {\n        constructor(value, humanreadable, container) {\n            super(value, humanreadable, VerticalPosition);\n        }\n    }\n    DataPanel.VerticalPositionEnumItem = VerticalPositionEnumItem;\n    class VerticalPosition extends YDataRendering.YEnum {\n    }\n    VerticalPosition.TOPBORDER = new VerticalPositionEnumItem(\"TOPBORDER\", \"Top border\");\n    VerticalPosition.ABSOLUTEY = new VerticalPositionEnumItem(\"ABSOLUTEY\", \"Absolute Y position\");\n    VerticalPosition.BOTTOMBORDER = new VerticalPositionEnumItem(\"BOTTOMBORDER\", \"Bottom border\");\n    DataPanel.VerticalPosition = VerticalPosition;\n})(DataPanel || (DataPanel = {}));\nclass YCursor {\n    constructor(pngImageData) { }\n    get handle() { return \"crosshair\"; }\n}\nclass YTimeSpan {\n    constructor(value) {\n        this._value = 0;\n        this._value = value;\n    }\n    toString(format) {\n        let res = \"\";\n        let v = Math.abs(this._value / 1000);\n        let dec = Math.floor(v);\n        let frac = Math.round(1000 * (v - Math.floor(v)));\n        if (format & YDate.ms1) {\n            let ms = \"00\" + frac.toString();\n            res = \".\" + ms.substring(ms.length - 3).substring(0, 1);\n        }\n        else if (format & YDate.ms01) {\n            let ms = \"00\" + frac.toString();\n            res = \".\" + ms.substring(ms.length - 3).substring(0, 2);\n        }\n        else if (format & YDate.ms001) {\n            let ms = \"00\" + frac.toString();\n            res = \".\" + ms.substring(ms.length - 3).substring(0, 3);\n        }\n        if (format & YDate.s) {\n            let sec = dec % 60;\n            let s = \"0\" + sec.toString();\n            res = s.substring(s.length - 2) + res + \"s\";\n        }\n        dec = Math.floor(dec / 60);\n        if (format & YDate.m) {\n            let min = dec % 60;\n            let s = \"0\" + min.toString();\n            res = s.substring(s.length - 2) + \"m\" + res;\n        }\n        dec = Math.floor(dec / 60);\n        if (format & YDate.h) {\n            let hrs = dec % 24;\n            let s = \"0\" + hrs.toString();\n            res = s.substring(s.length - 2) + \"h\" + res;\n        }\n        dec = Math.floor(dec / 24);\n        if (format & YDate.D) {\n            let s = dec.toString();\n            res = s.substring(s.length - 2) + \"d\" + res;\n        }\n        return res;\n    }\n}\nYTimeSpan.TicksPerSecond = 1000;\nexport class YGraph extends YDataRendering.YDataRenderer {\n    get legendPanel() { return this._legendPanel; }\n    get dataTracker() { return this._dataTracker; }\n    get borderColor() { return this._borderColor; }\n    set borderColor(value) {\n        this._borderColor = value;\n        this._borderPen = null;\n        this.redraw();\n    }\n    get borderThickness() { return this._borderThickness; }\n    set borderThickness(value) {\n        if (value < 0)\n            throw new RangeError(\"thickness must be a positive value\");\n        this._borderThickness = value;\n        this._borderPen = null;\n        this.redraw();\n    }\n    static get verticalDragZoomEnabled() { return YGraph._defaultVerticalDragZoomEnabled; }\n    static set verticalDragZoomEnabled(value) { YGraph._defaultVerticalDragZoomEnabled = value; }\n    static createCaptureCursor() {\n        if (YGraph.captureCursor != null)\n            return;\n        // mouse cursor graphics stored  in a base64 encoded PNG\n        // this is just a way to keep the source code monolithic\n        // no separate ressources file\n        let base64png = \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAALHRFWHRDcmVhdGlvbi\"\n            + \"BUaW1lAFRodSAyMCBBdWcgMjAyMCAxMjoxNTo1MCArMDEwMP38NhoAAAAHdElNRQfk\"\n            + \"CBQOJAvCrm0ZAAAACXBIWXMAAFxGAABcRgEUlENBAAAABGdBTUEAALGPC / xhBQAA\"\n            + \"AmVJREFUeNrtVrFuFDEQHd9eBImAIBFoAgVC0NJQUFDwL / QgRXzAfUz + Iy0pQw\"\n            + \"sIJAhCQMQBUS5c2DXv7T5fzN5qs / Fxdw0jPY3ttT3jt54ZmyXIYDDoQXnodWBV /\"\n            + \" SRJXZhJbwCXov65pZ + 4zklfBsZRf2EMxOuTjc / igIu0s0UygAvnonWZ0NP4fB\"\n            + \"2QkQz6yHvP / i76V4E1jZ / bic4LIuMnND7ZwDl + u4 / me + AnkKPvu + 7r\"\n            + \"FMNZBzZ64eRTm5w6sQ8cAcUZexVytOCpOnv7j + QdDD + CHgKjMg80nWpeQrYgd4\"\n            + \"A3wHjWPJAqN4BVoLcsB1ZMd25ZDkzkvwNLd6AMQ4XGIuXElKz6SAo3rYpLhsZKyyJm\"\n            + \"wu2WTLiF5g / g2NozIY1 / BkacRwaYkZgUPlr7L2EdeAhjLxpqwTOr0vAHOZG37F\"\n            + \"PIOO3mfXXG1qEWAGvM + TC6Rydk / KmMv7bmWlD / v95qtaCThGpo1TPsFvp7wB\"\n            + \"O0v4nBqWoYvR0yOeLFThHmdH4TcgGQy8i + hkn5V / WbSjGr7e9oD96372LJB1o7\"\n            + \"izbPtYHpPw7V / 8u4yvzFkvPTO3MXuMbx8JRPij8svgAcAw / EwCe0f8XGxZYFB6\"\n            + \"JQZzl + rHWj1Gf5WZLVTj5py5HbVoXjeF4OuMhYnQHKulW / x6U64CPtbfpVxQu7\"\n            + \"CX0PeicMov3cKup5EZmw / KwMFNb8pMtl5G3MhIyHkOX3PPUSMmXzOX7Fqsw35Gu5\"\n            + \"NidEwXWr / jnnD + XUFzLARJRaDXnCQ53o0BpSLzcXzQfAK + Cl9EEwXrKTyr1O\"\n            + \"WGa3sFnLvPDsn6Tg8P0PrBcSMR2NtfsAAAAASUVORK5CYII =\";\n        try {\n            YGraph.captureCursor = new YCursor(atob(base64png));\n        }\n        catch (Exception) {\n            console.log(\"Cannot create custom cursor\");\n        }\n    }\n    get dataPanels() { return this._dataPanels; }\n    addDataPanel() {\n        let p = new DataPanel(this, this);\n        this._dataPanels.push(p);\n        return p;\n    }\n    setMarkerCaptureCallbacks(start, stop) {\n        this._markerCaptureStartedCallback = start;\n        this._markerCaptureStoppedCallback = stop;\n    }\n    startMarkerCapture(m) {\n        if (this._markerCaptureStartedCallback != null)\n            this._markerCaptureStartedCallback(m);\n        this.markerCapture = m;\n        this.UIContainer.focus();\n    }\n    constructor(ChartContainer, logFunction) {\n        super(ChartContainer, logFunction);\n        this._markerCaptureStartedCallback = null;\n        this._markerCaptureStoppedCallback = null;\n        this.lastPointCount = -1;\n        this.lastTopMargin = -1;\n        this.lastBottomMargin = -1;\n        this.navigatorCache = null;\n        this.markerCapture = null;\n        this._borderPen = null;\n        this._borderColor = YDataRendering.YColor.LightGray;\n        this._borderThickness = 1.0;\n        this._touchStartfct = null;\n        this._touchMovefct = null;\n        this._touchEndfct = null;\n        this._mouseDownfct = null;\n        this._mouseMovefct = null;\n        this._mouseWheelfct = null;\n        this._mouseKeyDownfct = null;\n        this.mainViewPort = new YDataRendering.ViewPortSettings();\n        this._timeRange = null;\n        this._bgBrush = null;\n        this._bgColor1 = YDataRendering.YColor.FromArgb(255, 200, 200, 200);\n        this._bgColor2 = YDataRendering.YColor.FromArgb(255, 255, 255, 255);\n        this._touchStartPinchDistance = -1;\n        this._touchStartPinchCenter = new YDataRendering.Point(0, 0);\n        this._touchStartPinchZoom = 1;\n        this._touchStartPinchIRLx = 0;\n        this._touchStartPinchRange = 0;\n        this.dataTrackerRefreshtimeout = null;\n        YGraph.createCaptureCursor();\n        this._xAxis = new XAxis(this, this);\n        this._yAxes = [];\n        this._series = [];\n        this._dataPanels = [];\n        this._navigator = new Navigator(this, this);\n        this._legendPanel = new LegendPanel(this, this);\n        this._dataTracker = new DataTracker(this, this);\n        this._touchStartfct = (e) => { this.TouchStart(this.UIContainer, e); };\n        this._touchMovefct = (e) => { this.TouchMove(this.UIContainer, e); };\n        this._touchEndfct = (e) => { this.TouchEnd(this.UIContainer, e); };\n        this._mouseDownfct = (e) => { this.MouseDown(this.UIContainer, e); };\n        this._mouseMovefct = (e) => { this.MouseMove(this.UIContainer, e); };\n        this._mouseWheelfct = (e) => { this.mouseWheelEvent(this.UIContainer, e); };\n        this._mouseKeyDownfct = (e) => { this.KeyDown(this.UIContainer, e); };\n        this.UIContainer.addEventListener(\"touchstart\", this._touchStartfct);\n        this.UIContainer.addEventListener(\"touchmove\", this._touchMovefct);\n        this.UIContainer.addEventListener(\"touchend\", this._touchEndfct);\n        this.UIContainer.addEventListener(\"mousedown\", this._mouseDownfct);\n        this.UIContainer.addEventListener(\"mousemove\", this._mouseMovefct);\n        this.UIContainer.addEventListener(\"wheel\", this._mouseWheelfct);\n        this.UIContainer.addEventListener(\"keydown\", this._mouseKeyDownfct);\n        this._timeRange = MinMaxHandler.DefaultValue();\n        let originalContainerWidth = ChartContainer.width;\n        let originalContainerHeight = ChartContainer.height;\n        let originalFormWidth = ChartContainer.width;\n        let originalFormHeight = ChartContainer.height;\n    }\n    destroy() {\n        if (this._touchStartfct != null)\n            this.UIContainer.removeEventListener(\"touchstart\", this._touchStartfct);\n        if (this._touchMovefct != null)\n            this.UIContainer.removeEventListener(\"touchstart\", this._touchMovefct);\n        if (this._touchEndfct != null)\n            this.UIContainer.removeEventListener(\"touchstart\", this._touchEndfct);\n        if (this._mouseDownfct != null)\n            this.UIContainer.removeEventListener(\"mousedown\", this._mouseDownfct);\n        if (this._mouseMovefct != null)\n            this.UIContainer.removeEventListener(\"mousemove\", this._mouseMovefct);\n        if (this._mouseWheelfct != null)\n            this.UIContainer.removeEventListener(\"wheel\", this._mouseWheelfct);\n        if (this._mouseKeyDownfct != null)\n            this.UIContainer.removeEventListener(\"keydown\", this._mouseKeyDownfct);\n        super.destroy();\n        Object.entries(this).forEach((pair) => { Reflect.set(this, pair[0], null); }); // sets all internal variables to NULL\n    }\n    getMostRecentPoint() {\n        let res = new pointXY(NaN, NaN);\n        for (let i = 0; i < this._series.length; i++)\n            if (!this.series[i].disabled) {\n                let p = this.series[i].getlastPoint();\n                if (!isNaN(p.x)) {\n                    if (isNaN(res.x))\n                        res = p;\n                    else if (p.x > res.x)\n                        res = p;\n                }\n            }\n        return res;\n    }\n    adjustGlobalTimeRange(x) {\n        let max = this._timeRange.Max;\n        this._timeRange = MinMaxHandler.CombineWithNumber(this._timeRange, x);\n        if (isNaN(max))\n            return;\n        let ofset = x - max;\n        if (ofset > 0) {\n            switch (this._xAxis.overflowHandling) {\n                case XAxis.OverflowHandling.SCROLL:\n                    if (max > this._xAxis.min + ((this._xAxis.max - this._xAxis.min) * 0.85) && (max <= this._xAxis.max)) {\n                        this.DisableRedraw();\n                        this._xAxis.set_minMax(this._xAxis.min + ofset, this._xAxis.max + ofset);\n                        this.AllowRedraw();\n                    }\n                    break;\n                case XAxis.OverflowHandling.CONTRACT:\n                    if (max > this._xAxis.min + ((this._xAxis.max - this._xAxis.min) * 0.95) && (max <= this._xAxis.max)) {\n                        this.DisableRedraw();\n                        this._xAxis.max += ofset;\n                        this.AllowRedraw();\n                    }\n                    break;\n            }\n        }\n    }\n    get bgColor1() { return this._bgColor1; }\n    set bgColor1(value) {\n        this._bgColor1 = value;\n        this._bgBrush = null;\n        this.redraw();\n    }\n    get bgColor2() { return this._bgColor2; }\n    set bgColor2(value) {\n        this._bgColor2 = value;\n        this._bgBrush = null;\n        this.redraw();\n    }\n    get xAxis() { return this._xAxis; }\n    get navigator() { return this._navigator; }\n    get yAxes() { return this._yAxes; }\n    get series() { return this._series; }\n    addYAxis() {\n        let s = new YAxis(this, this, this._yAxes.length);\n        this._yAxes.push(s);\n        this.redraw();\n        return s;\n    }\n    addSerie() {\n        let s = new DataSerie(this);\n        this._series.push(s);\n        this.redraw();\n        return s;\n    }\n    clearCachedObjects() {\n        this._bgBrush = null;\n        this.navigatorCache = null;\n    }\n    TouchStart(sender, e) {\n        if (e.touches.length == 1) {\n            this.HandleMouseDown(sender, e.touches[0].pageX, e.touches[0].pageY);\n        }\n        else if (e.touches.length == 2) {\n            e.preventDefault();\n            this.HandleEndOfMouseCapture();\n            this._touchStartPinchDistance = Math.sqrt(Math.pow(e.touches[1].pageX - e.touches[0].pageX, 2) + Math.pow(e.touches[1].pageY - e.touches[0].pageY, 2));\n            this._touchStartPinchCenter = new YDataRendering.Point((e.touches[1].pageX + e.touches[0].pageX) >> 2, (e.touches[1].pageY + e.touches[0].pageY) >> 2);\n            this._touchStartPinchZoom = this.mainViewPort.zoomx;\n            this._touchStartPinchIRLx = this.mainViewPort.IRLx;\n            this._touchStartPinchRange = this._xAxis.max - this._xAxis.min;\n        }\n    }\n    MouseDown(sender, e) {\n        if ((e.buttons == 2) && (this.markerCapture != null)) {\n            this.markerCapture = null;\n            if (this._markerCaptureStoppedCallback != null)\n                this._markerCaptureStoppedCallback(null);\n        }\n        if (e.buttons != 1)\n            return;\n        this.HandleMouseDown(sender, e.pageX, e.pageY);\n    }\n    HandleMouseDown(sender, pageX, pageY) {\n        let p = this.Scr2ElmMatrix.multiplyByV(YDataRendering.Vector3.FromXYCoord(pageX, pageY)).toPoint();\n        let eX = p.X;\n        let eY = p.Y;\n        if ((eX >= this.mainViewPort.Lmargin)\n            && (eX <= this.mainViewPort.Width - this.mainViewPort.Rmargin)\n            && (eY >= this.mainViewPort.Tmargin)\n            && (eY <= this.mainViewPort.Height - this.mainViewPort.Bmargin)) {\n            if (this.markerCapture != null) {\n                let p2 = YGraph.ViewPortPointToIRL(this.mainViewPort, new YDataRendering.Point(eX, eY));\n                this.markerCapture.setCapturedPosition(p2.x, this.xAxis);\n                if (this._markerCaptureStoppedCallback != null)\n                    this._markerCaptureStoppedCallback(this.markerCapture);\n                this.markerCapture = null;\n                return;\n            }\n            let p = YGraph.ViewPortPointToIRL(this.mainViewPort, new YDataRendering.Point(eX, eY));\n            this.mainViewPort.OriginalXAxisMin = this.xAxis.min;\n            this.mainViewPort.OriginalXAxisMax = this.xAxis.max;\n            this.mainViewPort.OriginalIRLx = this.mainViewPort.IRLx;\n            this.mainViewPort.OriginalLmargin = this.mainViewPort.Lmargin;\n            this.mainViewPort.OriginalZoomx = this.mainViewPort.zoomx;\n            this.mainViewPort.CaptureStartY = eY;\n            this.mainViewPort.IRLCaptureStartX = p.x;\n            this.mainViewPort.Capture = true;\n        }\n        else if ((eX >= this._navigator.viewport.Lmargin)\n            && (eX <= this._navigator.viewport.Width - this._navigator.viewport.Rmargin)\n            && (eY >= this._navigator.viewport.Lmargin)\n            && (eY <= this._navigator.viewport.Height - this._navigator.viewport.Bmargin)) {\n            let p = YGraph.ViewPortPointToIRL(this._navigator.viewport, new YDataRendering.Point(eX, eY));\n            let p2 = YGraph.ViewPortPointToIRL(this.mainViewPort, new YDataRendering.Point(this.mainViewPort.Lmargin, 0));\n            let p3 = YGraph.ViewPortPointToIRL(this.mainViewPort, new YDataRendering.Point(this.mainViewPort.Width - this.mainViewPort.Rmargin, 0));\n            if ((p.x >= p2.x) && (p.x <= p3.x)) {\n                this._navigator.startCapture(p, this._xAxis.min, this._xAxis.max);\n                //  log(\"monitor start monitor capture  at \" + _navigator.viewport.IRLCaptureStartX.ToString());\n            }\n            else {\n                this.DisableRedraw();\n                let min = p.x - (p3.x - p2.x) / 2;\n                let max = min + (p3.x - p2.x);\n                this._xAxis.set_minMax(min, max);\n                this.AllowRedraw();\n                //  log(\"Jump to \" + mainViewPort.IRLx.ToString());\n                this.Draw(0);\n            }\n        }\n    }\n    TouchMove(sender, e) {\n        if (e.touches.length == 1) {\n            e.preventDefault();\n            this.HandleMouseMove(sender, e.touches[0].pageX, e.touches[0].pageY);\n        }\n        else if (e.touches.length == 2) {\n            e.preventDefault();\n            let newdistance = Math.sqrt(Math.pow(e.touches[1].pageX - e.touches[0].pageX, 2) + Math.pow(e.touches[1].pageY - e.touches[0].pageY, 2));\n            let ZoomFactor = newdistance / this._touchStartPinchDistance;\n            let NextZoomX = this._touchStartPinchZoom * ZoomFactor;\n            if ((NextZoomX > this.mainViewPort.zoomx) && (NextZoomX > 1000))\n                return;\n            let currentRange = this._xAxis.max - this._xAxis.min;\n            this.mainViewPort.IRLx = this._touchStartPinchIRLx + ((this._touchStartPinchCenter.X - this.mainViewPort.Lmargin) / this._touchStartPinchZoom) - ((this._touchStartPinchCenter.X - this.mainViewPort.Lmargin) / NextZoomX);\n            this._xAxis.set_minMax(this.mainViewPort.IRLx, this.mainViewPort.IRLx + this._touchStartPinchRange / ZoomFactor);\n            this.mainViewPort.zoomx = NextZoomX;\n            this.redraw();\n        }\n    }\n    TouchEnd(sender, e) {\n        this.HandleEndOfMouseCapture();\n    }\n    MouseMove(sender, e) {\n        if ((e.buttons != 1) && (this.mainViewPort.Capture || this._navigator.Capture))\n            this.HandleEndOfMouseCapture();\n        this.HandleMouseMove(sender, e.pageX, e.pageY);\n        if (this.dataTracker.enabled) {\n            if (this.dataTrackerRefreshtimeout != null)\n                clearTimeout(this.dataTrackerRefreshtimeout);\n            this.dataTrackerRefreshtimeout = setTimeout(() => { this.redraw(); }, 100);\n        }\n    }\n    HandleEndOfMouseCapture() {\n        this.mainViewPort.Capture = false;\n        this._navigator.stopCapture();\n        if (this._dataTracker.enabled)\n            this.redraw();\n    }\n    HandleMouseMove(sender, pageX, pageY) {\n        let p = this.Scr2ElmMatrix.multiplyByV(YDataRendering.Vector3.FromXYCoord(pageX, pageY)).toPoint();\n        let eX = p.X;\n        let eY = p.Y;\n        if (this.markerCapture != null) {\n            if ((eX > this.mainViewPort.Lmargin) && (eX < this.mainViewPort.Width - this.mainViewPort.Rmargin)\n                && (eY > this.mainViewPort.Tmargin) && (eY < this.mainViewPort.Height - this.mainViewPort.Bmargin)) {\n                if ((this.UIContainer.style.cursor != YGraph.captureCursor.handle) && (this.UIContainer.style.cursor != \"crosshair\")) {\n                    this.UIContainer.style.cursor = YGraph.captureCursor != null ? YGraph.captureCursor.handle : \"crosshair\";\n                }\n            }\n            else if (this.UIContainer.style.cursor != \"default\")\n                this.UIContainer.style.cursor = \"default\";\n        }\n        else if (this.UIContainer.style.cursor != \"default\")\n            this.UIContainer.style.cursor = \"default\";\n        if (this.mainViewPort.Capture) {\n            let x1 = this.mainViewPort.OriginalIRLx + (eX - this.mainViewPort.OriginalLmargin) / this.mainViewPort.OriginalZoomx;\n            let deltaX = (x1 - this.mainViewPort.IRLCaptureStartX);\n            let deltaY = (eY - this.mainViewPort.CaptureStartY);\n            this.DisableRedraw();\n            let halfAxisDelta = (this.mainViewPort.OriginalXAxisMax - this.mainViewPort.OriginalXAxisMin) / 2;\n            let Axismiddle = (this.mainViewPort.OriginalXAxisMax + this.mainViewPort.OriginalXAxisMin) / 2;\n            let deltaCoef = (YGraph._defaultVerticalDragZoomEnabled && (Math.abs(deltaY) > 10)) ? Math.pow(1.01, deltaY) : 1;\n            this._xAxis.set_minMax(Axismiddle - halfAxisDelta * deltaCoef - deltaX, Axismiddle + halfAxisDelta * deltaCoef - deltaX);\n            this.AllowRedraw();\n            this.redraw();\n            return;\n        }\n        if (this._navigator.viewport.Capture) {\n            let x1 = this._navigator.viewport.OriginalIRLx + (eX - this._navigator.viewport.OriginalLmargin) / this._navigator.viewport.OriginalZoomx;\n            let delta = (x1 - this._navigator.viewport.IRLCaptureStartX);\n            this.DisableRedraw();\n            this._xAxis.set_minMax(this._navigator.viewport.OriginalXAxisMin + delta, this._navigator.viewport.OriginalXAxisMax + delta);\n            this.AllowRedraw();\n            this.redraw();\n            return;\n        }\n    }\n    cross(p) { }\n    static IRLPointToViewPort(viewport, p, IRLy, zoomy) {\n        if (IRLy === undefined) {\n            let xx = viewport.Lmargin + Math.round((p.x - viewport.IRLx) * viewport.zoomx);\n            let yy = viewport.Height - viewport.Bmargin - Math.round((p.y - viewport.IRLy) * viewport.zoomy);\n            return new YDataRendering.Point(xx >> 0, yy >> 0);\n        }\n        let xx = viewport.Lmargin + Math.round((p.x - viewport.IRLx) * viewport.zoomx);\n        let yy = viewport.Height - viewport.Bmargin - Math.round((p.y - IRLy) * zoomy);\n        return new YDataRendering.Point(xx >> 0, yy >> 0);\n    }\n    static ViewPortPointToIRL(viewport, p, IRLy, zoomy) {\n        if (IRLy === undefined) {\n            return new pointXY(viewport.IRLx + (p.X - viewport.Lmargin) / viewport.zoomx, viewport.IRLy + (+viewport.Height - p.Y - viewport.Bmargin) / viewport.zoomy);\n        }\n        return new pointXY(viewport.IRLx + (p.X - viewport.Lmargin) / viewport.zoomx, IRLy + (+viewport.Height - p.Y - viewport.Bmargin) / zoomy);\n    }\n    static FindMinMax(start, end, data, count) {\n        let res = MinMaxHandler.DefaultValue();\n        // Do we need to consider that segment?\n        if (!(data[0].x < end) && (data[count - 1].x > start))\n            return res; // completely out of view port full zone, abort.\n        let N1 = 0;\n        let N2 = 0;\n        // find out the first visible point ;\n        let First = 0;\n        if (data[0].x < start) {\n            N1 = 0;\n            N2 = count - 1;\n            while (N2 - N1 > 1) {\n                let N = (N1 + N2) >> 1;\n                if (data[N].x > start)\n                    N2 = N;\n                else\n                    N1 = N;\n            }\n            First = N1 - 1;\n            if (First < 0)\n                First = 0;\n        }\n        // data clipping: find out the last visible point;\n        let Last = count - 1;\n        if (data[Last] === undefined) {\n            debugger;\n        }\n        if (data[Last].x > end) {\n            N1 = 0;\n            N2 = count - 1;\n            while (N2 - N1 > 1) {\n                let N = (N1 + N2) >> 1;\n                if (data[N].x < end)\n                    N1 = N;\n                else\n                    N2 = N;\n            }\n            Last = N2 + 1;\n            if (Last > count - 1)\n                Last = count - 1;\n        }\n        res.Min = data[First].y;\n        res.Max = data[First].y;\n        for (let i = First + 1; i <= Last; i++) {\n            if (data[i].y < res.Min)\n                res.Min = data[i].y;\n            if (data[i].y > res.Max)\n                res.Max = data[i].y;\n        }\n        return res;\n    }\n    resetlegendPens() {\n        for (let i = 0; i < this._series.length; i++) {\n            this._series[i].resetlegendPen();\n        }\n    }\n    drawLegendPanel(g, viewPortWidth, viewPortHeight, mainViewPort) {\n        let verticalRatio = 1.25;\n        if (!this._legendPanel.enabled)\n            return;\n        let legendWidths = new Array(this._series.length);\n        let legendHeight = new Array(this._series.length);\n        let ofsetx = new Array(this._series.length);\n        let ofsety = new Array(this._series.length);\n        let legends = new Array(this._series.length);\n        let totalHeight = 0;\n        let totalWidth = 0;\n        let maxWidth = 0;\n        let maxHeight = 0;\n        g.TextRenderingHint = YDataRendering.YTextRenderingHint.SingleBitPerPixelGridFit;\n        g.SetClip(new YDataRendering.YRectangle(0, 0, viewPortWidth, viewPortHeight));\n        for (let i = 0; i < this._series.length; i++) {\n            if (this._series[i].legend != \"\")\n                legends[i] = this._series[i].legend;\n            else\n                legends[i] = \"Series \" + (i + 1).toString();\n        }\n        if ((this._legendPanel.position == LegendPanel.Position.TOP) || (this._legendPanel.position == LegendPanel.Position.BOTTOM)) {\n            let availableWidth = viewPortWidth - 2 * this._legendPanel.padding + this._legendPanel.borderthickness;\n            if (this._legendPanel.overlap)\n                availableWidth = availableWidth - mainViewPort.Lmargin - mainViewPort.Rmargin;\n            totalHeight = 0; // 2 * _legendPanel.padding + legendPanel.borderthickness;\n            let xx = 0;\n            let yy = 0;\n            for (let i = 0; i < this._series.length; i++) {\n                if ((this._series[i].segments.length > 0) && (this._series[i].visible) && (!this._series[i].disabled)) {\n                    let ssize = g.MeasureString(legends[i], this._legendPanel.font, 100000);\n                    legendHeight[i] = (ssize.height) + 1;\n                    let ww = (ssize.width + 20);\n                    if (xx == 0)\n                        totalHeight += ssize.height;\n                    if (availableWidth - xx < ww) {\n                        if (xx == 0) {\n                            ofsetx[i] = xx;\n                            ofsety[i] = yy;\n                            yy += ssize.height;\n                            if (maxWidth < ww)\n                                maxWidth = ww;\n                        }\n                        else {\n                            yy += ssize.height;\n                            ofsetx[i] = 0.0;\n                            ofsety[i] = yy;\n                            xx = ww;\n                            totalHeight += ssize.height;\n                            if (maxWidth < xx)\n                                maxWidth = xx;\n                        }\n                    }\n                    else {\n                        ofsetx[i] = xx;\n                        ofsety[i] = yy;\n                        xx += ww;\n                        if (maxWidth < xx)\n                            maxWidth = xx;\n                    }\n                }\n            }\n            if (totalWidth > availableWidth) { // noinspection JSUnusedAssignment\n                totalWidth = availableWidth;\n            }\n        }\n        else {\n            let ty = 0;\n            for (let i = 0; i < this._series.length; i++) {\n                if ((this._series[i].segments.length > 0) && (this._series[i].visible) && (!this._series[i].disabled)) {\n                    let ssize = g.MeasureString(legends[i], this._legendPanel.font, 100000);\n                    legendWidths[i] = (ssize.width) + 1;\n                    if (maxWidth < legendWidths[i] + 20)\n                        maxWidth = legendWidths[i] + 20;\n                    legendHeight[i] = (ssize.height) + 1;\n                    if (maxHeight < legendHeight[i])\n                        maxHeight = legendHeight[i];\n                    ofsetx[i] = 0;\n                    ofsety[i] = ty;\n                    ty += ssize.height * verticalRatio;\n                    totalHeight += i == 0 ? ssize.height : ssize.height * verticalRatio;\n                }\n            }\n        }\n        let w = maxWidth + 2 * this._legendPanel.padding + this._legendPanel.borderthickness;\n        let h = totalHeight + 2 * this._legendPanel.padding + this._legendPanel.borderthickness;\n        let x = 0;\n        let y = 0;\n        switch (this._legendPanel.position) {\n            case LegendPanel.Position.LEFT:\n                x = this._legendPanel.horizontalMargin;\n                if (!this._legendPanel.overlap) {\n                    mainViewPort.Lmargin += (w + 2 * this.legendPanel.horizontalMargin + this.legendPanel.borderthickness) >> 0;\n                    y = (viewPortHeight - h) / 2;\n                }\n                else {\n                    x += mainViewPort.Lmargin;\n                    y = mainViewPort.Tmargin + (viewPortHeight - mainViewPort.Tmargin - mainViewPort.Bmargin - h) / 2;\n                }\n                break;\n            case LegendPanel.Position.TOPLEFT:\n                x = this._legendPanel.horizontalMargin;\n                y = this._legendPanel.verticalMargin;\n                if (!this._legendPanel.overlap) {\n                    mainViewPort.Lmargin += (w + 2 * this.legendPanel.horizontalMargin + this.legendPanel.borderthickness) >> 0;\n                }\n                else {\n                    x += mainViewPort.Lmargin;\n                    y += mainViewPort.Tmargin;\n                }\n                break;\n            case LegendPanel.Position.TOP:\n                if (!this._legendPanel.overlap) {\n                    x = (viewPortWidth - w) / 2 - this._legendPanel.horizontalMargin - this._legendPanel.borderthickness;\n                    y = this._legendPanel.verticalMargin + this._legendPanel.borderthickness;\n                    mainViewPort.Tmargin += (totalHeight + this._legendPanel.verticalMargin + 2 * this._legendPanel.verticalMargin + this._legendPanel.borderthickness) >> 0;\n                }\n                else {\n                    x = mainViewPort.Lmargin + (viewPortWidth - mainViewPort.Lmargin - mainViewPort.Rmargin - w) / 2 - this._legendPanel.horizontalMargin - this._legendPanel.borderthickness;\n                    y = mainViewPort.Tmargin + this._legendPanel.verticalMargin - this._legendPanel.borderthickness;\n                }\n                break;\n            case LegendPanel.Position.TOPRIGHT:\n                x = viewPortWidth - this._legendPanel.horizontalMargin - w;\n                y = this._legendPanel.verticalMargin;\n                if (!this._legendPanel.overlap) {\n                    mainViewPort.Rmargin += (w + 2 * this._legendPanel.horizontalMargin + this._legendPanel.borderthickness) >> 0;\n                }\n                else {\n                    x -= mainViewPort.Rmargin;\n                    y += mainViewPort.Tmargin;\n                }\n                break;\n            case LegendPanel.Position.RIGHT:\n                x = viewPortWidth - this._legendPanel.horizontalMargin - w;\n                if (!this._legendPanel.overlap) {\n                    mainViewPort.Rmargin += (w + 2 * this._legendPanel.horizontalMargin + this._legendPanel.borderthickness) >> 0;\n                    y = (viewPortHeight - h) / 2;\n                }\n                else {\n                    x -= mainViewPort.Rmargin;\n                    y = mainViewPort.Tmargin + (viewPortHeight - mainViewPort.Tmargin - mainViewPort.Bmargin - h) / 2;\n                }\n                break;\n            case LegendPanel.Position.BOTTOMRIGHT:\n                x = viewPortWidth - this._legendPanel.horizontalMargin - w;\n                if (!this._legendPanel.overlap) {\n                    mainViewPort.Rmargin += (w + 2 * this._legendPanel.horizontalMargin + this._legendPanel.borderthickness) >> 0;\n                    y = viewPortHeight - this._legendPanel.verticalMargin - h;\n                }\n                else {\n                    x -= mainViewPort.Rmargin;\n                    y = viewPortHeight - mainViewPort.Bmargin - h - this._legendPanel.verticalMargin;\n                }\n                break;\n            case LegendPanel.Position.BOTTOM:\n                if (!this._legendPanel.overlap) {\n                    x = (viewPortWidth - w) / 2 - this._legendPanel.horizontalMargin - this._legendPanel.borderthickness;\n                    y = viewPortHeight - this._legendPanel.verticalMargin - 2 * this._legendPanel.padding - this._legendPanel.borderthickness - totalHeight;\n                    mainViewPort.Bmargin += (totalHeight + 2 * this._legendPanel.padding + 2 * this._legendPanel.verticalMargin + this._legendPanel.borderthickness);\n                }\n                else {\n                    x = mainViewPort.Lmargin + (viewPortWidth - mainViewPort.Lmargin - mainViewPort.Rmargin - w) / 2 - this._legendPanel.horizontalMargin - this._legendPanel.borderthickness;\n                    y = viewPortHeight - mainViewPort.Bmargin - totalHeight - 2 * this._legendPanel.padding - 2 * this._legendPanel.verticalMargin - this._legendPanel.borderthickness;\n                }\n                break;\n            case LegendPanel.Position.BOTTOMLEFT:\n                x = this._legendPanel.horizontalMargin;\n                y = this._legendPanel.verticalMargin;\n                if (!this._legendPanel.overlap) {\n                    mainViewPort.Lmargin += (w + 2 * this._legendPanel.horizontalMargin + this._legendPanel.borderthickness);\n                    y = viewPortHeight - this._legendPanel.verticalMargin - h;\n                }\n                else {\n                    x += mainViewPort.Lmargin;\n                    y = viewPortHeight - mainViewPort.Bmargin - h - this._legendPanel.verticalMargin;\n                }\n                break;\n        }\n        let rect = new YDataRendering.YRectangle(x >> 0, y >> 0, w >> 0, h >> 0);\n        g.FillRectangle(this._legendPanel.bgBrush, rect);\n        g.DrawRectangle(this._legendPanel.pen, rect);\n        g.TextRenderingHint = YDataRendering.YTextRenderingHint.AntiAlias;\n        for (let i = 0; i < this._series.length; i++) {\n            if ((this._series[i].segments.length > 0) && (this._series[i].visible) && (!this._series[i].disabled)) {\n                g.DrawStringXY(legends[i], this._legendPanel.font, this._legendPanel.font.brush, (x + ofsetx[i] + 20 + this._legendPanel.padding) >> 0, (y + ofsety[i] + this._legendPanel.padding) >> 0);\n                let px = (x + ofsetx[i] + this._legendPanel.borderthickness / 2 + this._legendPanel.padding + 6) >> 0;\n                let py = (y + ofsety[i] + this._legendPanel.padding + legendHeight[i] / 2) >> 0;\n                g.DrawLine(this._series[i].legendPen, new YDataRendering.PointF(px, py), new YDataRendering.PointF(px + 12, py));\n            }\n        }\n    }\n    static DoSegmentRendering(w, g, p, data, count, xTimeStart, xTimeEnd) {\n        if ((data[0].x > xTimeEnd) || (data[count - 1].x < xTimeStart))\n            return 0;\n        // let Bottomleft: pointXY = YGraph.ViewPortPointToIRL(w, new YDataRendering.Point(w.Lmargin, w.Height - w.Bmargin));\n        // let TopRight: pointXY = YGraph.ViewPortPointToIRL(w, new YDataRendering.Point(w.Width - w.Rmargin, w.Tmargin));\n        // Do we need to draw that segment?\n        // if ((data[0].x > TopRight.x) || (data[count - 1].x < Bottomleft.x)) return 0; // completely out of view port display zone, abort.\n        let isSVG = g instanceof YDataRendering.YGraphicsSVG;\n        let N1 = 0;\n        let N2 = 0;\n        // data clipping: find out the first point to draw;\n        let First = 0;\n        if (data[0].x < xTimeStart) {\n            N1 = 0;\n            N2 = count - 1;\n            while (N2 - N1 > 1) {\n                let N = (N1 + N2) >> 1;\n                if (data[N].x > xTimeStart)\n                    N2 = N;\n                else\n                    N1 = N;\n            }\n            First = N1 - 1;\n            if (First < 0)\n                First = 0;\n        }\n        // data clipping: find out the last point to draw;\n        let Last = count - 1;\n        if (data[Last].x > xTimeEnd) {\n            N1 = 0;\n            N2 = count - 1;\n            while (N2 - N1 > 1) {\n                let N = (N1 + N2) >> 1;\n                if (data[N].x < xTimeEnd)\n                    N1 = N;\n                else\n                    N2 = N;\n            }\n            Last = N2 + 1;\n            if (Last > count - 1)\n                Last = count - 1;\n        }\n        if (Last - First > 2 * w.Width - w.Lmargin - w.Rmargin) // to many points to Draw, lets do some clean up\n         {\n            let ToDraw = new Array(3 * (Last - First + 1));\n            let Current = YGraph.IRLPointToViewPort(w, data[First]);\n            let New;\n            let i = First + 1;\n            let n = 0;\n            let max;\n            let min;\n            let limit;\n            while (i < Last) {\n                ToDraw[n++] = new YDataRendering.PointF(Current.X, Current.Y);\n                min = data[i].y;\n                max = min;\n                limit = YGraph.ViewPortPointToIRL(w, new YDataRendering.Point(Current.X + 1, Current.Y + 1)).x;\n                do {\n                    if (data[i].y > max)\n                        max = data[i].y;\n                    if (data[i].y < min)\n                        min = data[i].y;\n                    i++;\n                } while ((i < Last) && (data[i].x < limit));\n                let p1 = YGraph.IRLPointToViewPort(w, new pointXY(data[i].x, min));\n                let p2 = YGraph.IRLPointToViewPort(w, new pointXY(data[i].x, max));\n                if (Math.abs(p1.Y - p2.Y) > 2) {\n                    ToDraw[n++] = new YDataRendering.PointF(p1.X, p1.Y);\n                    ToDraw[n++] = new YDataRendering.PointF(p2.X, p2.Y);\n                }\n                /*\n                let min: number = Current.Y;\n                let max: number = Current.Y;\n                ToDraw[n++] = new YDataRendering.PointF(Current.X, Current.Y);\n                do\n                {\n                    New = YGraph.IRLPointToViewPort(w, data[i]);\n                    if (New.Y > max) max = New.Y;\n                    if (New.Y < min) min = New.Y;\n                    i++;\n                } while ((i < Last) && (Current.X == New.X));\n\n                ToDraw[n++] = new YDataRendering.PointF(Current.X, min);\n                ToDraw[n++] = new YDataRendering.PointF(Current.X, max);\n                */\n                Current = YGraph.IRLPointToViewPort(w, data[i]);\n            }\n            ToDraw[n++] = Current; //YGraph.IRLPointToViewPort(w, data[Last]);\n            ToDraw = ToDraw.slice(0, n);\n            if (n > 1)\n                g.DrawLines(p, ToDraw);\n            return n;\n        }\n        else { // in SVG mode, DrawLines linejoins are rendered correctly,\n            // in bitmap mode they aren't\n            if (isSVG) {\n                let ToDraw = new Array(Last - First + 1);\n                for (let i = First; i <= Last; i++) {\n                    ToDraw[i - First] = YGraph.IRLPointToViewPort(w, data[i]);\n                }\n                g.DrawLines(p, ToDraw);\n            }\n            else {\n                for (let i = First; i < Last; i++) {\n                    g.DrawLine(p, YGraph.IRLPointToViewPort(w, data[i]), YGraph.IRLPointToViewPort(w, data[i + 1]));\n                }\n            }\n        }\n        return Last - First;\n    }\n    DrawYAxisZones(w, g, scale) {\n        if (!scale.visible)\n            return;\n        let Delta = scale.startStopStep.dataMax - scale.startStopStep.dataMin;\n        let YZoom = (Delta) / (w.Height - w.Bmargin - w.Tmargin);\n        for (let i = 0; i < scale.zones.length; i++) {\n            if (scale.zones[i].visible) {\n                let max = scale.zones[i].max;\n                let min = scale.zones[i].min;\n                if (Number.isNaN(max)) {\n                    max = scale.startStopStep.dataMax;\n                }\n                if (Number.isNaN(min))\n                    min = scale.startStopStep.dataMin;\n                if (max < min) {\n                    let t = max;\n                    max = min;\n                    min = t;\n                }\n                let y0 = w.Height - w.Bmargin - Math.round((max - scale.startStopStep.dataMin) / YZoom) >> 0;\n                let h = Math.round((max - min) / YZoom) >> 0;\n                g.FillRectangleXYHW(scale.zones[i].zoneBrush, this.mainViewPort.Lmargin, y0, this.mainViewPort.Width - this.mainViewPort.Rmargin - this.mainViewPort.Lmargin + 1, h);\n            }\n        }\n    }\n    DrawXAxisZones(w, g, scale) {\n        if (!scale.visible)\n            return;\n        let delta = scale.max - scale.min;\n        let XZoom = (delta) / (w.Width - w.Lmargin - w.Rmargin);\n        for (let i = 0; i < scale.zones.length; i++) {\n            if (scale.zones[i].visible) {\n                let max = scale.zones[i].max;\n                let min = scale.zones[i].min;\n                if (Number.isNaN(max))\n                    max = scale.min;\n                if (Number.isNaN(min))\n                    min = scale.max;\n                if (max < min) {\n                    let t = max;\n                    max = min;\n                    min = t;\n                }\n                let x0 = w.Lmargin + Math.round((min - scale.min) / XZoom) >> 0;\n                g.FillRectangleXYHW(scale.zones[i].zoneBrush, x0, this.mainViewPort.Tmargin, ((max - min) / XZoom) >> 0, this.mainViewPort.Height - this.mainViewPort.Tmargin - this.mainViewPort.Bmargin);\n            }\n        }\n    }\n    // noinspection JSSuspiciousNameCombination\n    static DrawYAxis(w, g, axis, ofset, simulation) {\n        if (!axis.visible) {\n            axis.innerWidth = 0;\n            // noinspection JSSuspiciousNameCombination\n            return axis.innerWidth;\n        }\n        let Delta = axis.startStopStep.dataMax - axis.startStopStep.dataMin;\n        let YZoom = (Delta) / (w.Height - w.Bmargin - w.Tmargin);\n        let leftSide = axis.position == YAxis.HrzPosition.LEFT;\n        let x = leftSide ? w.Lmargin - ofset : (w.Width - w.Rmargin + ofset);\n        if (!simulation)\n            g.DrawLineXY(axis.pen, x, w.Tmargin, x, w.Height - w.Bmargin);\n        let format = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\n        format.LineAlignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\n        format.Alignment = leftSide ? 2 /* YDataRendering.YStringFormat.StringAlignment.Far */ : 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\n        let FirstStep = axis.startStopStep.step * (Math.floor(axis.startStopStep.start / axis.startStopStep.step));\n        if (FirstStep < 0) {\n            FirstStep -= axis.startStopStep.step;\n        }\n        let stepCount = (((Delta - (FirstStep - axis.startStopStep.dataMin)) / axis.startStopStep.step) >> 0) + 1;\n        if (!simulation)\n            g.TextRenderingHint = YDataRendering.YTextRenderingHint.AntiAlias;\n        let UnitWidth = 0;\n        let labelPrecision = 0; // fix me\n        if (axis.startStopStep.precision < 0)\n            labelPrecision = (-axis.startStopStep.precision);\n        if (stepCount < w.Height) // protection again infinity of graduation\n         {\n            for (let i = 0; i < stepCount; i++) {\n                let y = Math.round((FirstStep + i * axis.startStopStep.step - axis.startStopStep.dataMin) / YZoom) >> 0;\n                if (y >= 0) {\n                    y = w.Height - w.Bmargin - y;\n                    let v = FirstStep + i * axis.startStopStep.step;\n                    if (!simulation) {\n                        if ((axis.showGrid) && ((i > 0) || (axis.startStopStep.dataMin != 0)))\n                            g.DrawLineXY(axis.gridPen, w.Lmargin, y, w.Width - w.Rmargin, y);\n                        if ((Math.abs(v) < 1E-6) && axis.highlightZero) {\n                            g.DrawLineXY(axis.pen, w.Lmargin, y, w.Width - w.Rmargin, y);\n                        }\n                        g.DrawLineXY(axis.pen, x + ((leftSide) ? -2 : 2), y, x + ((leftSide) ? 5 : -5), y);\n                    }\n                    let label = v.toFixed(labelPrecision);\n                    let ssize = g.MeasureString(label, axis.font, 100000);\n                    if (ssize.width > UnitWidth)\n                        UnitWidth = ssize.width;\n                    if (!simulation) {\n                        let p = new YDataRendering.Point(x + (leftSide ? -3 : 3), y);\n                        g.DrawStringPF(label, axis.font, axis.font.brush, p, format);\n                    }\n                }\n            }\n        }\n        if (axis.legend.title != \"\") {\n            let size = g.MeasureString(axis.legend.title, axis.legend.font, 100000);\n            if (!simulation) {\n                let format = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\n                format.Alignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\n                format.LineAlignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\n                format.Trimming = 0 /* YDataRendering.YStringFormat.StringTrimming.None */;\n                let legendX = x + ((leftSide) ? -UnitWidth - size.height : UnitWidth + size.height + 2) >> 0;\n                let legendY = (w.Tmargin + (w.Height - w.Tmargin - w.Bmargin) / 2) >> 0;\n                g.Transform(legendX, legendY, leftSide ? -Math.PI / 2 : Math.PI / 2);\n                g.DrawStringPF(axis.legend.title, axis.legend.font, axis.legend.font.brush, new YDataRendering.Point(0, 0), format);\n                g.ResetTransform();\n            }\n            // noinspection JSSuspiciousNameCombination\n            UnitWidth += size.height;\n        }\n        axis.innerWidth = (UnitWidth >> 0) + 10;\n        // noinspection JSSuspiciousNameCombination\n        return axis.innerWidth;\n    }\n    DrawMonitorXAxis(w, g, xRange, format) {\n        let delta = xRange.Max - xRange.Min;\n        let scale = TimeConverter.BestTimeformat(delta, delta, this.xAxis.timeReference);\n        let XZoom = (delta) / (w.Width - w.Lmargin - w.Rmargin);\n        let stepCount = ((delta / scale.step) >> 0) + 2;\n        let FirstStep = scale.step * (Math.floor(xRange.Min / scale.step));\n        if (FirstStep < xRange.Min)\n            FirstStep += scale.step;\n        g.TextRenderingHint = YDataRendering.YTextRenderingHint.AntiAlias;\n        let y = w.Height - w.Bmargin;\n        g.DrawLineXY(this._navigator.pen, w.Lmargin, w.Height - w.Bmargin - 1, w.Width - w.Rmargin, w.Height - w.Bmargin - 1);\n        let label;\n        let t = FirstStep;\n        do {\n            let d = TimeConverter.FromUnixTime(t);\n            if (scale.step > 30 * 86400) // resynchronize with the beginning of the month.\n             {\n                t = TimeConverter.ToUnixTime(new Date(d.getFullYear(), d.getMonth(), 1));\n            }\n            if (t >= xRange.Min) {\n                let x = w.Lmargin + Math.round((t - xRange.Min) / XZoom);\n                g.DrawLineXY(this._navigator.pen, x, y, x, y - 4);\n                if (format == XAxis.FORMATAUTO) {\n                    label = TimeConverter.FromUnixTime(t).ToString(scale.format);\n                }\n                else {\n                    label = TimeConverter.FromUnixTime(t).ToString(format);\n                }\n                let ssize = g.MeasureString(label, this._navigator.font, 100000);\n                g.DrawString(label, this._navigator.font, this._navigator.font.brush, new YDataRendering.Point((x - ssize.width / 2), (y - ssize.height - 1)));\n            }\n            t += scale.step;\n        } while (t < xRange.Max);\n    }\n    static XLabel(t, scale, scaleFormat, timeRange) {\n        let label;\n        if (scale.timeReference == TimeConverter.TimeReference.ABSOLUTE) {\n            if (scale.labelFormat == XAxis.FORMATAUTO) {\n                label = TimeConverter.FromUnixTime(t).ToString(scaleFormat.format);\n            }\n            else {\n                label = t.toString();\n            } //(scale.labelFormat);\n        }\n        else {\n            let ticks = YTimeSpan.TicksPerSecond * (Math.round(1000 * (t - scale.zeroTime)) / 1000);\n            label = (ticks < 0) ? \"-\" + new YTimeSpan(-ticks).toString(scaleFormat.format) : new YTimeSpan(ticks).toString(scaleFormat.format);\n        }\n        return label;\n    }\n    DrawXAxis(w, g, scale, simulation) {\n        if (w.Width - w.Rmargin - w.Lmargin < 10)\n            return 1;\n        //string lastdate = \"\";\n        let stringFormat = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\n        stringFormat.Alignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */; // Horizontal Alignment\n        let bottomSide = scale.position == XAxis.VrtPosition.BOTTOM;\n        let y = bottomSide ? w.Height - w.Bmargin : w.Tmargin;\n        if (!simulation)\n            g.DrawLineXY(scale.pen, w.Lmargin, y, w.Width - w.Rmargin, y);\n        let delta = scale.max - scale.min;\n        let XZoom = (delta) / (w.Width - w.Lmargin - w.Rmargin);\n        let stepCount = ((delta / scale.step) >> 0) + 1;\n        let FirstStep = 0;\n        let timeRange = MinMaxHandler.DefaultValue();\n        for (let i = 0; i < this._series.length; i++) {\n            if (!this._series[i].disabled) {\n                timeRange = MinMaxHandler.Combine(timeRange, this._series[i].timeRange);\n            }\n        }\n        scale.zeroTime = timeRange.Min;\n        if (scale.timeReference == TimeConverter.TimeReference.ABSOLUTE) {\n            FirstStep = scale.step * (Math.floor(scale.min / scale.step));\n            timeRange.Min = scale.min;\n            timeRange.Max = scale.max;\n        }\n        else {\n            if (Number.isNaN(timeRange.Min))\n                return 0;\n            FirstStep = timeRange.Min + scale.step * (Math.floor((scale.min - scale.zeroTime) / scale.step));\n        }\n        if (FirstStep < scale.min)\n            FirstStep += scale.step;\n        let timeOffset = 0;\n        if (scale.timeReference != TimeConverter.TimeReference.ABSOLUTE) {\n            timeOffset = FirstStep;\n        }\n        scale.fullSize = timeRange.Max - timeRange.Min;\n        //log(\"Viewport Size: \" + (scale.max - scale.min).toString() + \"Sec (\" + ((scale.max - scale.min)/86400).toString()+\" days)\");\n        let scaleFormat = scale.bestFormat(timeRange.Max - timeRange.Min, scale.max - scale.min);\n        if (!simulation)\n            g.TextRenderingHint = YDataRendering.YTextRenderingHint.AntiAlias;\n        let UnitHeight = 0;\n        let label;\n        scale.step = scaleFormat.step;\n        // compute the size of the first label\n        let t = parseFloat(FirstStep.toString());\n        label = YGraph.XLabel(t, scale, scaleFormat, timeRange);\n        let ssize = g.MeasureString(label, scale.font, 100000);\n        // Compute step to skip, to make sure labels don't overlap\n        let mod = 1;\n        while ((mod * (w.Width - w.Rmargin - w.Lmargin) / stepCount) < ssize.width) {\n            mod++;\n        }\n        let steps = Math.round((t - timeOffset) / scale.step) >> 0;\n        let previousT = 0;\n        do {\n            let d = TimeConverter.FromUnixTime(t);\n            if ((scale.step > 32 * 86400) && (scale.timeReference == TimeConverter.TimeReference.ABSOLUTE)) // resynchronize with the begining of the month.\n             {\n                if (scale.step >= 365 * 86400) {\n                    let m = d.getMonth();\n                    t = TimeConverter.ToUnixTime(new Date(d.getFullYear() + (m > 5 ? 1 : 0), 0, 1));\n                }\n                else\n                    t = TimeConverter.ToUnixTime(new Date(d.getFullYear(), d.getMonth(), 1));\n                if (t < previousT) {\n                    debugger;\n                } // if this happens, we are in deep sh*t\n                // console.log(\" \" + t.toString() +\" / \"+scale.max.toString() + \" step = \"+scale.step.toString())\n            }\n            if (t >= scale.min) {\n                let x = w.Lmargin + Math.round((t - scale.min) / XZoom) >> 0;\n                if (x <= w.Width - w.Rmargin) {\n                    if (!simulation) {\n                        if (scale.showGrid)\n                            g.DrawLineXY(scale.gridPen, x, w.Tmargin, x, w.Height - w.Bmargin);\n                        g.DrawLineXY(scale.pen, x, y + (bottomSide ? 2 : -2), x, y + (bottomSide ? -5 : 5));\n                    }\n                    label = YGraph.XLabel(t, scale, scaleFormat, timeRange);\n                    //console.log(\"t=\"+t+\" label=\"+label);\n                    ssize = g.MeasureString(label, scale.font, 100000);\n                    if (ssize.height > UnitHeight)\n                        UnitHeight = ssize.height;\n                    if (!simulation) {\n                        if (steps % mod == 0) \n                        //if (Math.round(100 * (t - timeOffset)) % Math.round(100 * (scale.step * mod)) == 0)\n                        {\n                            g.DrawStringPF(label, scale.font, scale.font.brush, new YDataRendering.PointF(x, y + (bottomSide ? +5 : (-ssize.height) >> 0) - 2), stringFormat);\n                        }\n                    }\n                }\n            }\n            previousT = t;\n            t += scale.step;\n            if (t < previousT)\n                debugger; // if this happens, we are in deep sh*t\n            steps++;\n        } while (t <= scale.max);\n        if (scale.legend.title != \"\") {\n            let size = g.MeasureString(scale.legend.title, scale.legend.font, 100000);\n            if (!simulation) {\n                let legendX = (w.Lmargin + (w.Width - w.Lmargin - w.Rmargin - size.width) / 2) >> 0;\n                let legendY = (bottomSide ? w.Height - w.Bmargin + UnitHeight + 5 : w.Tmargin - UnitHeight - size.height * 1.5);\n                g.DrawString(scale.legend.title, scale.legend.font, scale.legend.font.brush, new YDataRendering.PointF(legendX, legendY));\n            }\n            UnitHeight += size.height >> 0;\n        }\n        scale.innerHeight = (UnitHeight >> 0) + 10;\n        // noinspection JSSuspiciousNameCombination\n        return scale.innerHeight;\n    }\n    pixelxSize(mainViewPort, scaleX) {\n        let dtime = scaleX.max - scaleX.min;\n        let dview = mainViewPort.Width - mainViewPort.Lmargin - mainViewPort.Rmargin;\n        if (dview > 0)\n            return dtime / dview;\n        return 0;\n    }\n    TimeToAutoSting(t, mainViewPort, scaleX) {\n        let strValue = \"\";\n        let dtime = scaleX.max - scaleX.min;\n        let months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n        // double dview = mainViewPort.Width - mainViewPort.Lmargin - mainViewPort.Rmargin;\n        if (dtime > 0) {\n            let pixelSize = this.pixelxSize(mainViewPort, scaleX);\n            if (pixelSize > 0) {\n                if (scaleX.timeReference == TimeConverter.TimeReference.ABSOLUTE) {\n                    let date = TimeConverter.FromUnixTime(t);\n                    let MMMM = months[date.getMonth()];\n                    let dd = date.getDate().toString();\n                    let HH = date.getHours().toString();\n                    if (HH.length < 2)\n                        HH = \"0\" + HH;\n                    let mm = date.getMinutes().toString();\n                    if (mm.length < 2)\n                        mm = \"0\" + mm;\n                    let ss = date.getSeconds().toString();\n                    if (ss.length < 2)\n                        ss = \"0\" + ss;\n                    let ff = Math.round(date.getMilliseconds() / 10).toString();\n                    if (ff.length < 2)\n                        ff = \"0\" + ss;\n                    let f = Math.round(date.getMilliseconds() / 100).toString();\n                    if (dtime >= 86400)\n                        strValue += MMMM + \" \" + dd;\n                    if (pixelSize < 0.1) {\n                        strValue += (strValue != \"\" ? \" \" : \"\") + HH + \":\" + mm + \":\" + ss + \".\" + ff;\n                    }\n                    else if (pixelSize < 1) {\n                        strValue += (strValue != \"\" ? \" \" : \"\") + HH + \":\" + mm + \":\" + ss + \".\" + f;\n                    }\n                    else if (pixelSize < 60) {\n                        strValue += (strValue != \"\" ? \" \" : \"\") + HH + \":\" + mm + \":\" + ss;\n                    }\n                    else if (pixelSize < 3600) {\n                        strValue += (strValue != \"\" ? \" \" : \"\") + HH + \":\" + mm;\n                    }\n                    else if (pixelSize < 86400)\n                        strValue += (strValue != \"\" ? \" \" : \"\") + HH + \"H\";\n                }\n                else {\n                    let format = TimeConverter.RelativeFormat(scaleX.fullSize, dtime, pixelSize);\n                    let ticks = YTimeSpan.TicksPerSecond * (Math.round(100 * (t - scaleX.zeroTime)) / 100);\n                    strValue += (ticks < 0) ? \"-\" + new YTimeSpan(-ticks).toString(format) : new YTimeSpan(ticks).toString(format);\n                }\n            }\n        }\n        return strValue;\n    }\n    DrawDataTracker(g, viewPortWidth, viewPortHeight, scaleX) {\n        if (!this._dataTracker.enabled) {\n            return;\n        }\n        let p = this.mouseLocalPosition();\n        if (p == null) {\n            return;\n        }\n        if (p.X <= this.mainViewPort.Lmargin) {\n            return;\n        }\n        if (p.Y <= this.mainViewPort.Tmargin) {\n            return;\n        }\n        if (p.X >= this.UIContainer.width - this.mainViewPort.Rmargin) {\n            return;\n        }\n        if (p.Y >= this.UIContainer.height - this.mainViewPort.Bmargin) {\n            return;\n        }\n        g.SetClip(new YDataRendering.YRectangle(0, 0, viewPortWidth, viewPortHeight));\n        let DataPoint = YGraph.ViewPortPointToIRL(this.mainViewPort, p); //DataPoint Y value will be incorrect, but we don't need it.\n        let delta = -1;\n        let bestindex = -1;\n        let bestmatch = new Array(this._series.length);\n        let IRLmatch = new Array(this._series.length);\n        for (let i = 0; i < this._series.length; i++) {\n            if ((this._series[i].visible) && (!this._series[i].disabled)) {\n                let p2 = this._series[i].findClosestValue(DataPoint.x, false);\n                if (p2 != null) {\n                    IRLmatch[i] = p2;\n                    bestmatch[i] = YGraph.IRLPointToViewPort(this.mainViewPort, IRLmatch[i], this.yAxes[this._series[i].yAxisIndex].IRLy, this.yAxes[this._series[i].yAxisIndex].zoom);\n                    if (bestindex < 0 || (delta > Math.abs(bestmatch[i].Y - p.Y))) {\n                        delta = Math.abs(bestmatch[i].Y - p.Y);\n                        if ((this._dataTracker.detectionDistance == 0) ||\n                            ((delta <= this._dataTracker.detectionDistance) &&\n                                (Math.abs(bestmatch[i].X - p.X) < this._dataTracker.detectionDistance))) {\n                            bestindex = i;\n                        }\n                    }\n                }\n            }\n        }\n        if (bestindex >= 0) {\n            let xx = (bestmatch[bestindex].X - this._dataTracker.diameter / 2) >> 0;\n            let yy = (bestmatch[bestindex].Y - this._dataTracker.diameter / 2) >> 0;\n            let dd = this._dataTracker.diameter;\n            g.FillEllipse(this._series[bestindex].brush, xx, yy, dd, dd);\n            g.DrawEllipse(this._dataTracker.pen, xx, yy, dd, dd);\n            let dx;\n            let dy;\n            if (p.X > this.mainViewPort.Lmargin + (viewPortWidth - this.mainViewPort.Lmargin - this.mainViewPort.Rmargin) / 2)\n                dx = -1;\n            else\n                dx = 1;\n            if (p.Y > this.mainViewPort.Tmargin + (viewPortHeight - this.mainViewPort.Tmargin - this.mainViewPort.Bmargin) / 2)\n                dy = -1;\n            else\n                dy = 1;\n            let xx2 = (bestmatch[bestindex].X + dx * (this._dataTracker.handleLength * 1.5)) >> 0;\n            let yy2 = (bestmatch[bestindex].Y + dy * this._dataTracker.handleLength) >> 0;\n            g.DrawLineXY(this._dataTracker.pen, (bestmatch[bestindex].X + dx * 0.707 * this._dataTracker.diameter / 2) >> 0, (bestmatch[bestindex].Y + dy * 0.707 * this._dataTracker.diameter / 2) >> 0, (bestmatch[bestindex].X + dx * this._dataTracker.handleLength) >> 0, (bestmatch[bestindex].Y + dy * this._dataTracker.handleLength) >> 0);\n            g.DrawLineXY(this._dataTracker.pen, (bestmatch[bestindex].X + dx * this._dataTracker.handleLength) >> 0, (bestmatch[bestindex].Y + dy * this._dataTracker.handleLength) >> 0, xx2, yy2);\n            let strValue = \"\";\n            if (this._dataTracker.showSerieName)\n                strValue += this._series[bestindex].legend + \"\\r\\n\";\n            if (this._dataTracker.showTimeStamp) {\n                let t = IRLmatch[bestindex].x;\n                strValue += this.TimeToAutoSting(t, this.mainViewPort, scaleX) + \"\\r\\n\";\n            }\n            // this string based comparaison  is an exception this._dataTracker.dataPrecision might actually be\n            // DataTrackerDescription from Properties.ts which was  probably added to avoid precision values that\n            // make no Sense in Yocto-Visualization\n            if (this._dataTracker.dataPrecision.toString == DataTracker.DataPrecision.PRECISION_NOLIMIT.toString) {\n                strValue += IRLmatch[bestindex].y.toString() + this._series[bestindex].unit;\n            }\n            else {\n                let strvalue = this._dataTracker.dataPrecision.description; // not very elegent but it will do\n                let precision = -Math.log10(Number(strvalue));\n                strValue += IRLmatch[bestindex].y.toFixed(precision) + this._series[bestindex].unit; //FIXME\n            }\n            let ssize = g.MeasureString(strValue, this._dataTracker.font, 10000);\n            let labelwidth = (ssize.width + 2 * this._dataTracker.padding + this._dataTracker.borderthickness);\n            let labelHeight = (ssize.height + 2 * this._dataTracker.padding + this._dataTracker.borderthickness);\n            if (dx > 0) {\n                g.FillRectangleXYHW(this._dataTracker.bgBrush, xx2, yy2 - (labelHeight >> 1), labelwidth, labelHeight);\n                g.DrawRectangleXYHW(this._dataTracker.pen, xx2, yy2 - (labelHeight >> 1), labelwidth, labelHeight);\n                g.DrawStringXY(strValue, this._dataTracker.font, this._dataTracker.font.brush, (xx2 + this._dataTracker.padding) >> 0, (yy2 - (labelHeight >> 1) + this._dataTracker.padding) >> 0);\n            }\n            else {\n                g.FillRectangleXYHW(this._dataTracker.bgBrush, xx2 - labelwidth, yy2 - (labelHeight >> 1), labelwidth, labelHeight);\n                g.DrawRectangleXYHW(this._dataTracker.pen, xx2 - labelwidth, yy2 - (labelHeight >> 1), labelwidth, labelHeight);\n                g.DrawStringXY(strValue, this._dataTracker.font, this.dataTracker.font.brush, (xx2 + this._dataTracker.padding - labelwidth) >> 0, (yy2 - (labelHeight >> 1) + this._dataTracker.padding) >> 0);\n            }\n        }\n    }\n    /*\n     *  XAxis scale)\n    {\n        if (!scale.visible) return;\n        double delta = scale.max - scale.min;\n        Double XZoom = (delta) / (w.Width - w.Lmargin - w.Rmargin);\n\n        for (int i = 0; i < scale.zones.Count; i++)\n            if (scale.zones[i].visible)\n            {\n                double max = scale.zones[i].max;\n                double min = scale.zones[i].min;\n                if (double.IsNaN(max)) max = scale.min;\n                if (double.IsNaN(min)) min = scale.max;\n                if (max < min) { double t = max; max = min; min = t; }\n                int x0 =  w.Lmargin + (int)Math.Round((min - scale.min) / XZoom);\n     *\n     * */\n    DrawMarkers(w, g, scaleX, viewPortWidth, viewPortHeight) {\n        if (this._xAxis.markers.length == 0)\n            return;\n        g.SetClip(new YDataRendering.YRectangle(w.Lmargin, w.Tmargin, w.Width - w.Rmargin - w.Lmargin, w.Height - w.Bmargin - w.Tmargin));\n        let Bottomleft = YGraph.ViewPortPointToIRL(w, new YDataRendering.Point(w.Lmargin, w.Height - w.Bmargin));\n        let TopRight = YGraph.ViewPortPointToIRL(w, new YDataRendering.Point(w.Width - w.Rmargin, w.Tmargin));\n        let dy = (w.Height - w.Bmargin - w.Tmargin) / 100.0;\n        let pixelSize = -1;\n        g.TextRenderingHint = YDataRendering.YTextRenderingHint.AntiAlias;\n        for (let i = 0; i < this._xAxis.markers.length; i++) {\n            if (this._xAxis.markers[i].enabled) {\n                if (pixelSize < 0)\n                    pixelSize = this.pixelxSize(this.mainViewPort, scaleX);\n                let mustdraw = true;\n                let xpos = 0;\n                if (this._xAxis.markers[i].timereference == TimeConverter.TimeReference.RELATIVE) {\n                    if (this._xAxis.zeroTime > 0) {\n                        xpos = this._xAxis.markers[i].xposition + this._xAxis.zeroTime;\n                    }\n                    else {\n                        mustdraw = false;\n                    }\n                }\n                else {\n                    xpos = this._xAxis.markers[i].xposition;\n                }\n                if ((xpos > Bottomleft.x - 100 * pixelSize) && (xpos < TopRight.x + 100 * pixelSize) && mustdraw) {\n                    let p = YGraph.IRLPointToViewPort(w, new pointXY(xpos, 0));\n                    let xxCenter = (p.X) >> 0;\n                    let yyCenter = (w.Height - w.Bmargin - (this._xAxis.markers[i].yposition * dy)) >> 0;\n                    let strValue = this._xAxis.markers[i].text.replace(\"\\\\n\", \"\\n\");\n                    let now = new Date();\n                    if (strValue.indexOf('$') >= 0) {\n                        if (strValue.indexOf(\"$MARKERTIME$\") >= 0) {\n                            // string s = _xAxis.markers[i].xpositionIsRelative ? _xAxis.markers[i].positionOnXAxis.toString()\n                            // : TimeToAutoSting(_xAxis.markers[i].xposition, mainViewPort, scaleX);\n                            let s = this._xAxis.markers[i].timereference == TimeConverter.TimeReference.RELATIVE ? TimeConverter.secTimeSpanToString(this._xAxis.markers[i].xposition, pixelSize)\n                                : this.TimeToAutoSting(this._xAxis.markers[i].xposition, this.mainViewPort, scaleX);\n                            strValue = strValue.replace(\"$MARKERTIME$\", s);\n                        }\n                        if (strValue.indexOf(\"$VALUE\") >= 0) {\n                            for (let j = 0; j < this._series.length; j++) {\n                                if (!this._series[j].disabled) {\n                                    let pt = this._series[j].findClosestValue(xpos, true);\n                                    let st = (pt != null) ? (pt.y).toFixed(0) : \"--\";\n                                    strValue = strValue.replace(\"$VALUE\" + (j + 1).toString() + \"$\", st);\n                                }\n                                else {\n                                    strValue = strValue.replace(\"$VALUE\" + (j + 1).toString() + \"$\", \"\");\n                                }\n                            }\n                        }\n                        if (strValue.indexOf(\"$UNIT\") >= 0) {\n                            for (let j = 0; j < this._series.length; j++) {\n                                if (!this._series[j].disabled) {\n                                    strValue = strValue.replace(\"$UNIT\" + (j + 1).toString() + \"$\", this._series[j].unit);\n                                }\n                                else {\n                                    strValue = strValue.replace(\"$UNIT\" + (j + 1).toString() + \"$\", \"\");\n                                }\n                            }\n                        }\n                        if (strValue.indexOf(\"$LEGEND\") >= 0) {\n                            for (let j = 0; j < this._series.length; j++) {\n                                if (!this._series[j].disabled) {\n                                    strValue = strValue.replace(\"$LEGEND\" + (j + 1).toString() + \"$\", this._series[j].legend);\n                                }\n                                else {\n                                    strValue = strValue.replace(\"$LEGEND\" + (j + 1).toString() + \"$\", \"\");\n                                }\n                            }\n                        }\n                        if (this._xAxis.markers[i].PatchTextCallback != null) {\n                            strValue = this._xAxis.markers[i].PatchTextCallback(strValue);\n                        }\n                    }\n                    let ssize = g.MeasureString(strValue, this._xAxis.markers[i].font, 10000);\n                    let labelWidth = (ssize.width + 2 * this._xAxis.markers[i].padding + this._xAxis.markers[i].borderthickness);\n                    let labelHeight = (ssize.height + 2 * this._xAxis.markers[i].padding + this._xAxis.markers[i].borderthickness);\n                    g.FillRectangleXYHW(this._xAxis.markers[i].bgBrush, xxCenter - (labelWidth >> 1), yyCenter - (labelHeight >> 1), labelWidth >> 0, labelHeight >> 0);\n                    g.DrawRectangleXYHW(this._xAxis.markers[i].pen, xxCenter - (labelWidth >> 1), yyCenter - (labelHeight >> 1), labelWidth >> 0, labelHeight >> 0);\n                    let xText;\n                    switch (this._xAxis.markers[i].textAlign) {\n                        case Marker.TextAlign.LEFT:\n                            xText = xxCenter - (labelWidth >> 1) + this._xAxis.markers[i].padding;\n                            break;\n                        case Marker.TextAlign.RIGHT:\n                            xText = xxCenter + (labelWidth >> 1) - this._xAxis.markers[i].padding;\n                            break;\n                        default:\n                            xText = xxCenter;\n                            break;\n                    }\n                    g.DrawStringPF(strValue, this._xAxis.markers[i].font, this._xAxis.markers[i].font.brush, new YDataRendering.PointF(xText, yyCenter), this._xAxis.markers[i].stringFormat);\n                    g.DrawLineXY(this._xAxis.markers[i].pen, xxCenter, (w.Tmargin) >> 0, xxCenter, yyCenter - (labelHeight >> 1));\n                    g.DrawLineXY(this._xAxis.markers[i].pen, xxCenter, yyCenter + (labelHeight >> 1), xxCenter, (w.Height - w.Bmargin) >> 0);\n                    if (this._xAxis.markers[i].arrowSize > 0) {\n                        if (this._xAxis.markers[i].yposition > 25) {\n                            let triangle = [\n                                new YDataRendering.PointF((xxCenter - this._xAxis.markers[i].arrowSize), (yyCenter + (labelHeight >> 1))),\n                                new YDataRendering.PointF((xxCenter + this._xAxis.markers[i].arrowSize), (yyCenter + (labelHeight >> 1))),\n                                new YDataRendering.PointF(xxCenter, ((yyCenter + (labelHeight >> 1) + this._xAxis.markers[i].arrowSize)))\n                            ];\n                            g.FillPolygon(this._xAxis.markers[i].arrowBrush, triangle);\n                        }\n                        if (this._xAxis.markers[i].yposition < 75) {\n                            let triangle = [\n                                new YDataRendering.PointF((xxCenter - this._xAxis.markers[i].arrowSize), (yyCenter + (labelHeight >> 1))),\n                                new YDataRendering.PointF((xxCenter + this._xAxis.markers[i].arrowSize), (yyCenter + (labelHeight >> 1))),\n                                new YDataRendering.PointF(xxCenter, ((yyCenter - (labelHeight >> 1) - this._xAxis.markers[i].arrowSize)))\n                            ];\n                            g.FillPolygon(this._xAxis.markers[i].arrowBrush, triangle);\n                        }\n                    }\n                }\n            }\n        }\n        g.ResetClip();\n    }\n    DrawDataPanels(w, g, scaleX, scalesY, viewPortWidth, viewPortHeight) {\n        if (this._dataPanels.length == 0)\n            return;\n        g.SetClip(new YDataRendering.YRectangle(w.Lmargin, w.Tmargin, w.Width - w.Rmargin - w.Lmargin, w.Height - w.Bmargin - w.Tmargin));\n        for (let i = 0; i < this._dataPanels.length; i++) {\n            if (this._dataPanels[i].enabled) {\n                let p = this._dataPanels[i];\n                if (p.yScaleIndex < scalesY.length) {\n                    let AvailableWidth = w.Width - 2 * p.padding - p.borderthickness;\n                    if (AvailableWidth < 100)\n                        AvailableWidth = 100;\n                    let ssize = g.MeasureString(p.text, p.font, AvailableWidth >> 0);\n                    let panelWidth = ssize.width + 2 * p.padding + p.borderthickness;\n                    let panelHeight = ssize.height + 2 * p.padding + p.borderthickness;\n                    let x = 0;\n                    switch (p.horizontalPosition) {\n                        case DataPanel.HorizontalPosition.LEFTBORDER:\n                            x = w.Lmargin;\n                            break;\n                        case DataPanel.HorizontalPosition.RIGHTBORDER:\n                            x = w.Width - w.Rmargin;\n                            break;\n                        case DataPanel.HorizontalPosition.ABSOLUTEX:\n                            let delta = scaleX.max - scaleX.min;\n                            let XZoom = (delta) / (w.Width - w.Lmargin - w.Rmargin);\n                            x = w.Lmargin + Math.round((p.AbsoluteXposition - scaleX.min) / XZoom) >> 0;\n                            break;\n                    }\n                    let y = 0;\n                    switch (p.verticalPosition) {\n                        case DataPanel.VerticalPosition.TOPBORDER:\n                            y = w.Tmargin;\n                            break;\n                        case DataPanel.VerticalPosition.BOTTOMBORDER:\n                            y = w.Height - w.Bmargin;\n                            break;\n                        case DataPanel.VerticalPosition.ABSOLUTEY:\n                            y = w.Height - w.Bmargin - Math.round((p.AbsoluteYposition - scalesY[p.yScaleIndex].IRLy) * scalesY[p.yScaleIndex].zoom) >> 0;\n                            break;\n                    }\n                    switch (p.panelHrzAlign) {\n                        case DataPanel.HorizontalAlign.LEFTOF:\n                            x -= panelWidth + p.horizontalMargin;\n                            break;\n                        case DataPanel.HorizontalAlign.RIGHTOF:\n                            x += p.horizontalMargin;\n                            break;\n                        default:\n                            x -= (panelWidth) / 2;\n                            break;\n                    }\n                    switch (p.panelVrtAlign) {\n                        case DataPanel.VerticalAlign.ABOVE:\n                            y -= panelHeight + p.verticalMargin;\n                            break;\n                        case DataPanel.VerticalAlign.BELOW:\n                            y += p.verticalMargin;\n                            break;\n                        default:\n                            y -= (panelHeight) / 2;\n                            break;\n                    }\n                    g.FillRectangleXYHW(p.bgBrush, x >> 0, y >> 0, panelWidth >> 0, panelHeight >> 0);\n                    if (p.borderthickness > 0)\n                        g.DrawRectangleXYHW(p.pen, x >> 0, y >> 0, panelWidth >> 0, panelHeight >> 0);\n                    let sf = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\n                    switch (p.panelTextAlign) {\n                        case YDataRendering.MessagePanel.TextAlign.LEFT:\n                            sf.LineAlignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\n                            sf.Alignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\n                            break;\n                        case YDataRendering.MessagePanel.TextAlign.RIGHT:\n                            sf.LineAlignment = 2 /* YDataRendering.YStringFormat.StringAlignment.Far */;\n                            sf.Alignment = 2 /* YDataRendering.YStringFormat.StringAlignment.Far */;\n                            break;\n                        default:\n                            sf.LineAlignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\n                            sf.Alignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\n                            break;\n                    }\n                    let rect = new YDataRendering.YRectangle((x + p.padding + p.borderthickness / 2) >> 0, (y + p.padding + p.borderthickness / 2) >> 0, ssize.width >>= +1, (ssize.height >> 0) + 1);\n                    g.DrawStringRect(p.text, p.font, p.font.brush, rect, sf);\n                }\n                else {\n                    throw new RangeError(\"Cannot renderer data panel #\" + i.toString() + \", no such Y axis\");\n                }\n            }\n        }\n    }\n    Render(g, UIw, UIh) {\n        if ((UIw < 50) || (UIh < 50))\n            return 0; // too small size is likely to cause endless loops\n        //#ifdef PROFILING\n        //        let RenderTime :number = performance.now();\n        ////#endif\n        let lastLmargin = this.mainViewPort.Lmargin;\n        let lastRmargin = this.mainViewPort.Rmargin;\n        this.mainViewPort.Width = UIw;\n        this.mainViewPort.Height = UIh;\n        this.mainViewPort.Lmargin = 0;\n        this.mainViewPort.Rmargin = 0;\n        g.SmoothingMode = YDataRendering.YSmoothingMode.HighQuality;\n        let yMarginOffset = 5;\n        /* Step 1, found out margins */\n        // top (bottom) margin: make sure the top(/bottom) number\n        // on Y scale can be draw completely\n        for (let i = 0; i < this._yAxes.length; i++) {\n            if (this._yAxes[i].visible) {\n                let s = g.MeasureString(\"8\", this._yAxes[i].font, 100000);\n                let o = ((s.height + 1) / 2) >> 0;\n                if (yMarginOffset < o)\n                    yMarginOffset = o;\n            }\n        }\n        this.mainViewPort.Tmargin = (this._xAxis.position == XAxis.VrtPosition.TOP) ? 0 : yMarginOffset;\n        this.mainViewPort.Bmargin = (this._xAxis.position == XAxis.VrtPosition.BOTTOM) ? 0 : yMarginOffset;\n        /* Step 2B-2  Draw Legend if it doesn't overlap the data */\n        if (!this._legendPanel.overlap)\n            this.drawLegendPanel(g, UIw, UIh, this.mainViewPort);\n        /* Step 2B-3  Draw annotations if it doesn't overlap the data */\n        this.drawAnnotationPanels(g, this._annotationPanels, UIw, UIh, false, this.mainViewPort);\n        if (this.mainViewPort.Bmargin == 0)\n            this.mainViewPort.Bmargin = 5;\n        if (this.mainViewPort.Tmargin == 0)\n            this.mainViewPort.Tmargin = 5;\n        /* Step 1-A  compute margins dues to X axis  */\n        let h = this.DrawXAxis(this.mainViewPort, g, this._xAxis, true);\n        if (this._xAxis.position == XAxis.VrtPosition.TOP)\n            this.mainViewPort.Tmargin += h;\n        else\n            this.mainViewPort.Bmargin += h;\n        this.mainViewPort.IRLx = this._xAxis.min;\n        /* Step 1-B  Find out all Y axis  start / stop  graduation spacing  */\n        let M;\n        for (let i = 0; i < this._yAxes.length; i++) {\n            M = MinMaxHandler.DefaultValue();\n            for (let k = 0; k < this._series.length; k++) {\n                if ((this._series[k].yAxisIndex == i) && (!this._series[k].disabled)) {\n                    for (let j = 0; j < this._series[k].segments.length; j++) {\n                        M = MinMaxHandler.Combine(M, YGraph.FindMinMax(this._xAxis.min, this._xAxis.max, this._series[k].segments[j].data, this._series[k].segments[j].count));\n                    }\n                }\n            }\n            this._yAxes[i].computeStartAndStep(M);\n        }\n        /* Step 1-B  compute  margins dues to Y axes  */\n        if (this.mainViewPort.Lmargin == 0)\n            this.mainViewPort.Lmargin = 5;\n        if (this.mainViewPort.Rmargin == 0)\n            this.mainViewPort.Rmargin = 5;\n        for (let i = 0; i < this._yAxes.length; i++) {\n            let sw = YGraph.DrawYAxis(this.mainViewPort, g, this._yAxes[i], 0, true);\n            this.mainViewPort.Lmargin += (this._yAxes[i].position == YAxis.HrzPosition.LEFT) ? sw : 0;\n            this.mainViewPort.Rmargin += (this._yAxes[i].position == YAxis.HrzPosition.RIGHT) ? sw : 0;\n        }\n        if (this._navigator.enabled) {\n            if ((lastLmargin != this.mainViewPort.Lmargin) || (lastRmargin != this.mainViewPort.Rmargin)) {\n                //console.log(\"L/R margin changed\");\n                this.navigatorCache = null;\n            }\n            let nh = (this._navigator.relativeheight * this.UIContainer.height / 100.0) >> 0;\n            let ofset = this.xAxis.position == XAxis.VrtPosition.BOTTOM ? h : 0;\n            this._navigator.setPosition(UIw, UIh, this.mainViewPort.Lmargin, this.mainViewPort.Rmargin, this.mainViewPort.Height - nh - this.mainViewPort.Bmargin + ofset, this.mainViewPort.Bmargin - ofset);\n            this.mainViewPort.Bmargin += nh;\n        }\n        /* step 2A draw background */\n        if ((this.lastTopMargin != this.mainViewPort.Tmargin) || (this.lastBottomMargin != this.mainViewPort.Bmargin)) {\n            this._bgBrush = null;\n            this.lastTopMargin = this.mainViewPort.Tmargin;\n            this.lastBottomMargin = this.mainViewPort.Bmargin;\n        }\n        if (this._bgBrush == null) {\n            this._bgBrush = new YDataRendering.YLinearGradientBrush(this._bgColor2, this._bgColor1);\n        } // not sure why colors had to be inverted here\n        g.FillRectangleXYHW(this._bgBrush, this.mainViewPort.Lmargin, this.mainViewPort.Tmargin, this.mainViewPort.Width - this.mainViewPort.Rmargin - this.mainViewPort.Lmargin, this.mainViewPort.Height - this.mainViewPort.Bmargin - this.mainViewPort.Tmargin);\n        if (this._borderThickness > 0) {\n            if (this._borderPen == null)\n                this._borderPen = new YDataRendering.YPen(this._borderColor, this._borderThickness);\n            g.DrawRectangleXYHW(this._borderPen, this.mainViewPort.Lmargin, this.mainViewPort.Tmargin, this.mainViewPort.Width - this.mainViewPort.Rmargin - this.mainViewPort.Lmargin, this.mainViewPort.Height - this.mainViewPort.Bmargin - this.mainViewPort.Tmargin);\n        }\n        /* Step 2B  Draw Y-axes and X axis zones */\n        g.SetClip(new YDataRendering.YRectangle(this.mainViewPort.Lmargin, this.mainViewPort.Tmargin, this.mainViewPort.Width - this.mainViewPort.Rmargin - this.mainViewPort.Lmargin, this.mainViewPort.Height - this.mainViewPort.Bmargin - this.mainViewPort.Tmargin));\n        for (let i = 0; i < this._yAxes.length; i++) {\n            this.DrawYAxisZones(this.mainViewPort, g, this._yAxes[i]);\n        }\n        this.DrawXAxisZones(this.mainViewPort, g, this.xAxis);\n        g.ResetClip();\n        /* step 3 draw X scale */\n        this.DrawXAxis(this.mainViewPort, g, this._xAxis, false);\n        /* step 4 draw Y scale */\n        let leftOffset = 0;\n        let rightOffset = 0;\n        //YDataRendering.YDataRenderer.RendererDebug = true;\n        for (let i = 0; i < this._yAxes.length; i++) {\n            let ww = YGraph.DrawYAxis(this.mainViewPort, g, this._yAxes[i], (this._yAxes[i].position == YAxis.HrzPosition.LEFT) ? leftOffset : rightOffset, false);\n            if (this._yAxes[i].position == YAxis.HrzPosition.LEFT)\n                leftOffset += ww;\n            if (this._yAxes[i].position == YAxis.HrzPosition.RIGHT)\n                rightOffset += ww;\n        }\n        //YDataRendering.YDataRenderer.RendererDebug = false;\n        // step 5 step define data zone\n        //  YDataRendering.YPen mypenb = Pens.Black;\n        //g.DrawRectangle(mypenb, ViewPort1.Lmargin, ViewPort1.Tmargin, ViewPort1.Width - ViewPort1.Rmargin - ViewPort1.Lmargin, ViewPort1.Height - ViewPort1.Bmargin - ViewPort1.Tmargin);\n        g.SetClip(new YDataRendering.YRectangle(this.mainViewPort.Lmargin, this.mainViewPort.Tmargin, this.mainViewPort.Width - this.mainViewPort.Rmargin - this.mainViewPort.Lmargin, this.mainViewPort.Height - this.mainViewPort.Bmargin - this.mainViewPort.Tmargin));\n        // step 6 series rendering\n        this.mainViewPort.zoomx = (this.mainViewPort.Width - this.mainViewPort.Lmargin - this.mainViewPort.Rmargin) / (this._xAxis.max - this._xAxis.min);\n        let mypenb = null;\n        let lineCount = 0;\n        let pointCount = 0;\n        let Bottomleft = YGraph.ViewPortPointToIRL(this.mainViewPort, new YDataRendering.Point(this.mainViewPort.Lmargin, this.mainViewPort.Height - this.mainViewPort.Bmargin));\n        let TopRight = YGraph.ViewPortPointToIRL(this.mainViewPort, new YDataRendering.Point(this.mainViewPort.Width - this.mainViewPort.Rmargin, this.mainViewPort.Tmargin));\n        let xTimeStart = Bottomleft.x;\n        let xTimeEnd = TopRight.x;\n        for (let k = 0; k < this._series.length; k++) {\n            if ((this._series[k].visible) && !(this._series[k].disabled)) { //#ifdef PROFILING\n                //                let perf : number  = performance.now();\n                //                //#endif\n                let scaleIndex = this._series[k].yAxisIndex;\n                mypenb = this._series[k].pen;\n                this.mainViewPort.IRLy = this._yAxes[scaleIndex].startStopStep.dataMin;\n                this._yAxes[this._series[k].yAxisIndex].IRLy = this.mainViewPort.IRLy;\n                let delta = this._yAxes[scaleIndex].startStopStep.dataMax - this._yAxes[scaleIndex].startStopStep.dataMin;\n                if (delta == 0) {\n                    delta = 1;\n                    this.mainViewPort.IRLy -= delta / 2;\n                }\n                this.mainViewPort.zoomy = (this.mainViewPort.Height - this.mainViewPort.Tmargin - this.mainViewPort.Bmargin) / (delta);\n                this._yAxes[this._series[k].yAxisIndex].zoom = this.mainViewPort.zoomy;\n                g.comment(\"** main view-port series \" + k.toString());\n                for (let i = 0; i < this._series[k].segments.length; i++) {\n                    lineCount += YGraph.DoSegmentRendering(this.mainViewPort, g, mypenb, this._series[k].segments[i].data, this._series[k].segments[i].count, xTimeStart, xTimeEnd);\n                    pointCount += this._series[k].segments[i].count;\n                }\n                //#ifdef PROFILING\n                //                console.log(\"Serie \"+k+\" rendering took  \"+(performance.now()-perf).toString()+\"ms (\"+this._series[k].segments.length+\" segments)\");\n                //                //#endif\n            }\n        }\n        // step 7  draw  navigator\n        g.ResetClip();\n        if (this._navigator.enabled) { //#ifdef PROFILING\n            //            let ntime :number =  performance.now();\n            //            //#endif\n            g.comment(\"** navigator **\");\n            let v = this._navigator.viewport;\n            // step 7A, find out Time Range\n            let range = MinMaxHandler.DefaultValue();\n            for (let i = 0; i < this._series.length; i++) {\n                if (!this._series[i].disabled)\n                    range = MinMaxHandler.Combine(range, this._series[i].timeRange);\n            }\n            this._navigator.Xrange = MinMaxHandler.extend(range, 1.05);\n            v.zoomx = (v.Width - v.Lmargin - v.Rmargin) / (this._navigator.Xrange.Max - this._navigator.Xrange.Min);\n            if (((this.lastPointCount != pointCount)\n                && (!this.mainViewPort.Capture) && (!this._navigator.Capture)) // performance : do not redraw navigator when a drag operation is running.\n                || (this.navigatorCache == null) || (g instanceof YDataRendering.YGraphicsSVG)) {\n                g.comment(\"Redraw navigator\");\n                if (this.navigatorCache != null)\n                    this.navigatorCache = null; //.Dispose();\n                this.navigatorCache = document.createElement('canvas'); //  new HTMLCanvasElement(); //v.Width, v.Height, g.graphics); FIXME?\n                //document.body.appendChild(this.navigatorCache); // debug\n                this.navigatorCache.width = v.Width;\n                this.navigatorCache.height = v.Height;\n                this.lastPointCount = pointCount;\n                let ng;\n                if (g instanceof YDataRendering.YGraphicsSVG) {\n                    ng = g;\n                }\n                else {\n                    ng = new YDataRendering.YGraphics(this.navigatorCache, v.Width, v.Height, 90);\n                }\n                //ng.SetClip(new Rectangle(v.Lmargin, v.Tmargin, v.Width - v.Rmargin - v.Lmargin, v.Height - v.Bmargin - v.Tmargin));\n                //ng.ResetClip();\n                ng.FillRectangleXYHW(this._navigator.bgBrush, v.Lmargin, v.Tmargin, v.Width - v.Rmargin - v.Lmargin, v.Height - v.Bmargin - v.Tmargin);\n                if ((this.xAxis.zones.length > 0) && this._navigator.showXAxisZones) {\n                    let delta = this._navigator.Xrange.Max - this._navigator.Xrange.Min;\n                    let XZoom = (delta) / (v.Width - v.Lmargin - v.Rmargin);\n                    for (let i = 0; i < this.xAxis.zones.length; i++) {\n                        if (this.xAxis.zones[i].visible) {\n                            let min = this.xAxis.zones[i].min;\n                            let max = this.xAxis.zones[i].max;\n                            if (isNaN(min))\n                                min = this._navigator.Xrange.Min;\n                            if (isNaN(max))\n                                max = this._navigator.Xrange.Max;\n                            ng.FillRectangleXYHW(this.xAxis.zones[i].zoneBrush, v.Lmargin + ((min - this._navigator.Xrange.Min) / XZoom) >> 0, v.Tmargin >> 0, ((max - min) / XZoom) >> 0, v.Height - v.Bmargin - v.Tmargin);\n                        }\n                    }\n                }\n                if ((MinMaxHandler.isDefined(this._navigator.Xrange)) && ((this._navigator.Xrange.Max - this._navigator.Xrange.Min) > 0)) // if (Xrange<=0) then nothing to draw\n                 { // step 7B, draw series\n                    let Min;\n                    let Max;\n                    v.IRLx = this._navigator.Xrange.Min;\n                    let dontSticktoBorderZoom = 4.0 / (v.Height - v.Bmargin - v.Tmargin);\n                    let Bottomleft = YGraph.ViewPortPointToIRL(v, new YDataRendering.Point(v.Lmargin, v.Height - v.Bmargin));\n                    let TopRight = YGraph.ViewPortPointToIRL(v, new YDataRendering.Point(v.Width - v.Rmargin, v.Tmargin));\n                    let xTimeStart = Bottomleft.x;\n                    let xTimeEnd = TopRight.x;\n                    if (this._navigator.yAxisHandling == Navigator.YAxisHandling.AUTO) { // Automatic yAxis handling\n                        for (let k = 0; k < this._series.length; k++) {\n                            if (!this._series[k].disabled) {\n                                ng.comment(\"** navigator series \" + k.toString());\n                                v.IRLy = this._series[k].valueRange.Min;\n                                let yAxisIndex = this._series[k].yAxisIndex;\n                                mypenb = this._series[k].navigatorpen;\n                                Min = this._series[k].valueRange.Min;\n                                Max = this._series[k].valueRange.Max;\n                                if (Max - Min <= 0) {\n                                    v.IRLy = Min - 0.5;\n                                    Max = Min + 0.5;\n                                }\n                                else {\n                                    let delta = Max - Min;\n                                    Min -= delta * dontSticktoBorderZoom; // 0.025;\n                                    Max += delta * dontSticktoBorderZoom; // 0.025;\n                                }\n                                v.IRLy = Min;\n                                v.zoomy = (v.Height - v.Tmargin - v.Bmargin) / (Max - Min);\n                                for (let i = 0; i < this._series[k].segments.length; i++) {\n                                    lineCount += YGraph.DoSegmentRendering(v, ng, mypenb, this._series[k].segments[i].data, this._series[k].segments[i].count, xTimeStart, xTimeEnd);\n                                }\n                            }\n                        }\n                    }\n                    else { //  yAxis handling inherited from main view-port settings\n                        for (let i = 0; i < this._yAxes.length; i++) { // find out data MinMax\n                            let Yrange = MinMaxHandler.DefaultValue();\n                            for (let j = 0; j < this._series.length; j++) {\n                                if ((this._series[j].yAxisIndex == i) && (!this._series[j].disabled)) {\n                                    Yrange = MinMaxHandler.Combine(Yrange, this._series[j].valueRange);\n                                }\n                            }\n                            Yrange = MinMaxHandler.extend(Yrange, 1 + 2 * dontSticktoBorderZoom);\n                            Min = this._yAxes[i].min;\n                            if (isNaN(Min))\n                                Min = Yrange.Min;\n                            Max = this._yAxes[i].max;\n                            if (isNaN(Max))\n                                Max = Yrange.Max;\n                            if (Number.isNaN(Min)) {\n                                Min = 0.0;\n                                Max = 1.0;\n                            }\n                            if (Max - Min <= 0) {\n                                Min = Min - 0.5;\n                                Max = Min + 0.5;\n                            }\n                            v.IRLy = Min;\n                            v.zoomy = (v.Height - v.Tmargin - v.Bmargin) / (Max - Min);\n                            for (let j = 0; j < this._series.length; j++) {\n                                if ((this._series[j].yAxisIndex == i) && (!this._series[j].disabled) && (this._series[j].visible)) {\n                                    ng.comment(\"** navigator series \" + j.toString());\n                                    mypenb = this._series[j].navigatorpen;\n                                    for (let k = 0; k < this._series[j].segments.length; k++) {\n                                        lineCount += YGraph.DoSegmentRendering(v, ng, mypenb, this._series[j].segments[k].data, this._series[j].segments[k].count, xTimeStart, xTimeEnd);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    for (let i = 0; i < this._xAxis.markers.length; i++) {\n                        if (this._xAxis.markers[i].enabled) {\n                            let p = YGraph.IRLPointToViewPort(v, new pointXY(this._xAxis.markers[i].xposition + (this._xAxis.markers[i].timereference == TimeConverter.TimeReference.RELATIVE ? this._xAxis.zeroTime : 0), 0));\n                            ng.DrawLineXY(this._xAxis.markers[i].navigatorpen, p.X, v.Tmargin, p.X, v.Height - v.Bmargin);\n                        }\n                    }\n                    if (this._navigator.borderThickness > 0) {\n                        ng.DrawLineXY(this._navigator.borderPen, v.Lmargin, v.Tmargin, v.Width - v.Rmargin, v.Tmargin);\n                    }\n                    // step 7C, draw Scale\n                    this.DrawMonitorXAxis(v, ng, this._navigator.Xrange, this.xAxis.labelFormat);\n                    this._navigator.setIRLPosition(v.IRLx, v.IRLy, v.zoomx, v.zoomy);\n                }\n                if (!(g instanceof YDataRendering.YGraphicsSVG))\n                    ng.Dispose();\n            }\n            // set  7E, copy cache to display\n            let cacheW = v.Width - v.Rmargin - v.Lmargin + 1;\n            let cacheH = v.Width - v.Rmargin - v.Lmargin + 1;\n            let rectsrc = new YDataRendering.YRectangle(v.Lmargin, v.Tmargin - 1, cacheW, cacheH);\n            let rectdst = new YDataRendering.YRectangle(v.Lmargin, v.Tmargin, cacheW, cacheH);\n            g.SetClip(rectdst);\n            if (!(g instanceof YDataRendering.YGraphicsSVG)) {\n                //g.SetClip(rect);\n                //let  p : YDataRendering.YPen = new YDataRendering.YPen( YDataRendering.YColor.Blue,1);\n                //g.DrawLineXY(p,0,0,this.UIContainer.width,this.UIContainer.height);\n                //g.DrawLineXY(p,this.UIContainer.width,0,0,this.UIContainer.height);\n                g.DrawImage(this.navigatorCache, rectsrc, rectdst, 2 /* YDataRendering.YGraphicsUnit.Pixel */);\n                // g.ResetClip();\n            }\n            //navigatorCache.Save(\"C:\\\\tmp\\\\t.png\", ImageFormat.Png);\n            // set  7E, draw Cursor\n            if (this._navigator.borderThickness > 0) {\n                g.DrawLineXY(this._navigator.borderPen, v.Lmargin + 1, v.Tmargin, v.Lmargin + 1, v.Height - v.Bmargin - 1);\n                g.DrawLineXY(this._navigator.borderPen, v.Width - v.Rmargin, v.Tmargin, v.Width - v.Rmargin, v.Height - v.Bmargin - 1);\n                g.DrawLineXY(this._navigator.borderPen, v.Lmargin + 1, v.Tmargin, v.Width - v.Rmargin, v.Tmargin);\n            }\n            let IRLCursorStart = YGraph.ViewPortPointToIRL(this.mainViewPort, new YDataRendering.Point(this.mainViewPort.Lmargin, 0));\n            let IRLCursorEnd = YGraph.ViewPortPointToIRL(this.mainViewPort, new YDataRendering.Point(this.mainViewPort.Width - this.mainViewPort.Rmargin, 0));\n            let CursorStart = YGraph.IRLPointToViewPort(this._navigator.viewport, new pointXY(IRLCursorStart.x, 0));\n            let CursorEnd = YGraph.IRLPointToViewPort(this._navigator.viewport, new pointXY(IRLCursorEnd.x, 0));\n            g.FillRectangle(this._navigator.cursorBrush, new YDataRendering.YRectangle(CursorStart.X - 1, v.Tmargin, CursorEnd.X - CursorStart.X + 2, v.Height - v.Bmargin - v.Tmargin - 1));\n            g.DrawLineXY(this._navigator.cursorBorderPen, (CursorStart.X - 1) >> 0, (v.Tmargin) >> 0, (CursorStart.X - 1) >> 0, (v.Height - v.Bmargin) - 1);\n            g.DrawLineXY(this._navigator.cursorBorderPen, (CursorEnd.X + 1) >> 0, (v.Tmargin) >> 0, (CursorEnd.X + 1) >> 0, (v.Height - v.Bmargin) - 1);\n            g.ResetClip();\n            //#ifdef PROFILING\n            //            console.log(\"Navigator rendering took \"+(performance.now()-ntime).toString()+\"ms\")\n            //            //#endif\n        }\n        if (this._legendPanel.overlap)\n            this.drawLegendPanel(g, UIw, UIh, this.mainViewPort);\n        g.TextRenderingHint = YDataRendering.YTextRenderingHint.SingleBitPerPixelGridFit;\n        this.DrawMarkers(this.mainViewPort, g, this.xAxis, UIw, UIh);\n        this.drawAnnotationPanels(g, this._annotationPanels, UIw, UIh, true, this.mainViewPort);\n        this.DrawDataPanels(this.mainViewPort, g, this.xAxis, this._yAxes, UIw, UIh);\n        this.DrawDataTracker(g, UIw, UIh, this.xAxis);\n        this.DrawMessagePanels(g, UIw, UIh);\n        /*\n                let p: YDataRendering.Point | null = this.mouseLocalPosition();\n                 if (p != null)\n                 {    let pen = new YPen(YColor.Red, 1);\n                     g.DrawLineXY(pen, p.X - 5, p.Y, p.X + 5, p.Y);\n                     g.DrawLineXY(pen, p.X, p.Y - 5, p.X, p.Y + 5);\n                 }\n        */\n        //console.log(\"END OF GRAPH\")\n        //#ifdef PROFILING\n        //\n        //        console.log(\"graph rendering took \"+ ( performance.now()-RenderTime ).toString()+\"ms\");\n        //        //#endif\n        return 0;\n    }\n    KeyDown(sender, e) {\n        if (e.code == \"ArrowLeft\") {\n            let delta = 0.2 * (this._xAxis.max - this._xAxis.min);\n            this._xAxis.set_minMax(this._xAxis.min - delta, this._xAxis.max - delta);\n            this.redraw();\n        }\n        if (e.code == \"ArrowRight\") {\n            let delta = 0.2 * (this._xAxis.max - this._xAxis.min);\n            this._xAxis.set_minMax(this._xAxis.min + delta, this._xAxis.max + delta);\n            this.redraw();\n        }\n        if (e.code == \"ArrowUp\") {\n            this.mouseWheel(new YDataRendering.Point(this.UIContainer.width >> 1, this.UIContainer.height >> 1), 10);\n        }\n        if (e.code == \"ArrowDown\") {\n            this.mouseWheel(new YDataRendering.Point(this.UIContainer.width >> 1, this.UIContainer.height >> 1), -10);\n        }\n    }\n    mouseWheel(pos, delta) {\n        let ZoomFactor = Math.pow(1.25, delta / 120); // 120 is totally arbitrary\n        let NextZoomX = this.mainViewPort.zoomx * ZoomFactor;\n        if ((NextZoomX > this.mainViewPort.zoomx) && (NextZoomX > 1000))\n            return;\n        let currentRange = this._xAxis.max - this._xAxis.min;\n        if ((currentRange / ZoomFactor) > 25 * 365.0 * 86400.0)\n            return; //  more zoom out may cause overflows, never-ending loops and freeze the browser\n        this.mainViewPort.IRLx += ((pos.X - this.mainViewPort.Lmargin) / this.mainViewPort.zoomx) - ((pos.X - this.mainViewPort.Lmargin) / NextZoomX);\n        let range = this._xAxis.max - this._xAxis.min;\n        this._xAxis.set_minMax(this.mainViewPort.IRLx, this.mainViewPort.IRLx + range / ZoomFactor);\n        this.mainViewPort.zoomx = NextZoomX;\n        this.redraw();\n    }\n    mouseWheelEvent(sender, e) {\n        let p = this.Scr2ElmMatrix.multiplyByV(YDataRendering.Vector3.FromXYCoord(e.pageX, e.pageY)).toPoint();\n        let eX = p.X;\n        let eY = p.Y;\n        this.mouseWheel(new YDataRendering.Point(eX, eY), e.deltaY > 0 ? -150 : 150);\n        e.preventDefault();\n    }\n}\nYGraph._defaultVerticalDragZoomEnabled = false;\nYGraph.captureCursor = null;\n", "/*\n*   Yocto-Visualization (for web), a free web-based application\n*   to visualize Yoctopuce Sensors.\n*\n*  Solid gauge widget renderer\n*\n*   - - - - - - - - - License information: - - - - - - - - -\n*\n*  Copyright (C) 2021 and beyond by Yoctopuce Sarl, Switzerland.\n*\n*  Yoctopuce Sarl (hereafter Licensor) grants to you a perpetual\n*  non-exclusive license to use, modify, copy and integrate this\n*  file into your software for the sole purpose of interfacing\n*  with Yoctopuce products.\n*\n*  You may reproduce and distribute copies of this file in\n*  source or object form, as long as the sole purpose of this\n*  code is to interface with Yoctopuce products. You must retain\n*  this notice in the distributed source file.\n*\n*  You should refer to Yoctopuce General Terms and Conditions\n*  for additional information regarding your rights and\n*  obligations.\n*\n*  THE SOFTWARE AND DOCUMENTATION ARE PROVIDED \"AS IS\" WITHOUT\n*  WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING\n*  WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, FITNESS\n*  FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO\n*  EVENT SHALL LICENSOR BE LIABLE FOR ANY INCIDENTAL, SPECIAL,\n*  INDIRECT OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA,\n*  COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY OR\n*  SERVICES, ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT\n*  LIMITED TO ANY DEFENSE THEREOF), ANY CLAIMS FOR INDEMNITY OR\n*  CONTRIBUTION, OR OTHER SIMILAR COSTS, WHETHER ASSERTED ON THE\n*  BASIS OF CONTRACT, TORT (INCLUDING NEGLIGENCE), BREACH OF\n*  WARRANTY, OR OTHERWISE.\n*/\nimport * as YDataRendering from \"./YDataRendererCommon.js\";\nclass DrawPrameters {\n    constructor() {\n        this.outerRadius = 0;\n        this.innerRadius = 0;\n        this.angleStart = 0;\n        this.angleEnd = 0;\n        this.ycenter = 0;\n        this.xcenter = 0;\n        this.heightTop = 0;\n        this.heightBottom = 0;\n        this.valueRectangle = new YDataRendering.YRectangle(0, 0, 0, 0);\n        this.valueFormat = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\n        this.minValueRectangle = new YDataRendering.YRectangle(0, 0, 0, 0);\n        this.minValueFormat = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\n        this.maxValueRectangle = new YDataRendering.YRectangle(0, 0, 0, 0);\n        this.maxValueFormat = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\n        this.minValue = \"\";\n        this.maxValue = \"\";\n        this.value = \"\";\n    }\n}\nexport class YSolidGauge extends YDataRendering.YDataRenderer {\n    get min() { return this._min; }\n    set min(value) {\n        if ((value >= this._max) && (!YDataRendering.YDataRenderer.minMaxCheckDisabled)) {\n            throw new RangeError(\"Min cannot be greater than max (\" + this._max.toString() + \")\");\n        }\n        this._min = value;\n        if (this._shownValue < this._min)\n            this._shownValue = this._min;\n        this.redraw();\n    }\n    get max() { return this._max; }\n    set max(value) {\n        if ((value <= this._min) && (!YDataRendering.YDataRenderer.minMaxCheckDisabled)) {\n            throw new RangeError(\"Max cannot be less than min (\" + this._min.toString() + \")\");\n        }\n        this._max = value;\n        if (this._shownValue > this._max)\n            this._shownValue = this._max;\n        this.redraw();\n    }\n    get borderpen() {\n        if (this._borderpen == null) {\n            this._borderpen = new YDataRendering.YPen(this._borderColor, this._borderThickness);\n            this._borderpen.startCap = 1 /* YDataRendering.YPen.LineCap.Square */;\n            this._borderpen.endCap = 1 /* YDataRendering.YPen.LineCap.Square */;\n        }\n        return this._borderpen;\n    }\n    get borderColor() { return this._borderColor; }\n    set borderColor(value) {\n        this._borderColor = value;\n        this._borderpen = null;\n        this.redraw();\n    }\n    get backgroundColor1() { return this._backgroundColor1; }\n    set backgroundColor1(value) {\n        this._backgroundColor1 = value;\n        this._bgBrush = null;\n        this.redraw();\n    }\n    get backgroundColor2() { return this._backgroundColor2; }\n    set backgroundColor2(value) {\n        this._backgroundColor2 = value;\n        this._bgBrush = null;\n        this.redraw();\n    }\n    get borderThickness() { return this._borderThickness; }\n    set borderThickness(value) {\n        if (value < 0)\n            throw new RangeError(\"Thickness must be a positive value\");\n        this._borderThickness = value;\n        this._borderpen = null;\n        this._path = null;\n        this.redraw();\n    }\n    get valueFormater() { return this._valueFormater; }\n    set valueFormater(value) {\n        this._valueFormater = value;\n        this.redraw();\n    }\n    get minmaxFormater() { return this._minmaxFormater; }\n    set minmaxFormater(value) {\n        this._minmaxFormater = value;\n        this.redraw();\n    }\n    get thickness() { return this._thickness; }\n    set thickness(value) {\n        if (value < 0)\n            throw new RangeError(\"Thickness must be a positive value\");\n        this._thickness = Math.max(Math.min(value, 80), 1);\n        this._path = null;\n        this.redraw();\n    }\n    get maxSpeed() { return this._maxSpeed; }\n    set maxSpeed(value) {\n        if (value <= 0)\n            throw new RangeError(\"Speed must be a positive value\");\n        this._maxSpeed = value;\n    }\n    get value() { return this._value; }\n    set value(value) {\n        this._value = value;\n        this.redraw();\n    }\n    get color1() { return this._color1; }\n    set color1(value) {\n        this._color1 = value;\n        this.redraw();\n    }\n    get color2() { return this._color2; }\n    set color2(value) {\n        this._color2 = value;\n        this.redraw();\n    }\n    get font() { return this._font; }\n    get minMaxFont() { return this._minMaxFont; }\n    get showMinMax() { return this._showMinMax; }\n    set showMinMax(value) {\n        this._showMinMax = value;\n        this._path = null;\n        this.redraw();\n    }\n    get displayMode() { return this._displayMode; }\n    set displayMode(value) {\n        this._displayMode = value;\n        this._path = null;\n        this._bgBrush = null;\n        this.redraw();\n    }\n    FontsizeChange(source) { this._path = null; }\n    constructor(UIContainer, mode, logFunction) {\n        super(UIContainer, logFunction);\n        this._shownValue = 0;\n        this._min = 0;\n        this._max = 100;\n        this.SegmentMaxLength = 8;\n        this.mainViewPort = new YDataRendering.ViewPortSettings();\n        this._borderpen = null;\n        this._borderColor = YDataRendering.YColor.Black;\n        this._bgBrush = null;\n        this._backgroundColor1 = YDataRendering.YColor.FromArgb(255, 240, 240, 240);\n        this._backgroundColor2 = YDataRendering.YColor.FromArgb(255, 200, 200, 200);\n        this._borderThickness = 5;\n        this._valueFormater = null;\n        this._minmaxFormater = null;\n        this._thickness = 25;\n        this._maxSpeed = 0.1;\n        this._value = 0;\n        this._color1 = YDataRendering.YColor.Green;\n        this._color2 = YDataRendering.YColor.Red;\n        this._font = null;\n        this._minMaxFont = null;\n        this._showMinMax = true;\n        this._path = null;\n        this.lastDrawParameters = new DrawPrameters();\n        this._displayMode = YSolidGauge.DisplayMode.DISPLAY90;\n        this._minMaxFont = new YDataRendering.YFont(this, this, Math.min(UIContainer.width, UIContainer.height) / 15, () => { this.FontsizeChange(this._minMaxFont); });\n        this._displayMode = mode;\n        this._font = new YDataRendering.YFont(this, this, Math.min(UIContainer.width, UIContainer.height) / 5, null);\n        this.resizeRule = YDataRendering.Proportional.ResizeRule.RELATIVETOBOTH;\n        let g = new YDataRendering.YGraphics(UIContainer, UIContainer.width, UIContainer.height, 90);\n        let p = this.ComputeDrawParameters(g, UIContainer.width, UIContainer.height, this.mainViewPort);\n        g.Dispose();\n    }\n    clearCachedObjects() {\n        this._bgBrush = null;\n        this._path = null;\n    }\n    ComputeDrawParameters(g, UIw, UIh, mainViewPort) {\n        UIw -= mainViewPort.Lmargin + mainViewPort.Rmargin;\n        UIh -= mainViewPort.Tmargin + mainViewPort.Bmargin;\n        let w = UIw - 5 - this._borderThickness;\n        let h = UIh - 5 - this._borderThickness;\n        let xcenter = UIw / 2;\n        let outerRadius = 0;\n        let angleStart = 0;\n        let angleEnd = 0;\n        let ycenter = 0;\n        let ValueRectangle = new YDataRendering.YRectangle(0, 0, 0, 0);\n        let valueFormat = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\n        let innerRadius = 0;\n        let minMaxHeight = 0;\n        let s1 = new YDataRendering.YSizeF(null, \"\");\n        let s2 = new YDataRendering.YSizeF(null, \"\");\n        this.lastDrawParameters.value = this._valueFormater == null ? this._value.toFixed(0) : this._valueFormater(this, this._value);\n        if (this._showMinMax) {\n            this.lastDrawParameters.minValue = this._minmaxFormater == null ? this._min.toFixed(0) : this._minmaxFormater(this, this._min);\n            this.lastDrawParameters.maxValue = this._minmaxFormater == null ? this._max.toFixed(0) : this._minmaxFormater(this, this._max);\n            s1 = g.MeasureString(this.lastDrawParameters.minValue, this._minMaxFont, 100000);\n            s2 = g.MeasureString(this.lastDrawParameters.maxValue, this._minMaxFont, 100000);\n            this.lastDrawParameters.minValueFormat = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\n            this.lastDrawParameters.maxValueFormat = new YDataRendering.YStringFormat(16384 /* YDataRendering.YStringFormat.StringFormatFlags.NoClip */);\n            minMaxHeight = s1.height;\n            if (s2.height > minMaxHeight)\n                minMaxHeight = s2.height;\n        }\n        switch (this._displayMode) {\n            case YSolidGauge.DisplayMode.DISPLAY90:\n                h = h - minMaxHeight;\n                w = w - minMaxHeight;\n                outerRadius = w;\n                if (outerRadius > h - this._borderThickness)\n                    outerRadius = h - this.borderThickness;\n                if (outerRadius > w - this.borderThickness)\n                    outerRadius = w - this.borderThickness;\n                angleStart = Math.PI / 2;\n                angleEnd = Math.PI;\n                this.lastDrawParameters.heightTop = outerRadius;\n                this.lastDrawParameters.heightBottom = 0;\n                ycenter = mainViewPort.Tmargin + h;\n                xcenter = mainViewPort.Lmargin + UIw / 2 + outerRadius / 2 - minMaxHeight + this._borderThickness;\n                innerRadius = outerRadius * (100 - this._thickness) / 100;\n                ValueRectangle = new YDataRendering.YRectangle((xcenter - innerRadius) >> 0, (ycenter - innerRadius) >> 0, innerRadius >> 0, innerRadius >> 0);\n                valueFormat.Alignment = 2 /* YDataRendering.YStringFormat.StringAlignment.Far */;\n                valueFormat.LineAlignment = 2 /* YDataRendering.YStringFormat.StringAlignment.Far */;\n                if (this._showMinMax) {\n                    this.lastDrawParameters.minValueRectangle = new YDataRendering.YRectangle((xcenter - ((outerRadius + innerRadius + s1.width) / 2)) >> 0, (ycenter + this._borderThickness) >> 0, (s1.width + 1) >> 0, (minMaxHeight + 1) >> 0);\n                    this.lastDrawParameters.minValueFormat.Alignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\n                    this.lastDrawParameters.minValueFormat.LineAlignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\n                    this.lastDrawParameters.maxValueRectangle = new YDataRendering.YRectangle((xcenter + this._borderThickness) >> 0, (ycenter - outerRadius + (outerRadius - innerRadius - s2.width) / 2) >> 0, (minMaxHeight + 1) >> 0, (s2.width + 1) >> 0);\n                    this.lastDrawParameters.maxValueFormat.Alignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\n                    this.lastDrawParameters.maxValueFormat.LineAlignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\n                    this.lastDrawParameters.maxValueFormat.FormatFlags = 2 /* YDataRendering.YStringFormat.StringFormatFlags.DirectionVertical */;\n                }\n                break;\n            case YSolidGauge.DisplayMode.DISPLAY180:\n                h = h - minMaxHeight;\n                let s0 = new YDataRendering.YSizeF(null, \"\");\n                s0 = g.MeasureString(this.lastDrawParameters.value, this._font, 100000);\n                outerRadius = (w / 2) - this.borderThickness;\n                if (outerRadius > h - this._borderThickness)\n                    outerRadius = h - this._borderThickness;\n                if (outerRadius > w - this.borderThickness)\n                    outerRadius = w - this.borderThickness;\n                angleStart = 0;\n                angleEnd = Math.PI;\n                ycenter = outerRadius + this._borderThickness / 2;\n                innerRadius = outerRadius * (100 - this._thickness) / 100;\n                this.lastDrawParameters.heightTop = outerRadius;\n                this.lastDrawParameters.heightBottom = 0;\n                ValueRectangle = new YDataRendering.YRectangle((xcenter - innerRadius) >> 0, (ycenter + this._borderThickness + minMaxHeight - s0.height) >> 0, (2 * innerRadius) >> 0, (s0.height + 1) >> 0);\n                valueFormat.Alignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\n                valueFormat.LineAlignment = 2 /* YDataRendering.YStringFormat.StringAlignment.Far */;\n                if (this._showMinMax) {\n                    this.lastDrawParameters.minValueRectangle = new YDataRendering.YRectangle((xcenter - ((outerRadius + innerRadius + s1.width) / 2)) >> 0, (ycenter + this._borderThickness) >> 0, (s1.width + 1) >> 0, (minMaxHeight + 1) >> 0);\n                    this.lastDrawParameters.minValueFormat.Alignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\n                    this.lastDrawParameters.minValueFormat.LineAlignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\n                    this.lastDrawParameters.maxValueRectangle = new YDataRendering.YRectangle((xcenter + ((outerRadius + innerRadius - s2.width) / 2)) >> 0, (ycenter + this._borderThickness) >> 0, (s2.width + 1) >> 0, (minMaxHeight + 1) >> 0);\n                    this.lastDrawParameters.maxValueFormat.Alignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\n                    this.lastDrawParameters.maxValueFormat.LineAlignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\n                }\n                break;\n            case YSolidGauge.DisplayMode.DISPLAY270:\n                outerRadius = w;\n                if (outerRadius > h / 2)\n                    outerRadius = h / 2;\n                if (outerRadius > w / 2)\n                    outerRadius = w / 2;\n                this.lastDrawParameters.heightTop = outerRadius;\n                this.lastDrawParameters.heightBottom = outerRadius;\n                angleStart = 0;\n                angleEnd = 3 * Math.PI / 2;\n                ycenter = mainViewPort.Tmargin + UIh / 2;\n                innerRadius = outerRadius * (100 - this._thickness) / 100;\n                ValueRectangle = new YDataRendering.YRectangle((xcenter - innerRadius) >> 0, (ycenter - innerRadius) >> 0, (2 * innerRadius) >> 0, (2 * innerRadius) >> 0);\n                valueFormat.Alignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\n                valueFormat.LineAlignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\n                if (this._showMinMax) {\n                    this.lastDrawParameters.minValueRectangle = new YDataRendering.YRectangle((xcenter + this._borderThickness) >> 0, (ycenter + (innerRadius + innerRadius + s1.height) / 2) >> 0, (s1.width + 1) >> 0, (s1.height + 1) >> 0);\n                    this.lastDrawParameters.minValueFormat.Alignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\n                    this.lastDrawParameters.minValueFormat.LineAlignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\n                    this.lastDrawParameters.maxValueRectangle = new YDataRendering.YRectangle((xcenter + (innerRadius + innerRadius + s1.height) / 2) >> 0, (ycenter + this._borderThickness) >> 0, (s2.height + 1) >> 0, (s2.width + 1) >> 0);\n                    this.lastDrawParameters.maxValueFormat.Alignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\n                    this.lastDrawParameters.maxValueFormat.LineAlignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\n                    this.lastDrawParameters.maxValueFormat.FormatFlags = 2 /* YDataRendering.YStringFormat.StringFormatFlags.DirectionVertical */;\n                }\n                break;\n            case YSolidGauge.DisplayMode.DISPLAY360:\n                outerRadius = w;\n                if (outerRadius > (h / .85) / 2)\n                    outerRadius = (h / .85) / 2;\n                if (outerRadius > w / 2)\n                    outerRadius = w / 2;\n                this.lastDrawParameters.heightTop = outerRadius;\n                this.lastDrawParameters.heightBottom = outerRadius * 0.7;\n                ycenter = mainViewPort.Tmargin + outerRadius + this._borderThickness / 2;\n                angleStart = -Math.PI / 4;\n                angleEnd = 5 * Math.PI / 4;\n                innerRadius = outerRadius * (100 - this._thickness) / 100;\n                ValueRectangle = new YDataRendering.YRectangle((xcenter - innerRadius) >> 0, (ycenter - innerRadius) >> 0, (2 * innerRadius) >> 0, (2 * innerRadius) >> 0);\n                valueFormat.Alignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\n                valueFormat.LineAlignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\n                if (this._showMinMax) {\n                    let dx = Math.abs(innerRadius * Math.cos(angleStart));\n                    let dy = innerRadius * Math.abs(Math.sin(angleStart)) + 2 * Math.abs((outerRadius - innerRadius) * Math.sin(angleStart) / 3);\n                    this.lastDrawParameters.minValueRectangle = new YDataRendering.YRectangle((xcenter - dx) >> 0, (ycenter + dy - minMaxHeight / 2) >> 0, (s1.width + 1) >> 0, (minMaxHeight + 1) >> 0);\n                    this.lastDrawParameters.minValueFormat.Alignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\n                    this.lastDrawParameters.minValueFormat.LineAlignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\n                    this.lastDrawParameters.maxValueRectangle = new YDataRendering.YRectangle((xcenter + dx - s2.width) >> 0, (ycenter + dy - minMaxHeight / 2) >> 0, (s2.width + 1) >> 0, (minMaxHeight + 1) >> 0);\n                    this.lastDrawParameters.maxValueFormat.Alignment = 0 /* YDataRendering.YStringFormat.StringAlignment.Near */;\n                    this.lastDrawParameters.maxValueFormat.LineAlignment = 1 /* YDataRendering.YStringFormat.StringAlignment.Center */;\n                }\n                break;\n        }\n        this.lastDrawParameters.outerRadius = outerRadius;\n        this.lastDrawParameters.innerRadius = innerRadius;\n        this.lastDrawParameters.angleStart = angleStart;\n        this.lastDrawParameters.angleEnd = angleEnd;\n        this.lastDrawParameters.ycenter = ycenter;\n        this.lastDrawParameters.xcenter = xcenter;\n        this.lastDrawParameters.valueRectangle = ValueRectangle;\n        this.lastDrawParameters.valueFormat = valueFormat;\n        return this.lastDrawParameters;\n    }\n    Render(g, w, h) {\n        this.mainViewPort = new YDataRendering.ViewPortSettings();\n        g.SmoothingMode = YDataRendering.YSmoothingMode.HighQuality;\n        g.TextRenderingHint = YDataRendering.YTextRenderingHint.AntiAlias;\n        this.drawAnnotationPanels(g, this._annotationPanels, w, h, false, this.mainViewPort);\n        let p = this.ComputeDrawParameters(g, w, h, this.mainViewPort);\n        if (this._path == null) {\n            let outterlength = (2 * p.outerRadius * Math.PI) * (p.angleEnd - p.angleStart) / (2 * Math.PI);\n            let stepCount = (outterlength / this.SegmentMaxLength) >> 0;\n            let stepsize = (p.angleEnd - p.angleStart) / stepCount;\n            this._path = new Array(2 * (stepCount + 1));\n            let n = 0;\n            for (let i = 0; i <= stepCount; i++) {\n                let a = p.angleStart + i * stepsize;\n                this._path[n++] = new YDataRendering.PointF((p.xcenter + p.outerRadius * Math.cos(a)), (p.ycenter - p.outerRadius * Math.sin(a)));\n            }\n            for (let i = stepCount; i >= 0; i--) {\n                let a = p.angleStart + i * stepsize;\n                this._path[n++] = new YDataRendering.PointF((p.xcenter + p.innerRadius * Math.cos(a)), (p.ycenter - p.innerRadius * Math.sin(a)));\n            }\n        }\n        if (this._bgBrush == null) {\n            this._bgBrush = new YDataRendering.YLinearGradientBrush(this._backgroundColor1, this._backgroundColor2);\n        }\n        if (this._borderpen == null) {\n            this._borderpen = new YDataRendering.YPen(this._borderColor, this._borderThickness);\n            this._borderpen.linejoin = YDataRendering.YPen.LineJoin.Round;\n        }\n        g.FillPolygon(this._bgBrush, this._path);\n        if (this._shownValue != this._value) {\n            let step = this._maxSpeed * (this._max - this._min) / 100;\n            if (Math.abs(this._value - this._shownValue) < step) {\n                this._shownValue = this._value;\n            }\n            else if (this._shownValue < this._value) {\n                this._shownValue += step;\n            }\n            else {\n                this._shownValue -= step;\n            }\n        }\n        let v = this._shownValue;\n        if (v >= this._min) {\n            if (v > this._max)\n                v = this._max;\n            let valueFactor = (v - this._min) / (this._max - this.min);\n            let angleValue = p.angleStart + (p.angleEnd - p.angleStart) * valueFactor;\n            let outterlength = (2 * p.outerRadius * Math.PI) * (angleValue - p.angleStart) / (2 * Math.PI);\n            let stepCount = (outterlength / this.SegmentMaxLength) >> 0;\n            let stepsize = (angleValue - p.angleStart) / stepCount;\n            let pt = new Array(2 * (stepCount + 1));\n            let n = 0;\n            for (let i = 0; i <= stepCount; i++) {\n                let a = p.angleEnd - i * stepsize;\n                pt[n++] = new YDataRendering.PointF((p.xcenter + p.outerRadius * Math.cos(a)), (p.ycenter - p.outerRadius * Math.sin(a)));\n            }\n            for (let i = stepCount; i >= 0; i--) {\n                let a = p.angleEnd - i * stepsize;\n                pt[n++] = new YDataRendering.PointF((p.xcenter + p.innerRadius * Math.cos(a)), (p.ycenter - p.innerRadius * Math.sin(a)));\n            }\n            let b;\n            if (this._color1 == this._color2) {\n                b = new YDataRendering.YSolidBrush(this._color1);\n            }\n            else {\n                let A1 = this._color1.alpha;\n                let H1 = this._color1.hue;\n                let S1 = this._color1.saturation;\n                let L1 = this._color1.luminosity;\n                let A2 = this._color2.alpha;\n                let H2 = this._color2.hue;\n                let S2 = this._color2.saturation;\n                let L2 = this._color2.luminosity;\n                let A = (Math.round(A1 + (A2 - A1) * valueFactor) >> 0) & 0xff;\n                let H;\n                if (Math.abs(H2 - H1) <= 127) {\n                    H = (H1 + (H2 - H1) * valueFactor) >> 0;\n                }\n                else {\n                    H = (H1 + 256 + (H2 - H1 + 256) * valueFactor) >> 0;\n                    if (H > 256)\n                        H -= 256;\n                }\n                let S = (S1 + (S2 - S1) * valueFactor) >> 0;\n                let L = (L1 + (L2 - L1) * valueFactor) >> 0;\n                //console.log(H+\" \"+S+\" \"+L) ;\n                b = new YDataRendering.YSolidBrush(new YDataRendering.YColor(true, A, H, S, L));\n            }\n            g.FillPolygon(b, pt);\n        }\n        if (this._borderThickness > 0)\n            g.DrawPolygon(this._borderpen, this._path);\n        g.DrawStringRect(this.lastDrawParameters.value, this._font, this._font.brush, p.valueRectangle, p.valueFormat);\n        if (this._showMinMax) {\n            //YDataRendering.YPen pn = new YDataRendering.YPen(YDataRendering.YColor.Red);\n            //g.DrawRectangle(pn,lastDrawParameters.minValueRectangle);\n            //g.DrawRectangle(pn, lastDrawParameters.maxValueRectangle);\n            g.DrawStringRect(this.lastDrawParameters.minValue, this._minMaxFont, this._minMaxFont.brush, this.lastDrawParameters.minValueRectangle, this.lastDrawParameters.minValueFormat);\n            g.DrawStringRect(this.lastDrawParameters.maxValue, this._minMaxFont, this._minMaxFont.brush, this.lastDrawParameters.maxValueRectangle, this.lastDrawParameters.maxValueFormat);\n        }\n        this.drawAnnotationPanels(g, this._annotationPanels, w, h, true, this.mainViewPort);\n        this.DrawMessagePanels(g, w, h);\n        return 0;\n    }\n    renderingPostProcessing() {\n        if (this._shownValue != this._value)\n            this.redraw();\n    }\n}\n(function (YSolidGauge) {\n    // export enum DisplayMode {DISPLAY90 = \"90\\u00B0\", DISPLAY180 = \"180\\u00B0\", DISPLAY270 = \"270\\u00B0\", DISPLAY360 = \"360\\u00B0\" };\n    class DisplayModeEnumItem extends YDataRendering.YEnumItem {\n        constructor(value, humanreadable, container) {\n            super(value, humanreadable, DisplayMode);\n        }\n    }\n    YSolidGauge.DisplayModeEnumItem = DisplayModeEnumItem;\n    class DisplayMode extends YDataRendering.YEnum {\n    }\n    DisplayMode.DISPLAY90 = new DisplayModeEnumItem(\"DISPLAY90\", \"90\\u00B0\");\n    DisplayMode.DISPLAY180 = new DisplayModeEnumItem(\"DISPLAY180\", \"180\\u00B0\");\n    DisplayMode.DISPLAY270 = new DisplayModeEnumItem(\"DISPLAY270\", \"270\\u00B0\");\n    DisplayMode.DISPLAY360 = new DisplayModeEnumItem(\"DISPLAY360\", \"360\\u00B0\");\n    YSolidGauge.DisplayMode = DisplayMode;\n})(YSolidGauge || (YSolidGauge = {}));\n"],
  "mappings": ";AAqCO,YAAc,CACjB,YAAY,EAAG,EAAG,EAAG,CACjB,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,QAEN,aAAY,EAAG,EAAG,CAAE,MAAO,IAAI,IAAQ,EAAG,EAAG,GACpD,YAAY,EAAG,CACX,MAAO,IAAI,IAAQ,EAAE,EAAI,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAI,KAAK,EAAG,EAAE,EAAI,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAI,KAAK,EAAG,EAAE,EAAI,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAI,KAAK,GAExJ,YAAY,EAAG,CACX,MAAO,IAAI,IAAQ,KAAK,EAAI,EAAG,KAAK,EAAI,EAAG,KAAK,EAAI,GAExD,KAAK,EAAG,CACJ,MAAO,IAAI,IAAQ,KAAK,EAAI,EAAE,EAAG,KAAK,EAAI,EAAE,EAAG,KAAK,EAAI,EAAE,GAE9D,WAAW,EAAG,CACV,MAAO,IAAI,IAAQ,KAAK,EAAI,EAAE,EAAG,KAAK,EAAI,EAAE,EAAG,KAAK,EAAI,EAAE,GAE9D,UAAW,CAAE,MAAO,IAAI,GAAO,KAAK,EAAG,KAAK,GAC5C,SAAU,CAAE,MAAO,IAAI,GAAM,KAAK,EAAG,KAAK,KAEvC,OAAgB,CAEnB,YAAY,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAO,CAC1C,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,EACJ,GAAK,GAAO,GAAK,GAAO,GAAK,GAAO,GAAK,GAAO,GAAK,GAAO,GAAK,GAAO,GAAK,GAC9E,IAAS,EAAU,iBACd,GAAK,GAAO,GAAK,GAClB,IAAS,EAAU,gBAE3B,KAAK,cAAiB,GAAQ,EAAU,mBAAqB,EAC7D,KAAK,WAAc,GAAQ,EAAU,gBAAkB,EAE3D,OAAQ,CACJ,GAAI,GAAO,EACX,MAAI,MAAK,eACL,IAAQ,EAAU,kBAClB,KAAK,YACL,IAAQ,EAAU,eACf,GAAI,GAAU,KAAK,EAAG,KAAK,EAAG,KAAK,EAAG,KAAK,EAAG,KAAK,EAAG,KAAK,EAAG,KAAK,EAAG,KAAK,EAAG,KAAK,EAAG,MAE7F,cAAc,CACd,GAAI,GAAO,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,EACvC,EAAO,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,EACvC,EAAO,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,EAC3C,MAAO,MAAK,EAAI,EAAO,CAAC,KAAK,EAAI,EAAO,KAAK,EAAI,KAEjD,YAAY,CACZ,MAAI,MAAK,WACE,EAAU,oBACd,GAAI,GAAU,KAAK,EAAG,KAAK,EAAG,KAAK,EAAG,KAAK,EAAG,KAAK,EAAG,KAAK,EAAG,KAAK,EAAG,KAAK,EAAG,KAAK,EAAG,EAAU,WAE3G,YAAY,EAAG,CACX,MAAI,MAAK,cACE,GAAI,IAAQ,KAAK,EAAI,EAAE,EAAG,KAAK,EAAI,EAAE,EAAG,GAC5C,GAAI,IAAQ,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAG,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAG,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,SAEjJ,WAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,CACxC,MAAO,IAAI,GAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAU,iBAEvD,oBAAmB,EAAS,EAAS,CACxC,GAAI,GAAO,EAAU,iBACrB,MAAK,IAAW,GAAO,GAAW,GAC9B,IAAQ,EAAU,eACf,GAAI,GAAU,EAAG,EAAG,EAAS,EAAG,EAAG,EAAS,EAAG,EAAG,EAAG,SAEzD,iBAAgB,EAAU,CAC7B,SAAW,KAAK,GAAK,EAAW,IACzB,GAAI,GAAU,KAAK,IAAI,GAAW,CAAC,KAAK,IAAI,GAAW,EAAG,KAAK,IAAI,GAAW,CAAC,KAAK,IAAI,GAAW,EAAG,EAAG,EAAG,EAAG,EAAU,iBAE7H,gBAAe,EAAM,CACxB,MAAO,IAAI,GAAU,EAAM,EAAG,EAAG,EAAG,EAAM,EAAG,EAAG,EAAG,EAAG,EAAU,iBAE7D,oBAAoB,CACvB,MAAO,IAAI,GAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAU,cAAgB,EAAU,kBAExF,OAAQ,CACJ,MAAO,UAAY,KAAK,EAAE,WAAa,IAAM,KAAK,EAAE,WAAa,IAC3D,KAAK,EAAE,WAAa,IAAM,KAAK,EAAE,WAAa,IAC9C,KAAK,EAAE,WAAa,IAAM,KAAK,EAAE,WAAa,IAExD,UAAW,CACP,MAAO,KAAO,KAAK,EAAE,QAAQ,GAAK,IAAM,KAAK,EAAE,QAAQ,GAAK,IAAM,KAAK,EAAE,QAAQ,GAAK,KAAQ,MAAK,WAAa,KAAO,IAAM;AAAA,IAChH,KAAK,EAAE,QAAQ,GAAK,IAAM,KAAK,EAAE,QAAQ,GAAK,IAAM,KAAK,EAAE,QAAQ,GAAK,KAAQ,MAAK,cAAgB,KAAO,IAAM;AAAA,IAClH,KAAK,EAAE,QAAQ,GAAK,IAAM,KAAK,EAAE,QAAQ,GAAK,IAAM,KAAK,EAAE,QAAQ,GAAK;AAAA,EAEzF,YAAY,EAAG,CAIX,MAAI,MAAK,WACE,EAAE,QACT,EAAE,WACK,KAAK,QACX,KAAK,eAAmB,EAAE,cACpB,EAAU,mBAAmB,KAAK,EAAI,EAAE,EAAG,KAAK,EAAI,EAAE,GAC1D,GAAI,GAAU,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAG,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAG,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAG,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAG,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAG,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAG,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAG,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAG,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAI,KAAK,EAAI,EAAE,EAAG,EAAU,cAE3a,UAAU,CAIV,GAAI,KAAK,WACL,MAAO,GAAU,oBACrB,GAAI,KAAK,cACL,MAAO,GAAU,mBAAmB,CAAC,KAAK,EAAG,CAAC,KAAK,GACvD,GAAI,GAAM,KAAK,YACf,GAAI,GAAO,EACP,KAAM,4BACV,GAAI,GAAO,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,EACvC,EAAO,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,EACvC,EAAO,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,EACvC,EAAO,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,EACvC,EAAO,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,EACvC,EAAO,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,EACvC,EAAO,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,EACvC,EAAO,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,EACvC,EAAO,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,EAC3C,MAAO,IAAI,GAAU,EAAO,EAAK,CAAC,EAAO,EAAK,EAAO,EAAK,CAAC,EAAO,EAAK,EAAO,EAAK,CAAC,EAAO,EAAK,EAAO,EAAK,CAAC,EAAO,EAAK,EAAO,EAAK,EAAU,WAEnJ,KAAM,CACF,QAAQ,IAAI,KAAK,cAGzB,EAAU,UAAY,EACtB,EAAU,cAAgB,EAC1B,EAAU,iBAAmB,EAUtB,WAAY,OACR,YAAW,EAAW,EAAO,CAChC,GAAI,GAAI,OAAO,oBAAoB,GACnC,OAAS,GAAI,EAAG,EAAI,EAAE,OAAQ,IAC1B,GAAI,EAAE,IAAM,EACR,MAAO,GAAU,GAEzB,KAAM,QAAU,EAAQ,aAAe,EAAY,eAEhD,UAAS,EAAW,CACvB,GAAI,GAAM,GACN,EAAI,OAAO,oBAAoB,GACnC,OAAS,GAAI,EAAG,EAAI,EAAE,OAAQ,IAC1B,AAAI,EAAU,EAAE,aAAe,IAC3B,EAAI,KAAK,EAAU,EAAE,KAG7B,MAAO,KAGR,OAAgB,CACnB,YAAY,EAAO,EAAe,EAAW,CACzC,KAAK,OAAS,EACd,KAAK,WAAa,EAClB,KAAK,eAAiB,EAE1B,WAAW,EAAO,CAAE,MAAO,GAAM,WAAW,KAAK,WAAY,MACzD,WAAW,CAAE,MAAO,MAAK,OAAO,cAChC,cAAc,CAAE,MAAO,MAAK,kBAC5B,YAAY,CAAE,MAAO,GAAM,SAAS,KAAK,cAE1C,QAAuB,CAC1B,aAAc,CACV,KAAK,KAAO,EACZ,KAAK,KAAO,EACZ,KAAK,MAAQ,EACb,KAAK,MAAQ,EACb,KAAK,QAAU,EACf,KAAK,QAAU,EACf,KAAK,QAAU,EACf,KAAK,QAAU,EACf,KAAK,MAAQ,EACb,KAAK,OAAS,EACd,KAAK,QAAU,GACf,KAAK,iBAAmB,EACxB,KAAK,cAAgB,EACrB,KAAK,iBAAmB,EACxB,KAAK,iBAAmB,EACxB,KAAK,aAAe,EACpB,KAAK,gBAAkB,EACvB,KAAK,cAAgB,IAGtB,QAAY,IACX,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAAE,KAAK,UAAY,KACnC,eAAe,CAAE,MAAO,MAAK,cACjC,YAAY,EAAgB,EAAc,EAAM,EAAoB,CAChE,KAAK,UAAY,KACjB,KAAK,oBAAsB,KAC3B,KAAK,MAAQ,QACb,KAAK,QAAU,GACf,KAAK,MAAQ,GACb,KAAK,OAAS,EAAO,MAErB,KAAK,gBAAkB,KACvB,KAAK,MAAQ,KACb,KAAK,OAAS,GAAI,GAAY,EAAO,OACrC,KAAK,gBAAkB,EACvB,KAAK,cAAgB,EACrB,KAAK,oBAAsB,GAA0C,KACrE,KAAK,MAAQ,GAAI,GAAa,GAAc,GAAI,EAAa,WAAW,MAAO,EAAgB,KAAM,KAAK,WAE9G,UAAU,EAAQ,CACd,KAAK,MAAQ,KACT,GAAU,MACV,KAAK,gBAAgB,0BAA0B,MAEnD,OAAO,CAAE,MAAO,MAAK,SACrB,MAAK,EAAO,CACZ,KAAK,MAAQ,EACb,KAAK,UAAU,MACf,KAAK,gBAAgB,YAErB,aAAa,CAAE,MAAO,MAAK,OAAS,QACpC,OAAO,CAAE,MAAO,MAAK,MAAM,SAC3B,MAAK,EAAO,CACZ,GAAI,GAAS,EACT,KAAM,IAAI,YAAW,iCACzB,EAAS,KAAK,MAAM,IAAM,GAAS,IACnC,KAAK,MAAM,MAAQ,EACnB,KAAK,UAAU,MACX,KAAK,qBAAuB,MAC5B,KAAK,oBAAoB,MAC7B,KAAK,gBAAgB,YAErB,SAAS,CAAE,MAAO,MAAK,WACvB,QAAO,EAAO,CACd,AAAI,KAAK,SAAW,GAChB,MAAK,QAAU,EACf,KAAK,UAAU,MACf,KAAK,gBAAgB,aAGzB,OAAO,CAAE,MAAO,MAAK,SACrB,MAAK,EAAO,CACZ,AAAI,KAAK,OAAS,GACd,MAAK,MAAQ,EACb,KAAK,UAAU,MACf,KAAK,gBAAgB,aAGzB,QAAQ,CAAE,MAAO,MAAK,UACtB,OAAM,EAAO,CACb,AAAI,KAAK,QAAU,GACf,MAAK,OAAS,EACd,KAAK,OAAS,KACd,KAAK,gBAAgB,aAGzB,iBAAiB,CAAE,MAAO,MAAK,mBAC/B,gBAAe,EAAO,CACtB,AAAI,KAAK,iBAAmB,GACxB,MAAK,gBAAkB,EACvB,KAAK,OAAS,KACd,KAAK,gBAAgB,aAGzB,aAAa,CAAE,MAAO,MAAK,MAAQ,KAAK,MAAQ,WAChD,QAAQ,CACR,MAAI,MAAK,QAAU,MACf,MAAK,OAAS,GAAI,GAAY,KAAK,iBAAmB,KAAO,KAAK,gBAAkB,KAAK,SACtF,KAAK,UAEZ,eAAe,CAAE,MAAO,MAAK,MAAM,MAAQ,OAC3C,gBAAgB,CAAE,MAAO,MAAK,MAAM,MAAQ,QAC5C,WAAW,CACX,MAAQ,MAAK,QAAU,UAAY,IAAO,MAAK,MAAQ,QAAU,IAAM,KAAK,cAAc,WAAa,MAAQ,KAAK,QAGrH,QAAa,CAChB,YAAY,EAAM,EAAI,CAClB,KAAK,GAAK,EACV,KAAK,GAAK,EACV,KAAK,OAAS,GACd,KAAK,YAAc,EACnB,KAAK,YAAc,EACnB,KAAK,iBAAmB,EACpB,GAAQ,MACR,MAAK,YAAc,EAAK,KAAO,KAC/B,KAAK,iBAAmB,KAAK,YAAc,IAC3C,AAAI,EAAG,QAAQ;AAAA,GAAQ,EACnB,MAAK,OAAS,CAAC,GACf,KAAK,YAAc,GAGnB,MAAK,OAAS,EAAG,MAAM;AAAA,GACvB,KAAK,YAAc,KAAK,OAAO,YAIvC,QAAQ,CAAE,MAAO,MAAK,UACtB,aAAa,CAAE,MAAO,MAAK,eAC3B,kBAAkB,CAAE,MAAO,MAAK,oBAChC,aAAa,CAAE,MAAO,MAAK,eAC3B,SAAS,CAAE,MAAO,MAAK,MACvB,QAAQ,CAAE,MAAO,MAAK,MACtB,OAAM,EAAO,CACb,KAAK,GAAK,KAEV,QAAO,EAAO,CACd,KAAK,GAAK,IAGX,OAAyB,CAC5B,YAAY,EAAO,CACf,KAAK,OAAS,EACd,KAAK,OAAS,IAItB,EAAmB,cAAgB,GAAI,GAAmB,GAC1D,EAAmB,yBAA2B,GAAI,GAAmB,GACrE,EAAmB,kBAAoB,GAAI,GAAmB,GAC9D,EAAmB,iBAAmB,GAAI,GAAmB,GAC7D,EAAmB,UAAY,GAAI,GAAmB,GACtD,EAAmB,iBAAmB,GAAI,GAAmB,GACtD,WAAqB,CACxB,YAAY,EAAO,CACf,KAAK,OAAS,EACd,KAAK,OAAS,IAItB,EAAe,QAAU,GAAI,GAAe,IAC5C,EAAe,QAAU,GAAI,GAAe,GAC5C,EAAe,UAAY,GAAI,GAAe,GAC9C,EAAe,YAAc,GAAI,GAAe,GAChD,EAAe,KAAO,GAAI,GAAe,GACzC,EAAe,UAAY,GAAI,GAAe,GAC9C,YAAqB,CACjB,aAAc,CACV,KAAK,KAAO,GAEhB,WAAW,EAAG,CAAE,KAAK,MAAQ,EAAI;AAAA,EACjC,OAAO,EAAG,CAAE,KAAK,MAAQ,KACrB,WAAW,CAAE,MAAO,MAAK,OAE1B,OAAoB,IACnB,YAAY,CAAE,MAAO,MAAK,cAC1B,WAAU,EAAO,CAAE,KAAK,WAAa,KACrC,gBAAgB,CAAE,MAAO,MAAK,kBAC9B,eAAc,EAAO,CAAE,KAAK,eAAiB,KAC7C,cAAc,CAAE,MAAO,MAAK,gBAC5B,aAAY,EAAO,CAAE,KAAK,aAAe,KACzC,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAAE,KAAK,UAAY,EACvC,YAAY,EAAM,CACd,KAAK,WAAa,EAClB,KAAK,eAAiB,EACtB,KAAK,aAAe,EACpB,KAAK,UAAY,EACjB,KAAK,MAAQ,MACb,KAAK,MAAQ,IAGd,OAAa,IACZ,OAAO,CAAE,MAAO,MAAK,SACrB,YAAW,EAAO,CAAE,KAAK,MAAQ,YAC1B,mBAAmB,CAC1B,GAAI,EAAO,mBAAqB,KAAM,CAClC,EAAO,kBAAoB,GAC3B,GAAI,GAAQ,OAAO,oBAAoB,GACvC,OAAS,GAAI,EAAG,EAAI,EAAM,OAAQ,IAC9B,AAAI,EAAO,EAAM,aAAe,IAC5B,GAAO,kBAAkB,EAAM,IAAM,EAAO,EAAM,IAClD,EAAO,kBAAkB,EAAM,IAAI,WAAa,EAAM,IAIlE,MAAO,GAAO,wBAEX,YAAW,EAAO,CACrB,GAAI,GAAa,EAAM,cACnB,EAAY,OAAO,oBAAoB,GAC3C,OAAS,GAAI,EAAG,EAAI,EAAU,OAAQ,IAClC,GAAI,EAAU,GAAG,eAAiB,GAC1B,EAAO,EAAU,aAAe,GAChC,MAAO,GAAO,EAAU,IAMpC,GAAK,EAAM,QAAU,GAAO,EAAM,OAAO,EAAG,GAAG,eAAiB,IAAM,CAClE,GAAI,GAAI,SAAS,EAAM,OAAO,EAAG,GAAI,IACjC,EAAI,SAAS,EAAM,OAAO,EAAG,GAAI,IACjC,EAAI,SAAS,EAAM,OAAO,EAAG,GAAI,IACrC,MAAO,IAAI,GAAO,GAAO,IAAK,EAAG,EAAG,GAExC,GAAI,EAAM,QAAU,IAChB,GAAI,EAAM,OAAO,EAAG,GAAG,eAAiB,OAAQ,CAC5C,GAAI,GAAQ,SAAS,EAAM,OAAO,EAAG,GAAI,IACrC,EAAI,SAAS,EAAM,OAAO,EAAG,GAAI,IACjC,EAAI,SAAS,EAAM,OAAO,EAAG,GAAI,IACjC,EAAI,SAAS,EAAM,OAAO,GAAI,GAAI,IACtC,MAAO,IAAI,GAAO,GAAO,EAAO,EAAG,EAAG,WAEjC,EAAM,OAAO,EAAG,GAAG,eAAiB,OAAQ,CACjD,GAAI,GAAQ,SAAS,EAAM,OAAO,EAAG,GAAI,IACrC,EAAI,SAAS,EAAM,OAAO,EAAG,GAAI,IACjC,EAAI,SAAS,EAAM,OAAO,EAAG,GAAI,IACjC,EAAI,SAAS,EAAM,OAAO,GAAI,GAAI,IACtC,MAAO,IAAI,GAAO,GAAM,EAAO,EAAG,EAAG,IAG7C,MAAO,YAGJ,KAAI,EAAG,CACV,GAAI,GAAI,EAAE,SAAS,IACnB,MAAI,GAAE,QAAU,EACL,IAAM,EACV,EAEX,UAAW,CACP,GAAI,KAAK,WACL,MAAO,OAAU,GAAO,IAAI,KAAK,cAAgB,EAAO,IAAI,KAAK,GAAK,EAAO,IAAI,KAAK,GAAK,EAAO,IAAI,KAAK,IAAI,cAE9G,CACD,GAAI,GAAY,OAAO,oBAAoB,GAC3C,OAAS,GAAI,EAAG,EAAI,EAAU,OAAQ,IAAK,CAEvC,GAAI,GADI,QAAQ,IAAI,EAAQ,EAAU,IAEtC,GAAK,EAAE,OAAS,KAAK,OAAW,EAAE,KAAO,KAAK,KAAS,EAAE,OAAS,KAAK,OAAW,EAAE,MAAQ,KAAK,KAC7F,MAAO,GAAU,IAG7B,MAAO,OAAU,GAAO,IAAI,KAAK,cAAgB,EAAO,IAAI,KAAK,GAAK,EAAO,IAAI,KAAK,GAAK,EAAO,IAAI,KAAK,IAAI,iBAE/G,UAAU,CAAE,MAAO,OAAS,KAAK,EAAE,WAAa,KAAO,KAAK,EAAE,WAAa,KAAO,KAAK,EAAE,WAAa,OACtG,YAAY,CAAE,MAAQ,MAAK,aAAe,KAAO,QAAQ,SACtD,YAAW,EAAO,EAAO,EAAO,CACnC,GAAI,GAAS,IACT,MAAS,GAAQ,KAAO,KAAQ,EACpC,GAAI,EAAQ,GAAI,CACZ,GAAI,GAAS,IACT,MAAS,GAAQ,KAAO,KAAQ,EACpC,EAAQ,IAAM,EAElB,MAAS,GAAQ,IAAO,GAAQ,GAAU,GAAI,GAAS,OAAS,OAAU,EAE9E,SAAU,CACN,GAAI,GACA,EACA,EAEJ,GADA,KAAK,kBAAoB,GACrB,KAAK,GAAK,EAAG,CACb,KAAK,EAAI,KAAK,EACd,KAAK,EAAI,KAAK,EACd,KAAK,EAAI,KAAK,EACd,OAEJ,AAAI,KAAK,GAAK,IACV,EAAQ,KAAK,EAAK,KAAM,KAAK,GAG7B,EAAS,MAAK,EAAI,KAAK,GAAM,IAAO,KAAK,EAAI,KAAK,EAEtD,EAAS,IAAO,KAAK,EAAI,EAEzB,EAAS,KAAK,EAAI,GACd,EAAQ,KACR,GAAQ,EAAQ,KACpB,KAAK,EAAI,EAAO,WAAW,EAAO,EAAO,GAEzC,EAAQ,KAAK,EACT,EAAQ,KACR,GAAQ,EAAQ,KACpB,KAAK,EAAI,EAAO,WAAW,EAAO,EAAO,GAEzC,AAAI,KAAK,GAAK,GACV,EAAQ,KAAK,EAAI,GAGjB,EAAQ,KAAK,EAAI,IAErB,KAAK,EAAI,EAAO,WAAW,EAAO,EAAO,GACrC,KAAK,EAAI,KACT,MAAK,EAAI,KACT,KAAK,EAAI,KACT,MAAK,EAAI,KACT,KAAK,EAAI,KACT,MAAK,EAAI,KAEjB,YAAa,CACT,GAAI,GAAI,KAAK,EACT,EAAI,KAAK,EACT,EAAI,KAAK,EACT,EACA,EACA,EACA,EAAO,EAAI,EAAI,EAAI,EACnB,EAAO,EAAI,EAAI,EAAI,EACnB,EAAa,EACb,EAAU,EAOd,GANA,KAAK,kBAAoB,GACrB,EAAI,GACJ,GAAM,GACN,EAAI,GACJ,GAAM,GACV,EAAM,GAAM,EAAM,GAAK,GAAM,EACzB,GAAO,EAAK,CACZ,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,EACT,OAEJ,EAAe,GAAM,GAAO,GAAM,EAClC,AAAI,GAAK,IACL,EAAM,KAAO,GAAM,GAAO,GAAe,GAAM,IAAS,EAGxD,EAAM,KAAO,GAAM,GAAO,IAAM,GAAe,KAAO,GAAM,KAAU,EAE1E,EAAa,EAAK,GAAM,GACxB,EAAU,EAAI,EACd,AAAI,GAAK,EACL,GAAI,EACJ,EAAI,EACJ,EAAI,GAEH,AAAI,GAAK,EACV,GAAI,GACJ,EAAI,EACJ,EAAI,GAGJ,EAAI,IAER,AAAI,GAAK,EACL,GAAO,KAAO,GAAI,GAAK,GAAc,GAAY,EAGjD,GAAK,IAAQ,KAAO,GAAI,GAAK,GAAc,GAAY,EAEvD,EAAI,KACJ,IAAK,KACL,EAAI,KACJ,GAAI,KACJ,EAAI,KACJ,GAAI,KACR,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,KAET,MAAM,CACN,MAAK,MAAK,mBACN,KAAK,aACF,KAAK,KAEZ,aAAa,CACb,MAAK,MAAK,mBACN,KAAK,aACF,KAAK,KAEZ,aAAa,CACb,MAAK,MAAK,mBACN,KAAK,aACF,KAAK,KAEZ,MAAM,CACN,MAAK,MAAK,mBACN,KAAK,UACF,KAAK,KAEZ,QAAQ,CACR,MAAK,MAAK,mBACN,KAAK,UACF,KAAK,KAEZ,OAAO,CACP,MAAK,MAAK,mBACN,KAAK,UACF,KAAK,KAEZ,QAAQ,CACR,MAAO,MAAK,mBAET,UAAS,EAAG,EAAG,EAAG,EAAG,CACxB,MAAO,IAAI,GAAO,GAAO,EAAG,EAAG,EAAG,SAE/B,UAAS,EAAG,EAAG,EAAG,EAAG,CACxB,MAAO,IAAI,GAAO,GAAM,EAAG,EAAG,EAAG,MAEjC,QAAQ,CAAE,MAAO,MAAK,cACtB,QAAQ,CAAE,MAAO,CAAC,KAAK,WAC3B,MAAM,EAAG,CACL,GAAI,KAAK,YASL,GARI,CAAC,EAAE,YAEH,EAAE,KAAO,KAAK,KAEd,EAAE,YAAc,KAAK,YAErB,EAAE,YAAc,KAAK,YAErB,EAAE,OAAS,KAAK,MAChB,MAAO,WAGP,EAAE,YAEF,EAAE,KAAO,KAAK,KAEd,EAAE,OAAS,KAAK,OAEhB,EAAE,MAAQ,KAAK,MAEf,EAAE,OAAS,KAAK,MAChB,MAAO,GAEf,MAAO,GAEX,OAAQ,CACJ,MAAI,MAAK,WACE,GAAI,GAAO,GAAM,KAAK,aAAc,KAAK,EAAG,KAAK,EAAG,KAAK,EAAG,KAAK,cACrE,GAAI,GAAO,GAAO,KAAK,aAAc,KAAK,EAAG,KAAK,EAAG,KAAK,EAAG,KAAK,iBAEzE,eAAe,CAAE,MAAO,MAAK,cACjC,YAAY,EAAO,EAAc,EAAK,EAAK,EAAK,EAAc,CAC1D,KAAK,kBAAoB,GACzB,KAAK,kBAAoB,GACzB,KAAK,aAAe,EACpB,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,MAAQ,GACb,KAAK,UAAY,KAAK,kBACtB,KAAK,kBAAoB,EACzB,KAAK,WAAa,EAClB,KAAK,aAAe,EACpB,KAAK,cAAgB,IAAiB,GACtC,AAAI,EACA,MAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,WAGL,MAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,kBAAoB,IAE7B,KAAK,UAAY,KAAK,kBAE1B,iBAAkB,CACd,GAAI,GAAI,KAAK,aAAe,IACxB,EAAI,KAAK,EACT,EAAI,KAAK,EACT,EAAI,KAAK,EACb,MAAO,QAAU,EAAI,IAAM,EAAI,IAAM,EAAI,IAAM,EAAE,QAAQ,GAAK,OAE9D,WAAW,CAAE,MAAO,MAAK,YAEjC,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC7D,EAAO,aAAe,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAChE,EAAO,KAAO,GAAI,GAAO,GAAO,IAAM,EAAM,IAAM,IAAM,IACxD,EAAO,WAAa,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC9D,EAAO,MAAQ,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IACzD,EAAO,MAAQ,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IACzD,EAAO,OAAS,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC1D,EAAO,MAAQ,GAAI,GAAO,GAAO,IAAM,EAAM,EAAM,EAAM,IACzD,EAAO,eAAiB,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAClE,EAAO,KAAO,GAAI,GAAO,GAAO,IAAM,EAAM,EAAM,IAAM,IACxD,EAAO,WAAa,GAAI,GAAO,GAAO,IAAM,IAAM,GAAM,IAAM,IAC9D,EAAO,MAAQ,GAAI,GAAO,GAAO,IAAM,IAAM,GAAM,GAAM,IACzD,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC7D,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,GAAM,IAAM,IAAM,IAC7D,EAAO,WAAa,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,EAAM,IAC9D,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,GAAM,IAC7D,EAAO,MAAQ,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,GAAM,IACzD,EAAO,eAAiB,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAClE,EAAO,SAAW,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC5D,EAAO,QAAU,GAAI,GAAO,GAAO,IAAM,IAAM,GAAM,GAAM,IAC3D,EAAO,KAAO,GAAI,GAAO,GAAO,IAAM,EAAM,IAAM,IAAM,IACxD,EAAO,SAAW,GAAI,GAAO,GAAO,IAAM,EAAM,EAAM,IAAM,IAC5D,EAAO,SAAW,GAAI,GAAO,GAAO,IAAM,EAAM,IAAM,IAAM,IAC5D,EAAO,cAAgB,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,GAAM,IACjE,EAAO,SAAW,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC5D,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,EAAM,IAAM,EAAM,IAC7D,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC7D,EAAO,YAAc,GAAI,GAAO,GAAO,IAAM,IAAM,EAAM,IAAM,IAC/D,EAAO,eAAiB,GAAI,GAAO,GAAO,IAAM,GAAM,IAAM,GAAM,IAClE,EAAO,WAAa,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,EAAM,IAC9D,EAAO,WAAa,GAAI,GAAO,GAAO,IAAM,IAAM,GAAM,IAAM,IAC9D,EAAO,QAAU,GAAI,GAAO,GAAO,IAAM,IAAM,EAAM,EAAM,IAC3D,EAAO,WAAa,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC9D,EAAO,aAAe,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAChE,EAAO,cAAgB,GAAI,GAAO,GAAO,IAAM,GAAM,GAAM,IAAM,IACjE,EAAO,cAAgB,GAAI,GAAO,GAAO,IAAM,GAAM,GAAM,GAAM,IACjE,EAAO,cAAgB,GAAI,GAAO,GAAO,IAAM,EAAM,IAAM,IAAM,IACjE,EAAO,WAAa,GAAI,GAAO,GAAO,IAAM,IAAM,EAAM,IAAM,IAC9D,EAAO,SAAW,GAAI,GAAO,GAAO,IAAM,IAAM,GAAM,IAAM,IAC5D,EAAO,YAAc,GAAI,GAAO,GAAO,IAAM,EAAM,IAAM,IAAM,IAC/D,EAAO,QAAU,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC3D,EAAO,WAAa,GAAI,GAAO,GAAO,IAAM,GAAM,IAAM,IAAM,IAC9D,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,IAAM,GAAM,GAAM,IAC7D,EAAO,YAAc,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC/D,EAAO,YAAc,GAAI,GAAO,GAAO,IAAM,GAAM,IAAM,GAAM,IAC/D,EAAO,QAAU,GAAI,GAAO,GAAO,IAAM,IAAM,EAAM,IAAM,IAC3D,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC7D,EAAO,WAAa,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC9D,EAAO,KAAO,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,EAAM,IACxD,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,GAAM,IAC7D,EAAO,KAAO,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IACxD,EAAO,MAAQ,GAAI,GAAO,GAAO,IAAM,EAAM,IAAM,EAAM,IACzD,EAAO,YAAc,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,GAAM,IAC/D,EAAO,SAAW,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC5D,EAAO,QAAU,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC3D,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,IAAM,GAAM,GAAM,IAC7D,EAAO,OAAS,GAAI,GAAO,GAAO,IAAM,GAAM,EAAM,IAAM,IAC1D,EAAO,MAAQ,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IACzD,EAAO,MAAQ,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IACzD,EAAO,SAAW,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC5D,EAAO,cAAgB,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IACjE,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,EAAM,IAC7D,EAAO,aAAe,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAChE,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC7D,EAAO,WAAa,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC9D,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC7D,EAAO,qBAAuB,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IACxE,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC7D,EAAO,WAAa,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC9D,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC7D,EAAO,YAAc,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC/D,EAAO,cAAgB,GAAI,GAAO,GAAO,IAAM,GAAM,IAAM,IAAM,IACjE,EAAO,aAAe,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAChE,EAAO,eAAiB,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAClE,EAAO,eAAiB,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAClE,EAAO,YAAc,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC/D,EAAO,KAAO,GAAI,GAAO,GAAO,IAAM,EAAM,IAAM,EAAM,IACxD,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,GAAM,IAAM,GAAM,IAC7D,EAAO,MAAQ,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IACzD,EAAO,QAAU,GAAI,GAAO,GAAO,IAAM,IAAM,EAAM,IAAM,IAC3D,EAAO,OAAS,GAAI,GAAO,GAAO,IAAM,IAAM,EAAM,EAAM,IAC1D,EAAO,iBAAmB,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IACpE,EAAO,WAAa,GAAI,GAAO,GAAO,IAAM,EAAM,EAAM,IAAM,IAC9D,EAAO,aAAe,GAAI,GAAO,GAAO,IAAM,IAAM,GAAM,IAAM,IAChE,EAAO,aAAe,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAChE,EAAO,eAAiB,GAAI,GAAO,GAAO,IAAM,GAAM,IAAM,IAAM,IAClE,EAAO,gBAAkB,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IACnE,EAAO,kBAAoB,GAAI,GAAO,GAAO,IAAM,EAAM,IAAM,IAAM,IACrE,EAAO,gBAAkB,GAAI,GAAO,GAAO,IAAM,GAAM,IAAM,IAAM,IACnE,EAAO,gBAAkB,GAAI,GAAO,GAAO,IAAM,IAAM,GAAM,IAAM,IACnE,EAAO,aAAe,GAAI,GAAO,GAAO,IAAM,GAAM,GAAM,IAAM,IAChE,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC7D,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC7D,EAAO,SAAW,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC5D,EAAO,YAAc,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC/D,EAAO,KAAO,GAAI,GAAO,GAAO,IAAM,EAAM,EAAM,IAAM,IACxD,EAAO,QAAU,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC3D,EAAO,MAAQ,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,EAAM,IACzD,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,GAAM,IAC7D,EAAO,OAAS,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,EAAM,IAC1D,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,IAAM,GAAM,EAAM,IAC7D,EAAO,OAAS,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC1D,EAAO,cAAgB,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IACjE,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC7D,EAAO,cAAgB,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IACjE,EAAO,cAAgB,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IACjE,EAAO,WAAa,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC9D,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC7D,EAAO,KAAO,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,GAAM,IACxD,EAAO,KAAO,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IACxD,EAAO,KAAO,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IACxD,EAAO,WAAa,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC9D,EAAO,OAAS,GAAI,GAAO,GAAO,IAAM,IAAM,EAAM,IAAM,IAC1D,EAAO,IAAM,GAAI,GAAO,GAAO,IAAM,IAAM,EAAM,EAAM,IACvD,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC7D,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,GAAM,IAAM,IAAM,IAC7D,EAAO,YAAc,GAAI,GAAO,GAAO,IAAM,IAAM,GAAM,GAAM,IAC/D,EAAO,OAAS,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC1D,EAAO,WAAa,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,GAAM,IAC9D,EAAO,SAAW,GAAI,GAAO,GAAO,IAAM,GAAM,IAAM,GAAM,IAC5D,EAAO,SAAW,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC5D,EAAO,OAAS,GAAI,GAAO,GAAO,IAAM,IAAM,GAAM,GAAM,IAC1D,EAAO,OAAS,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC1D,EAAO,QAAU,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC3D,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,IAAM,GAAM,IAAM,IAC7D,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC7D,EAAO,KAAO,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IACxD,EAAO,YAAc,GAAI,GAAO,GAAO,IAAM,EAAM,IAAM,IAAM,IAC/D,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,GAAM,IAAM,IAAM,IAC7D,EAAO,IAAM,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IACvD,EAAO,KAAO,GAAI,GAAO,GAAO,IAAM,EAAM,IAAM,IAAM,IACxD,EAAO,QAAU,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC3D,EAAO,OAAS,GAAI,GAAO,GAAO,IAAM,IAAM,GAAM,GAAM,IAC1D,EAAO,YAAc,GAAI,GAAO,GAAO,EAAM,IAAM,IAAM,IAAM,IAC/D,EAAO,UAAY,GAAI,GAAO,GAAO,IAAM,GAAM,IAAM,IAAM,IAC7D,EAAO,OAAS,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC1D,EAAO,MAAQ,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IACzD,EAAO,MAAQ,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IACzD,EAAO,WAAa,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,IAAM,IAC9D,EAAO,OAAS,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,EAAM,IAC1D,EAAO,YAAc,GAAI,GAAO,GAAO,IAAM,IAAM,IAAM,GAAM,IAC/D,EAAO,kBAAoB,KACpB,YAAa,CAChB,YAAY,EAAG,EAAkB,CAC7B,KAAK,aAAe,GACpB,KAAK,OAAS,EACV,MAAQ,IAAqB,aAC7B,MAAK,aAAe,MAGxB,cAAc,CAAE,MAAO,MAAK,gBAC5B,QAAQ,CAAE,MAAO,MAAK,SAEvB,eAA0B,GAAO,GAEjC,gBAAmC,GAAO,CAC7C,YAAY,EAAI,EAAI,CAChB,MAAM,GACN,KAAK,QAAU,EACf,KAAK,QAAU,KAEf,SAAS,CAAE,MAAO,MAAK,WACvB,SAAS,CAAE,MAAO,MAAK,UAExB,OAAW,CACd,YAAY,EAAO,EAAW,EAAkB,CAC5C,KAAK,WAAa,EAClB,KAAK,OAAS,EAAO,MACrB,KAAK,aAAe,GACpB,KAAK,UAAY,EACjB,KAAK,QAAU,EACf,KAAK,UAAY,EAAK,SAAS,MAC/B,KAAK,WAAa,EAClB,KAAK,OAAS,EAAY,EAAI,EAAQ,EAAO,YACzC,MAAQ,IAAqB,aAC7B,MAAK,aAAe,MAGxB,cAAc,CAAE,MAAO,MAAK,gBAC5B,YAAY,CAAE,MAAO,MAAK,cAC1B,cAAc,CAAE,MAAO,MAAK,OAAO,YACnC,QAAQ,CAAE,MAAO,MAAK,UACtB,UAAS,EAAO,CAAE,KAAK,UAAY,KACnC,QAAO,EAAO,CAAE,KAAK,QAAU,KAC/B,UAAS,EAAO,CAAE,KAAK,UAAY,IAE3C,AAAC,UAAU,EAAM,CACb,GAAI,GACJ,AAAC,UAAU,EAAU,CACjB,EAAS,EAAS,MAAW,GAAK,QAClC,EAAS,EAAS,MAAW,GAAK,QAClC,EAAS,EAAS,MAAW,GAAK,QAClC,EAAS,EAAS,aAAkB,GAAK,iBAC1C,EAAW,EAAK,UAAa,GAAK,SAAW,OACjD,GAAS,GAAO,KACZ,WAAiB,CACpB,YAAY,EAAG,EAAG,EAAG,EAAG,CACpB,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,IAGV,OAAY,CACf,YAAY,EAAQ,EAAQ,CACxB,KAAK,EAAI,GAAU,EACnB,KAAK,EAAI,GAAU,IAGpB,OAAa,CAChB,YAAY,EAAQ,EAAQ,CACxB,KAAK,EAAI,EACT,KAAK,EAAI,IAGV,QAA2B,CAC9B,aAAc,CACV,KAAK,YAAc,EAAc,YAAY,IAC7C,KAAK,cAAgB,IACrB,KAAK,aAAe,KACpB,KAAK,cAAgB,KACrB,KAAK,WAAa,KAGnB,OAAmB,IAClB,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAAE,KAAK,UAAY,KACnC,eAAe,CAAE,MAAO,MAAK,cACjC,YAAY,EAAQ,EAAc,CAC9B,KAAK,UAAY,KACjB,KAAK,SAAW,GAChB,KAAK,gBAAkB,EAAa,UAAU,KAC9C,KAAK,MAAQ,GACb,KAAK,SAAW,GAAI,GAAO,GAAO,IAAK,IAAK,IAAK,KACjD,KAAK,aAAe,EAAO,MAC3B,KAAK,iBAAmB,EACxB,KAAK,SAAW,GAChB,KAAK,gBAAkB,GACvB,KAAK,kBAAoB,GACzB,KAAK,SAAW,KAChB,KAAK,KAAO,KACZ,KAAK,MAAQ,KACb,KAAK,cAAgB,EACrB,KAAK,gBAAkB,EACvB,KAAK,MAAQ,GAAI,IAAM,EAAQ,KAAM,EAAG,SAExC,UAAU,CACV,MAAO,MAAK,YAEZ,SAAQ,EAAO,CACf,AAAI,KAAK,UAAY,GACjB,MAAK,SAAW,EAChB,KAAK,gBAAgB,qBACrB,KAAK,gBAAgB,aAGzB,iBAAiB,CAAE,MAAO,MAAK,mBAC/B,gBAAe,EAAO,CACtB,KAAK,gBAAkB,EACnB,KAAK,UACL,KAAK,gBAAgB,YAEzB,OAAO,CAAE,MAAO,MAAK,SACrB,MAAK,EAAO,CACZ,KAAK,MAAQ,EACb,KAAK,gBAAgB,qBACjB,KAAK,UACL,KAAK,gBAAgB,YAEzB,UAAU,CAAE,MAAO,MAAK,YACxB,SAAQ,EAAO,CACf,KAAK,SAAW,EAChB,KAAK,SAAW,KACZ,KAAK,UACL,KAAK,gBAAgB,YAEzB,cAAc,CAAE,MAAO,MAAK,gBAC5B,aAAY,EAAO,CACnB,KAAK,aAAe,EACpB,KAAK,KAAO,KACR,KAAK,UACL,KAAK,gBAAgB,YAEzB,kBAAkB,CAAE,MAAO,MAAK,oBAChC,iBAAgB,EAAO,CACvB,GAAI,EAAQ,EACR,KAAM,4CACV,KAAK,iBAAmB,EACxB,KAAK,gBAAgB,qBACrB,KAAK,KAAO,KACR,KAAK,UACL,KAAK,gBAAgB,YAEzB,UAAU,CAAE,MAAO,MAAK,YACxB,SAAQ,EAAO,CACf,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,oCACzB,KAAK,SAAW,EAChB,KAAK,gBAAgB,qBACjB,KAAK,UACL,KAAK,gBAAgB,YAEzB,iBAAiB,CAAE,MAAO,MAAK,mBAC/B,gBAAe,EAAO,CACtB,KAAK,gBAAkB,EACnB,KAAK,UACL,KAAK,gBAAgB,YAEzB,mBAAmB,CAAE,MAAO,MAAK,qBACjC,kBAAiB,EAAO,CACxB,KAAK,kBAAoB,EACrB,KAAK,UACL,KAAK,gBAAgB,YAEzB,UAAU,CACV,MAAI,MAAK,UAAY,MACjB,MAAK,SAAW,GAAI,GAAY,KAAK,WAClC,KAAK,YAEZ,MAAM,CACN,MAAI,MAAK,MAAQ,MACb,MAAK,KAAO,GAAI,GAAK,KAAK,aAAc,KAAK,iBAAkB,KAE5D,KAAK,QAEZ,OAAO,CAAE,MAAO,MAAK,QAE7B,AAAC,UAAU,EAAc,CACrB,eAAyC,EAAU,CAC/C,YAAY,EAAO,EAAe,EAAW,CACzC,MAAM,EAAO,EAAe,IAGpC,EAAa,2BAA6B,EAC1C,eAAiC,EAAM,EAEvC,EAAmB,KAAO,GAAI,GAA2B,OAAQ,QACjE,EAAmB,OAAS,GAAI,GAA2B,SAAU,UACrE,EAAmB,MAAQ,GAAI,GAA2B,QAAS,SACnE,EAAa,mBAAqB,EAClC,eAAuC,EAAU,CAC7C,YAAY,EAAO,EAAe,EAAW,CACzC,MAAM,EAAO,EAAe,IAGpC,EAAa,yBAA2B,EACxC,eAA+B,EAAM,EAErC,EAAiB,IAAM,GAAI,GAAyB,MAAO,OAC3D,EAAiB,OAAS,GAAI,GAAyB,SAAU,UACjE,EAAiB,OAAS,GAAI,GAAyB,SAAU,UACjE,EAAa,iBAAmB,EAChC,eAAgC,EAAU,CACtC,YAAY,EAAO,EAAe,EAAW,CACzC,MAAM,EAAO,EAAe,IAGpC,EAAa,kBAAoB,EACjC,eAAwB,EAAM,EAE9B,EAAU,KAAO,GAAI,GAAkB,OAAQ,QAC/C,EAAU,OAAS,GAAI,GAAkB,SAAU,UACnD,EAAU,MAAQ,GAAI,GAAkB,QAAS,SACjD,EAAa,UAAY,IAC1B,GAAiB,GAAe,KAC5B,mBAA2B,EAAa,CAC3C,YAAY,EAAQ,EAAc,CAC9B,MAAM,EAAQ,GACd,KAAK,eAAiB,EAAa,mBAAmB,OACtD,KAAK,eAAiB,EAAa,iBAAiB,UAEpD,gBAAgB,CAAE,MAAO,MAAK,kBAC9B,eAAc,EAAO,CACrB,KAAK,eAAiB,EAClB,KAAK,UACL,KAAK,gBAAgB,YAEzB,gBAAgB,CAAE,MAAO,MAAK,kBAC9B,eAAc,EAAO,CACrB,KAAK,eAAiB,EAClB,KAAK,UACL,KAAK,gBAAgB,WAG1B,gBAA8B,EAAa,CAC9C,YAAY,EAAQ,EAAc,CAC9B,MAAM,EAAQ,GACd,KAAK,SAAW,GAChB,KAAK,iBAAmB,GACxB,KAAK,iBAAmB,GACxB,KAAK,eAAiB,EAAa,mBAAmB,OACtD,KAAK,eAAiB,EAAa,iBAAiB,OAEpD,UAAU,CAAE,MAAO,MAAK,YACxB,SAAQ,EAAO,CACf,AAAK,CAAC,GAAW,KAAK,gBAAkB,EAAa,mBAAmB,QAAY,KAAK,gBAAkB,EAAa,iBAAiB,QACrI,MAAK,eAAiB,EAAa,iBAAiB,KAExD,KAAK,SAAW,EAChB,KAAK,gBAAgB,qBACrB,KAAK,gBAAgB,YAErB,kBAAkB,CAAE,MAAO,MAAK,oBAChC,iBAAgB,EAAO,CACvB,KAAK,iBAAmB,EACxB,KAAK,gBAAgB,qBACjB,KAAK,UACL,KAAK,gBAAgB,YAEzB,kBAAkB,CAAE,MAAO,MAAK,oBAChC,iBAAgB,EAAO,CACvB,KAAK,iBAAmB,EACxB,KAAK,gBAAgB,qBACjB,KAAK,UACL,KAAK,gBAAgB,YAEzB,gBAAgB,CAAE,MAAO,MAAK,kBAC9B,eAAc,EAAO,CACrB,AAAK,CAAC,KAAK,UAAc,GAAS,EAAa,mBAAmB,QAAY,KAAK,gBAAkB,EAAa,iBAAiB,QAC/H,MAAK,eAAiB,EAAa,iBAAiB,KAExD,KAAK,eAAiB,EACtB,KAAK,gBAAgB,qBACjB,KAAK,UACL,KAAK,gBAAgB,YAEzB,gBAAgB,CAAE,MAAO,MAAK,kBAC9B,eAAc,EAAO,CACrB,AAAK,CAAC,KAAK,UAAc,GAAS,EAAa,iBAAiB,QAAY,KAAK,gBAAkB,EAAa,mBAAmB,QAC/H,MAAK,eAAiB,EAAa,mBAAmB,OAE1D,KAAK,eAAiB,EACtB,KAAK,gBAAgB,qBACjB,KAAK,UACL,KAAK,gBAAgB,WAG1B,QAAW,IACV,eAAe,CAAE,MAAO,MAAK,iBAC7B,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAAE,KAAK,UAAY,EACvC,YAAa,EACb,YAAY,EAAgB,EAAc,CACtC,KAAK,UAAY,KACjB,KAAK,WAAa,KAClB,KAAK,OAAS,EAAO,IACrB,KAAK,SAAW,GAChB,KAAK,KAAO,EACZ,KAAK,KAAO,IACZ,KAAK,cAAgB,EACrB,KAAK,gBAAkB,KAEvB,YAAY,CACZ,MAAI,MAAK,YAAc,MACnB,MAAK,WAAa,GAAI,GAAY,KAAK,SACpC,KAAK,cAEZ,QAAQ,CAAE,MAAO,MAAK,UACtB,OAAM,EAAO,CACb,KAAK,OAAS,EACd,KAAK,WAAa,KACd,KAAK,SACL,KAAK,gBAAgB,YAEzB,UAAU,CAAE,MAAO,MAAK,YACxB,SAAQ,EAAO,CACf,KAAK,SAAW,EAChB,KAAK,gBAAgB,SAEzB,WAAW,EAAK,EAAK,CACjB,GAAI,EAAM,EACN,KAAM,IAAI,YAAW,mCACzB,KAAK,KAAO,EACZ,KAAK,KAAO,EACZ,KAAK,aACD,KAAK,SACL,KAAK,gBAAgB,YAEzB,MAAM,CAAE,MAAO,MAAK,QACpB,KAAI,EAAO,CACX,GAAK,GAAS,KAAK,MAAS,CAAC,EAAc,oBACvC,KAAM,IAAI,YAAW,mCAAqC,KAAK,KAAK,WAAa,KAErF,KAAK,KAAO,EACZ,KAAK,aACD,KAAK,SACL,KAAK,gBAAgB,YAEzB,MAAM,CAAE,MAAO,MAAK,QACpB,KAAI,EAAO,CACX,GAAK,GAAS,KAAK,MAAS,CAAC,EAAc,oBACvC,KAAM,IAAI,YAAW,mCAAqC,KAAK,KAAK,WAAa,KAErF,KAAK,KAAO,EACZ,KAAK,aACD,KAAK,SACL,KAAK,gBAAgB,WAG1B,OAAmB,IAClB,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAAE,KAAK,UAAY,KACnC,eAAe,CAAE,MAAO,MAAK,iBAC7B,QAAQ,CAAE,MAAO,MAAK,UACtB,OAAM,EAAG,CACT,KAAK,OAAS,EACd,KAAK,eACD,KAAK,QAAU,MACf,KAAK,OAAO,SAEhB,aAAa,CAAE,MAAO,MAAK,eAC3B,YAAW,EAAO,CAClB,KAAK,eACL,KAAK,YAAc,EAEvB,cAAe,CACX,KAAK,UAAY,KAAK,IAAI,EAAG,KAAK,gBAAgB,iBAClD,KAAK,WAAa,KAAK,IAAI,EAAG,KAAK,gBAAgB,kBACnD,KAAK,UAAY,KAAK,OAE1B,YAAY,EAAO,EAAY,EAAgB,EAAc,EAAe,CACxE,KAAK,OAAS,KACd,KAAK,UAAY,EACjB,KAAK,WAAa,EAClB,KAAK,UAAY,EACjB,KAAK,WAAa,GAClB,KAAK,YAAc,EAAa,WAAW,MAC3C,KAAK,UAAY,KACjB,KAAK,OAAS,EACd,KAAK,gBAAkB,EACvB,KAAK,OAAS,EACd,KAAK,YAAc,EACnB,KAAK,cAAgB,EACrB,KAAK,eACL,KAAK,gBAAgB,8BAA8B,MAEvD,4BAA4B,EAAM,CAC9B,KAAK,WAAW,KAAK,KAAK,QAC1B,KAAK,OAAS,KAAK,MAAM,IAAM,KAAK,UAAY,GAAQ,IACpD,KAAK,QAAU,MACf,KAAK,OAAO,MAEpB,qBAAsB,CAClB,GAAI,KAAK,WAAW,QAAU,EAC1B,KAAM,IAAI,YAAW,2BACzB,KAAK,OAAS,KAAK,WAAW,MAC1B,KAAK,QAAU,MACf,KAAK,OAAO,YAEb,YAAW,EAAM,EAAU,EAAW,EAAU,EAAW,CAC9D,OAAQ,OACC,GAAa,WAAW,gBACzB,MAAO,GAAW,MACjB,GAAa,WAAW,iBACzB,MAAO,GAAY,MAClB,GAAa,WAAW,eACzB,MAAO,MAAK,IAAI,EAAY,EAAW,EAAW,GAE1D,MAAO,GAEX,iBAAiB,EAAU,EAAW,CAClC,KAAK,OAAS,KAAK,MAAM,IAAM,KAAK,UAAY,EAAa,WAAW,KAAK,YAAa,KAAK,UAAW,KAAK,WAAY,EAAU,IAAc,IAC/I,KAAK,QAAU,MACf,KAAK,OAAO,MAEpB,qBAAsB,CAClB,AAAI,KAAK,QAAU,MACf,KAAK,OAAO,QAGxB,AAAC,UAAU,EAAc,CACrB,eAAiC,EAAU,CACvC,YAAY,EAAO,EAAe,EAAW,CACzC,MAAM,EAAO,EAAe,IAGpC,EAAa,mBAAqB,EAClC,eAAyB,EAAM,EAE/B,EAAW,MAAQ,GAAI,GAAmB,QAAS,SACnD,EAAW,gBAAkB,GAAI,GAAmB,kBAAmB,qBACvE,EAAW,iBAAmB,GAAI,GAAmB,mBAAoB,sBACzE,EAAW,eAAiB,GAAI,GAAmB,iBAAkB,gCACrE,EAAa,WAAa,IAC3B,GAAiB,GAAe,KAC5B,WAAoB,IACnB,mBAAmB,CAAE,MAAO,MAAK,qBACjC,WAAW,CAAE,MAAO,MAAK,oBAClB,sBAAsB,CAAE,MAAO,GAAc,8BAC7C,qBAAoB,EAAO,CAAE,EAAc,oBAAsB,EAC5E,iBAAkB,KACd,uBAAuB,CAAE,MAAO,MAAK,yBACrC,sBAAqB,EAAO,CAAE,KAAK,sBAAwB,KAC3D,gBAAgB,CAAE,MAAO,MAAK,qBAC3B,iBAAgB,EAAG,CACtB,EAAc,aAAe,EAAE,MAC/B,EAAc,aAAe,EAAE,MAEnC,2BAA4B,CACxB,KAAK,eAAiB,KACtB,KAAK,eAAiB,KAU1B,4BAA4B,EAAI,CAC5B,GAAI,GAAc,GACd,EAAgB,GAChB,EAAK,EACL,EAAK,EACT,KAAO,GAAM,MAAM,CACf,GAAI,GAAQ,OAAO,iBAAiB,GACpC,AAAK,CAAC,GAAmB,EAAM,UAAY,UAAc,CAAC,GACtD,GAAK,EAAG,WAAa,WAAW,EAAM,iBACtC,EAAK,EAAG,UAAY,WAAW,EAAM,gBACrC,EAAc,IAEb,GAAM,UAAY,YAAgB,EAAM,UAAY,aACrD,IAAM,EAAG,WAAa,WAAW,EAAM,iBACvC,GAAM,EAAG,UAAY,WAAW,EAAM,gBACtC,EAAgB,IAEpB,EAAK,EAAG,cAEZ,MAAO,IAAI,GAAO,EAAI,MAEtB,gBAAgB,CAChB,GAAI,KAAK,gBAAkB,KAAM,CAC7B,GAAI,GAAK,KAAK,YAIV,EAAwB,GAC5B,KAAO,GAAM,MACT,EAAsB,KAAK,KAAK,4BAA4B,IAC5D,EAAK,EAAG,cAEZ,EAAK,KAAK,YACV,GAAI,GAAc,GACd,EAAc,GACd,EAAgB,GAChB,EAAQ,EACZ,KAAO,GAAM,MAAM,CACf,GAAI,GAAS,EAAG,cACZ,EAAQ,OAAO,iBAAiB,GAEhC,EAAK,EAAsB,GAAO,EAClC,EAAK,EAAsB,GAAO,EACtC,AAAI,EAAQ,EAAsB,OAAS,GACvC,IAAM,EAAsB,EAAQ,GAAG,EACvC,GAAM,EAAsB,EAAQ,GAAG,GAG3C,GAAI,GAAS,EAAM,UACnB,GAAI,GAAU,OAAQ,CAClB,GAAI,GAAY,EAAO,MAAM,oBAAoB,GAAG,MAAM,MACtD,EAAe,GACnB,OAAS,GAAI,EAAG,EAAI,EAAG,IACnB,EAAa,KAAK,WAAW,EAAU,KAE3C,GAAI,GAA2B,KAC3B,EAAkB,EAAU,UAAU,EAAa,GAAI,EAAa,GAAI,EAAa,GAAI,EAAa,GAAI,EAAa,GAAI,EAAa,GAAI,EAAG,EAAG,GAClJ,EAA0B,KAC9B,GAAI,EAAM,gBAAiB,CACvB,GAAI,GAAQ,EAAM,gBAAgB,MAAM,KACpC,EAAK,OAAO,WAAW,EAAM,IAC7B,EAAK,OAAO,WAAW,EAAM,IACjC,EAA2B,EAAU,mBAAmB,CAAC,EAAI,CAAC,GAC9D,EAA0B,EAAU,mBAAmB,EAAI,GAE/D,AAAI,GAA4B,MAC5B,EAAY,KAAK,GACjB,GAAmB,MACnB,EAAY,KAAK,GACjB,GAA2B,MAC3B,EAAY,KAAK,GAEzB,AAAK,IAAM,GAAO,GAAM,IACpB,EAAY,KAAK,EAAU,mBAAmB,EAAI,IACtD,EAAK,EACL,IAEJ,KAAK,eAAiB,EAAU,oBAChC,OAAS,GAAI,EAAY,OAAS,EAAG,GAAK,EAAG,IACzC,KAAK,eAAiB,KAAK,eAAe,YAAY,EAAY,IAG1E,MAAO,MAAK,kBAEZ,gBAAgB,CAChB,MAAI,MAAK,gBAAkB,MACvB,MAAK,eAAiB,KAAK,cAAc,SAEtC,KAAK,eAEhB,oBAAqB,CACjB,GAAI,GAAI,GAAI,IAAgB,KAAM,MAClC,YAAK,kBAAkB,KAAK,GAC5B,KAAK,SACE,EAEX,aAAc,CAEV,GADA,KAAK,iBACD,KAAK,eAAiB,EACtB,KAAM,IAAI,YAAW,8BACzB,AAAI,KAAK,gBAAkB,GACvB,KAAK,SAEb,sBAAuB,CAEnB,GADA,KAAK,iBACD,KAAK,eAAiB,EACtB,KAAM,IAAI,YAAW,8BAE7B,eAAgB,CACZ,KAAK,iBAET,8BAA8B,EAAG,CAC7B,AAAI,KAAK,yBAAyB,QAAQ,GAAK,GAC3C,KAAK,yBAAyB,KAAK,GAE3C,WAAY,CACR,MAAQ,MAAK,gBAAkB,EAEnC,2BAA2B,EAAU,CAAE,KAAK,yBAA2B,EACvE,gBAAgB,EAAM,CAElB,GADA,EAAO,EAAK,QAAQ,MAAO;AAAA,GACvB,EAAK,QAAQ,KAAO,EACpB,MAAO,GACX,GAAI,GAAM,GAAI,MACd,SAAO,EAAK,QAAQ,QAAS,EAAI,SAAS,YAC1C,EAAO,EAAK,QAAQ,UAAW,EAAI,WAAW,YAC9C,EAAO,EAAK,QAAQ,SAAU,EAAI,cAAc,YAChD,EAAO,EAAK,QAAQ,SAAU,EAAI,WAAW,YAC7C,EAAO,EAAK,QAAQ,WAAY,EAAI,aAAa,YACjD,EAAO,EAAK,QAAQ,WAAY,EAAI,aAAa,YAC7C,KAAK,0BAA4B,MACjC,GAAO,KAAK,yBAAyB,IAClC,EAEX,oBAAqB,CACjB,GAAI,GAAI,GAAQ,YAAY,EAAc,aAAc,EAAc,cAOlE,EAAI,AANA,KAAK,cAMH,YAAY,GAAG,UAGzB,MAAK,GAAE,EAAI,GAAO,EAAE,EAAI,GAAO,EAAE,EAAI,KAAK,YAAY,aAAiB,EAAE,EAAI,KAAK,YAAY,aACnF,KACJ,KAIP,kCAAiC,EAAO,CACxC,KAAK,kCAAoC,EAE7C,0BAA0B,EAAQ,CAC9B,AAAI,KAAK,mCAAqC,MAC1C,KAAK,kCAAkC,GAE/C,wBAAyB,CACrB,MAAO,MAAK,YAAY,YAK5B,yBAA0B,CACtB,MAAO,MAAK,YAAY,aAK5B,KAAK,EAAW,CACZ,GAAI,CAAC,KAAK,YACN,MAAO,GACX,GAAI,GAAI,KAAK,yBACT,EAAI,KAAK,0BACb,GAAK,GAAK,GAAO,GAAK,EAClB,MAAO,GACX,KAAK,gBACL,GAAI,GAAkB,SAAS,cAAc,UAC7C,EAAgB,MAAQ,EACxB,EAAgB,OAAS,EAEzB,GAAI,GAAI,GAAI,IAAU,EAAiB,EAAG,EAAG,IACzC,EAAQ,YAAY,MACxB,GAAI,CACA,KAAK,OAAO,EAAG,EAAG,SAWf,EAAP,CACI,SACA,KAAK,IAAI,oBAAsB,EAAE,SAErC,GAAI,GAAU,YAAY,MAAQ,EAC9B,EAAW,KAAK,YAAY,WAAW,MAC3C,EAAS,UAAU,EAAG,EAAG,EAAG,GAC5B,EAAS,UAAU,EAAiB,EAAG,GACvC,KAAK,qBAAuB,EAC5B,KAAK,sBACL,GAAI,GAAM,KAAK,oBAAsB,KAAK,oBAC1C,SAAE,UACF,KAAK,uBACL,KAAK,0BACE,EAEX,yBAA0B,KACtB,aAAa,CAAE,MAAO,MAAK,eAC3B,YAAW,EAAO,CAClB,GAAI,GAAS,KAAK,YAAa,CAC3B,KAAK,gBACL,KAAK,YAAc,EACnB,OAAS,GAAI,EAAG,EAAI,KAAK,yBAAyB,OAAQ,IACtD,KAAK,yBAAyB,GAAG,WAAa,KAAK,YAEvD,KAAK,cACL,KAAK,UAGb,QAAS,CACL,AAAM,SAAS,kBAAoB,WAE/B,MAAK,eAAiB,GAEtB,KAAK,yBAA2B,GAEhC,KAAK,0BAA4B,GAEjC,MAAK,yBAA2B,MAChC,OAAO,qBAAqB,KAAK,yBAKrC,KAAK,wBAA0B,OAAO,sBAAsB,AAAC,GAAc,CACvE,GAAI,CACA,KAAK,KAAK,SAEP,EAAP,CACI,cAAQ,IAAI,UACZ,KAAK,wBAA0B,KACxB,EAEX,KAAK,wBAA0B,SAGvC,eAAgB,CAAE,MAAO,MAAK,yBAC9B,gBAAiB,CAAE,MAAO,MAAK,0BAC/B,sCAAsC,EAAS,CAE3C,GADA,KAAK,qBACD,KAAK,aAAe,EAAa,WAAW,MAC5C,OAAS,GAAI,EAAG,EAAI,KAAK,yBAAyB,OAAQ,IACtD,KAAK,yBAAyB,GAAG,4BAA4B,GAIzE,sCAAuC,CAEnC,GADA,KAAK,qBACD,KAAK,aAAe,EAAa,WAAW,MAC5C,OAAS,GAAI,EAAG,EAAI,KAAK,yBAAyB,OAAQ,IACtD,KAAK,yBAAyB,GAAG,sBAI7C,kCAAkC,EAAG,EAAG,CAEpC,GADA,KAAK,qBACD,KAAK,aAAe,EAAa,WAAW,MAC5C,OAAS,GAAI,EAAG,EAAI,KAAK,yBAAyB,OAAQ,IACtD,KAAK,yBAAyB,GAAG,iBAAiB,EAAG,GAIjE,kBAAmB,CACf,KAAK,gBAAgB,KAAM,MAE/B,gBAAgB,EAAQ,EAAG,CAEvB,KAAK,4BACL,KAAK,gBAEL,KAAK,YAAY,MAAQ,KAAK,YAAY,YAC1C,KAAK,YAAY,OAAS,KAAK,YAAY,aAE3C,KAAK,kCAAkC,KAAK,gBAAiB,KAAK,kBAClE,KAAK,cACL,KAAK,SAET,wBAAyB,CACrB,KAAK,kCAAkC,KAAK,gBAAiB,KAAK,kBAEtE,wBAAwB,EAAa,EACrC,EACA,EACA,EAAY,CACR,GAAI,GAAQ,GACR,EACA,EACA,EAAQ,KAAK,yBAA2B,KAAK,0BA+BjD,GA9BI,GAAc,MACd,GAAa,IACZ,IAAmB,MAAU,MAAO,IAAmB,cACxD,GAAkB,WACd,GAAe,EAAc,YAAY,KACzC,GAAkB,EAAkB,OAEpC,GAAe,EAAc,YAAY,KACzC,GAAkB,EAAkB,QAG5C,AAAK,GAAgB,MAAU,MAAQ,IAAiB,YACpD,GAAI,KAAK,yBACT,AAAK,GAAiB,MAAU,MAAQ,IAAkB,YACtD,EAAI,KAAK,0BAGT,GAAI,GAAiB,EACrB,EAAK,EAAI,GAAU,IAIvB,GAAI,GAAgB,EACpB,AAAK,GAAiB,MAAU,MAAQ,IAAkB,YACtD,EAAK,EAAI,GAAU,EAGnB,EAAI,GAAiB,GAGxB,GAAK,GAAO,GAAK,EAClB,OACJ,KAAK,gBACL,GAAI,GAAW,SAAS,cAAc,UACtC,EAAS,MAAQ,EACjB,EAAS,OAAS,EAClB,GAAI,GACJ,OAAQ,OACC,GAAc,YAAY,IAC3B,EAAI,GAAI,IAAU,EAAU,EAAG,EAAG,GAClC,UACC,GAAc,YAAY,IAC3B,EAAI,GAAI,GAAa,EAAU,EAAG,EAAG,GACrC,cAEA,KAAM,IAAI,YAAW,yBAE7B,GAAI,GAAU,EAAa,WAAW,EAAa,WAAW,eAAgB,KAAK,SAAU,KAAK,UAAW,EAAG,GAChH,KAAK,IAAI,iBACT,KAAK,sCAAsC,GAC3C,GAAI,GAAW,GACf,KAAK,eAAe,QAAU,GAC9B,GAAI,CACA,GAAI,GAAI,KAAK,OAAO,EAAG,EAAG,GAC1B,EAAW,SAER,EAAP,CACI,EAAQ,EAAE,QACV,KAAK,IAAI,iBAAmB,GAIhC,GAFA,KAAK,IAAI,qBACT,KAAK,uCACD,EAAU,CACV,GAAI,GAAU,SAAS,cAAc,KACjC,EAAO,EAAE,uBACb,EAAQ,aAAa,OAAQ,GAC7B,EAAQ,aAAa,WAAY,GACjC,EAAQ,MAAM,QAAU,OACxB,SAAS,KAAK,YAAY,GAC1B,EAAQ,QACR,SAAS,KAAK,YAAY,GAE9B,EAAE,UACF,KAAK,cAET,SAAS,EAAQ,EAAG,CAChB,KAAK,IAAI,aAEb,WAAY,EAIZ,UAAU,EAAQ,EAAG,KAGjB,0BAA0B,CAAE,MAAO,MAAK,4BACxC,yBAAwB,EAAO,CAAE,KAAK,yBAA2B,EACrE,YAAY,EAAa,EAAa,CAClC,KAAK,eAAiB,EACtB,KAAK,UAAY,EACjB,KAAK,WAAa,EAClB,KAAK,oBAAsB,EAC3B,KAAK,oBAAsB,EAC3B,KAAK,yBAA2B,KAChC,KAAK,aAAe,KACpB,KAAK,kBAAoB,GACzB,KAAK,UAAY,KACjB,KAAK,2BAA6B,KAClC,KAAK,oBAAsB,KAC3B,KAAK,sBAAwB,KAC7B,KAAK,WAAa,KAClB,KAAK,aAAe,KACpB,KAAK,eAAiB,GACtB,KAAK,eAAiB,KACtB,KAAK,eAAiB,KACtB,KAAK,yBAA2B,GAChC,KAAK,kCAAoC,KACzC,KAAK,YAAc,EAAa,WAAW,MAC3C,KAAK,wBAA0B,KAC/B,KAAK,eAAiB,KACtB,KAAK,eAAiB,KACtB,KAAK,yBAA2B,GAC3B,EAAc,oBACf,UAAS,iBAAiB,YAAa,GAAK,CAAE,EAAc,gBAAgB,KAC5E,EAAc,mBAAqB,IAEvC,KAAK,YAAc,EACnB,KAAK,YAAY,MAAQ,KAAK,yBAC9B,KAAK,YAAY,OAAS,KAAK,0BAE/B,KAAK,aAAe,EACpB,KAAK,WAAa,EAAY,cAC9B,KAAK,kBAAoB,GACzB,KAAK,eAAiB,GACtB,KAAK,gBACL,KAAK,eAAiB,KAAK,kBAC3B,KAAK,eAAe,eAAiB,EAAa,UAAU,OAC5D,KAAK,eAAe,KAAO,wBAC3B,KAAK,eAAe,cAAgB,EAAa,mBAAmB,OACpE,KAAK,eAAe,cAAgB,EAAa,iBAAiB,OAClE,KAAK,eAAe,QAAU,GAAI,GAAO,GAAO,IAAK,IAAM,IAAM,KACjE,KAAK,eAAe,KAAK,KAAO,GAChC,KAAK,uBACL,KAAK,oBAAsB,IAAM,CAAE,KAAK,gBAAgB,KAAM,OAC9D,SAAS,iBAAiB,SAAU,KAAK,qBACzC,KAAK,oBACL,KAAK,2BAA6B,IAAM,CACpC,AAAI,SAAS,kBAAoB,WAC7B,KAAK,UAGb,SAAS,iBAAiB,mBAAoB,KAAK,4BAEvD,SAAU,CACN,SAAS,oBAAoB,mBAAoB,KAAK,4BACtD,SAAS,oBAAoB,SAAU,KAAK,kBAC5C,KAAK,YAAY,WAAW,YAAY,KAAK,aAC7C,KAAK,YAAc,KACnB,KAAK,WAAa,KAClB,KAAK,kBAAoB,KACzB,KAAK,eAAiB,KACtB,KAAK,eAAiB,KACtB,KAAK,eAAiB,KAE1B,mBAAoB,CAChB,KAAK,UAAY,KAAK,yBACtB,KAAK,WAAa,KAAK,6BAEvB,WAAW,CAAE,MAAO,MAAK,aACzB,YAAY,CAAE,MAAO,MAAK,WAC9B,qBAAqB,EAAQ,EAAG,EAEhC,2BAA2B,EAAQ,EAAG,EAItC,iBAAkB,CACd,GAAI,GAAI,GAAI,GAAa,KAAM,MAC/B,YAAK,eAAe,KAAK,GAClB,EAEX,kBAAkB,EAAG,EAAe,EAAgB,CAEhD,OAAS,GAAI,EAAG,EAAI,KAAK,eAAe,OAAQ,IAC5C,GAAI,KAAK,eAAe,GAAG,QAAS,CAChC,GAAI,GAAI,KAAK,eAAe,GACxB,EAAiB,EAAgB,EAAI,EAAE,QAAU,EAAE,gBACvD,AAAI,EAAiB,KACjB,GAAiB,KACrB,GAAI,GAAQ,KACR,EAAS,GAEb,KAAO,CAAC,GACJ,EAAQ,EAAE,cAAc,EAAE,KAAM,EAAE,KAAM,GACxC,AAAM,GAAM,OAAS,KAAK,YAAY,OACjC,EAAM,QAAU,KAAK,YAAY,SAC9B,EAAE,KAAK,KAAO,EAClB,EAAE,KAAK,KAAO,KAAK,MAAM,EAAE,KAAK,KAAO,GAAK,GAG5C,EAAS,GAEjB,GAAI,GAAS,KACT,OACJ,GAAI,GAAa,EAAM,MAAQ,EAAI,EAAE,QAAU,EAAE,gBAC7C,EAAc,EAAM,OAAS,EAAI,EAAE,QAAU,EAAE,gBAC/C,EAAI,EACR,OAAQ,EAAE,mBACD,GAAa,mBAAmB,KACjC,EAAI,EAAE,iBACN,UACC,GAAa,mBAAmB,MACjC,EAAI,EAAgB,EAAa,EAAE,iBACnC,cAEA,EAAK,GAAgB,GAAc,EACnC,MAER,GAAI,GAAI,EACR,OAAQ,EAAE,mBACD,GAAa,iBAAiB,IAC/B,EAAI,EAAE,eACN,UACC,GAAa,iBAAiB,OAC/B,EAAI,EAAiB,EAAc,EAAE,eACrC,cAEA,EAAK,GAAiB,GAAe,EACrC,MAER,EAAE,kBAAkB,EAAE,QAAS,EAAG,EAAG,EAAY,GAC7C,EAAE,gBAAkB,GACpB,EAAE,kBAAkB,EAAE,IAAK,EAAG,EAAG,EAAY,GACjD,GAAI,GAAK,GAAI,GAAc,OAC3B,OAAQ,EAAE,oBACD,GAAa,UAAU,KACxB,EAAG,cAAgB,EACnB,EAAG,UAAY,EACf,UACC,GAAa,UAAU,MACxB,EAAG,cAAgB,EACnB,EAAG,UAAY,EACf,cAEA,EAAG,cAAgB,EACnB,EAAG,UAAY,EACf,MAER,GAAI,GAAI,GAAI,GAAa,EAAI,EAAE,QAAU,EAAE,gBAAkB,GAAM,EAAM,EAAI,EAAE,QAAU,EAAE,gBAAkB,GAAM,EAAI,EAAM,MAAQ,EAAG,EAAM,OAAS,GACvJ,EAAE,eAAe,EAAE,KAAM,EAAE,KAAM,EAAE,KAAK,MAAO,EAAG,IAI9D,qBAAqB,EAAG,EAAkB,EAAe,EAAgB,EAAS,EAAc,CAE5F,GAAI,GAAS,GACb,OAAS,GAAI,EAAG,EAAI,KAAK,iBAAiB,OAAQ,IAC9C,AAAI,KAAK,iBAAiB,GAAG,SACzB,GAAS,IAEjB,GAAI,EAAC,GAGL,OAAS,GAAI,EAAG,EAAI,KAAK,iBAAiB,OAAQ,IAC9C,GAAK,EAAiB,GAAG,SAAa,EAAiB,GAAG,SAAW,EAAU,CAC3E,GAAI,GAAI,EAAiB,GACrB,EAAiB,EAAgB,EAAI,EAAE,QAAU,EAAE,gBACvD,AAAI,EAAiB,KACjB,GAAiB,KACrB,GAAI,GAAgB,EAAE,KAAK,QAAQ,MAAO;AAAA,GAC1C,AAAI,EAAc,QAAQ,MAAQ,GAC9B,GAAgB,EAAc,QAAQ,MAAO;AAAA,GAC7C,EAAgB,KAAK,gBAAgB,IAEzC,GAAI,GAAQ,EAAE,cAAc,EAAe,EAAE,KAAM,GAC/C,EAAa,EAAM,MAAQ,EAAI,EAAE,QAAU,EAAE,gBAC7C,EAAc,EAAM,OAAS,EAAI,EAAE,QAAU,EAAE,gBAC/C,EAAI,EACR,OAAQ,EAAE,mBACD,GAAa,mBAAmB,KACjC,EAAI,EAAE,iBACF,CAAC,EAAiB,GAAG,SAAY,EAAa,QAAU,EAAa,IACrE,GAAa,QAAU,EAAa,IAExC,UACC,GAAa,mBAAmB,MACjC,EAAI,EAAgB,EAAa,EAAE,iBAC/B,CAAC,EAAiB,GAAG,SAAY,EAAa,QAAU,EAAa,IACrE,GAAa,QAAU,EAAa,IAExC,cAEA,EAAK,GAAgB,GAAc,EACnC,MAER,GAAI,GAAI,EACR,OAAQ,EAAE,mBACD,GAAa,iBAAiB,IAC/B,EAAI,EAAE,eACF,CAAC,EAAiB,GAAG,SAAY,EAAa,QAAU,EAAc,IACtE,GAAa,QAAU,EAAc,IAEzC,UACC,GAAa,iBAAiB,OAC/B,EAAI,EAAiB,EAAc,EAAE,eACjC,CAAC,EAAiB,GAAG,SAAY,EAAa,QAAU,EAAc,IACtE,GAAa,QAAU,EAAc,IAEzC,cAEA,EAAK,GAAiB,GAAe,EACrC,MAER,AAAI,EAAiB,GAAG,SACpB,IAAM,EAAiB,GAAG,gBAAkB,IAAQ,GAAgB,GACpE,GAAM,EAAiB,GAAG,gBAAkB,IAAQ,GAAiB,GACjE,EAAI,GACJ,GAAI,GACJ,EAAI,GACJ,GAAI,GACJ,EAAI,EAAgB,GACpB,GAAI,EAAgB,GACpB,EAAI,EAAiB,GACrB,GAAI,EAAiB,IAE7B,EAAE,kBAAkB,EAAE,QAAS,EAAG,EAAG,EAAY,GAC7C,EAAE,gBAAkB,GACpB,EAAE,kBAAkB,EAAE,IAAK,EAAG,EAAG,EAAY,GAEjD,GAAI,GAAK,GAAI,GAAc,OAC3B,OAAQ,EAAE,oBACD,GAAa,UAAU,KACxB,EAAG,cAAgB,EACnB,EAAG,UAAY,EACf,UACC,GAAa,UAAU,MACxB,EAAG,cAAgB,EACnB,EAAG,UAAY,EACf,cAEA,EAAG,cAAgB,EACnB,EAAG,UAAY,EACf,MAER,GAAI,GAAI,GAAI,GAAY,EAAI,EAAE,QAAU,EAAE,gBAAkB,EAAK,EAAI,EAAE,QAAU,EAAE,gBAAkB,EAAI,EAAM,MAAQ,EAAG,EAAM,OAAS,GACzI,EAAE,eAAe,EAAe,EAAE,KAAM,EAAE,KAAK,MAAO,EAAG,KAIrE,IAAI,EAAG,CACH,AAAI,KAAK,cAAgB,MAEzB,KAAK,aAAa,KAG1B,EAAc,cAAgB,GAC9B,EAAc,kBAAoB,CAAC,IAAK,IAAK,IAAK,MAAO,OAAQ,QAAS,UAC1E,EAAc,oBAAsB,GACpC,EAAc,mBAAqB,GACnC,EAAc,aAAe,GAC7B,EAAc,aAAe,GAC7B,AAAC,UAAU,EAAe,CACtB,eAAkC,EAAU,CACxC,YAAY,EAAO,EAAe,EAAW,CACzC,MAAM,EAAO,EAAe,IAGpC,EAAc,oBAAsB,EACpC,eAA0B,EAAM,EAEhC,EAAY,IAAM,GAAI,GAAoB,MAAO,gBACjD,EAAY,IAAM,GAAI,GAAoB,MAAO,gBACjD,EAAc,YAAc,EAC5B,eAAoC,EAAU,CAC1C,YAAY,EAAO,EAAe,EAAW,CACzC,MAAM,EAAO,EAAe,IAGpC,EAAc,sBAAwB,EACtC,eAA4B,EAAM,EAElC,EAAc,YAAc,GAAI,GAAsB,cAAe,aACrE,EAAc,OAAS,GAAI,GAAsB,SAAU,QAC3D,EAAc,cAAgB,EAC9B,eAAqC,EAAU,CAC3C,YAAY,EAAO,EAAe,EAAW,CACzC,MAAM,EAAO,EAAe,IAGpC,EAAc,uBAAyB,EACvC,eAA6B,EAAM,EAEnC,EAAe,KAAO,GAAI,GAAuB,OAAQ,sBACzD,EAAe,MAAQ,GAAI,GAAuB,QAAS,cAC3D,EAAe,WAAa,GAAI,GAAuB,aAAc,mCACrE,EAAe,YAAc,GAAI,GAAuB,cAAe,oCACvE,EAAc,eAAiB,IAChC,GAAkB,GAAgB,KAK9B,YAAgB,CACnB,YAAY,EAAQ,EAAO,EAAQ,EAAK,CACpC,KAAK,GAAK,KACV,KAAK,GAAK,KACV,KAAK,OAAS,EACd,KAAK,QAAU,EACf,KAAK,KAAO,EACZ,KAAK,OAAS,KACd,KAAK,SAAW,KAChB,KAAK,WAAa,KAClB,KAAK,UAAY,KACjB,KAAK,aAAe,EACpB,KAAK,mBAAqB,KAC1B,KAAK,eAAiB,EAAe,QACrC,KAAK,GAAK,EACV,KAAK,GAAK,KAAK,GAAG,WAAW,MAC7B,KAAK,GAAG,aAAe,MACvB,KAAK,OAAS,EACd,KAAK,QAAU,EACf,KAAK,KAAO,EAEhB,sBAAuB,CACnB,MAAO,MAAK,GAAG,UAAU,gBAEzB,WAAW,CAAE,MAAO,MAAK,GAC7B,OAAO,EAAG,CACN,GAAI,GAAK,KAAK,SAEd,IAAI,GAAK,KAAM,CACX,KAAK,GAAG,UAAY,EAAE,UACtB,GAAI,GAAK,EAAE,YACX,KAAK,GAAG,YAAc,EAAE,gBAGxB,MAAK,GAAG,UAAY,EAExB,KAAK,SAAW,GAEpB,SAAS,EAAG,CACR,GAAI,GAAK,KAAK,WAEd,IAAI,YAAa,GACb,KAAK,GAAG,UAAY,EAAE,MAAM,iBAEvB,YAAa,IAAsB,CACxC,GAAI,GAAU,KAAK,GAAG,qBAAqB,EAAG,EAAG,EAAG,KAAK,SACzD,EAAQ,aAAa,EAAG,EAAE,OAAO,UACjC,EAAQ,aAAa,EAAG,EAAE,OAAO,UACjC,KAAK,GAAG,UAAY,MAGpB,MAAM,IAAI,OAAM,oCAEpB,KAAK,WAAa,GAEtB,QAAQ,EAAG,CACP,AAAK,GAAK,KAAK,WAAc,CAAC,EAAE,YAEhC,MAAK,GAAG,KAAO,EAAE,SACjB,KAAK,UAAY,GAErB,WAAW,EAAG,EAAI,EAAI,EAAI,EAAI,CAC1B,GAAI,EAAE,YAAa,CACf,GAAI,GAAU,EAAE,WAAa,EAAE,WAAa,GAAQ,GAAE,UAAY,IAAM,EAAK,GAAM,EACnF,EAAK,KAAK,MAAM,GAAM,EACtB,EAAK,KAAK,MAAM,GAAM,EACtB,EAAK,KAAK,MAAM,GAAM,EACtB,EAAK,KAAK,MAAM,GAAM,EAE1B,KAAK,OAAO,GACZ,KAAK,GAAG,YACR,KAAK,GAAG,OAAO,EAAI,GACnB,KAAK,GAAG,OAAO,EAAI,GACnB,KAAK,GAAG,SAEZ,SAAS,EAAG,EAAI,EAAI,CAChB,KAAK,OAAO,GACZ,KAAK,GAAG,YACR,KAAK,GAAG,OAAO,EAAG,EAAG,EAAG,GACxB,KAAK,GAAG,OAAO,EAAG,EAAG,EAAG,GACxB,KAAK,GAAG,SAEZ,QAAQ,EAAM,CACV,KAAK,GAAG,OACR,KAAK,GAAG,YACR,KAAK,GAAG,KAAK,EAAK,EAAG,EAAK,EAAG,EAAK,EAAG,EAAK,GAC1C,KAAK,GAAG,OACR,KAAK,eAET,WAAY,CACR,GAAI,KAAK,cAAgB,EACrB,KAAM,IAAI,OAAM,wBACpB,KAAK,GAAG,UACR,KAAK,eAGT,cAAc,EAAM,EAAM,EAAO,CAC7B,KAAK,QAAQ,GACb,GAAI,GAAM,GAAI,IAAO,EAAM,GACvB,EAAQ,EAAI,WAChB,GAAI,GAAS,EACT,MAAO,GACX,EAAI,OAAS,EAAI,gBAAkB,IAAO,GAAQ,GAAK,EAAI,WAC3D,GAAI,GAAM,EACN,EACJ,OAAS,GAAI,EAAG,EAAI,EAAO,IACvB,EAAM,KAAK,GAAG,YAAY,EAAI,MAAM,IACpC,EAAM,KAAK,IAAI,EAAK,EAAI,OAE5B,SAAI,MAAQ,EACL,EAEX,gBAAgB,EAAM,EAAM,EAAO,EAAc,CAC7C,MAAO,MAAK,cAAc,EAAM,EAAM,GAE1C,cAAc,EAAO,EAAM,CACvB,KAAK,SAAS,GACd,KAAK,GAAG,YACR,KAAK,GAAG,SAAS,EAAK,EAAG,EAAK,EAAG,EAAK,EAAG,EAAK,GAC9C,KAAK,GAAG,OAEZ,kBAAkB,EAAO,EAAG,EAAG,EAAO,EAAQ,CAC1C,KAAK,SAAS,GACd,KAAK,GAAG,YACR,KAAK,GAAG,SAAS,EAAG,EAAG,EAAO,GAC9B,KAAK,GAAG,OAEZ,cAAc,EAAG,EAAM,CAGnB,GAFA,KAAK,OAAO,GACZ,KAAK,GAAG,YACJ,EAAE,YAAa,CACf,GAAI,GAAU,EAAE,WAAa,EAAE,WAAa,GAAQ,GAAE,UAAY,IAAM,EAAK,GAAM,EACnF,KAAK,GAAG,KAAK,KAAK,MAAM,EAAK,GAAK,EAAQ,KAAK,MAAM,EAAK,GAAK,EAAQ,KAAK,MAAM,EAAK,GAAI,KAAK,MAAM,EAAK,QAG3G,MAAK,GAAG,KAAK,EAAK,EAAG,EAAK,EAAG,EAAK,EAAG,EAAK,GAE9C,KAAK,GAAG,SAEZ,kBAAkB,EAAG,EAAG,EAAG,EAAO,EAAQ,CACtC,GAAI,EAAE,YAAa,CACf,GAAI,GAAU,EAAE,WAAa,EAAE,WAAa,GAAQ,GAAE,UAAY,IAAM,EAAK,GAAM,EACnF,EAAI,KAAK,MAAM,GAAK,EACpB,EAAI,KAAK,MAAM,GAAK,EACpB,EAAQ,KAAK,MAAM,GACnB,EAAS,KAAK,MAAM,GAExB,KAAK,OAAO,GACZ,KAAK,GAAG,YACR,KAAK,GAAG,KAAK,EAAG,EAAG,EAAO,GAC1B,KAAK,GAAG,SAEZ,aAAa,EAAG,EAAM,EAAO,EAAG,EAAG,CAC/B,KAAK,OAAO,MACZ,KAAK,SAAS,GACd,KAAK,QAAQ,GACb,GAAI,GAAU,KAAK,cAAc,EAAG,EAAM,GACtC,EAAK,EAAQ,WACjB,OAAS,GAAI,EAAG,EAAI,EAAQ,WAAY,IACpC,KAAK,GAAG,SAAS,EAAQ,MAAM,GAAI,EAAG,GACtC,GAAK,EAGb,cAAc,EAAG,EAAM,EAAO,EAAG,EAAG,EAAQ,CACxC,GAAI,GAAU,iBAAkB,CAC5B,GAAI,GAAM,GAAI,GAAK,EAAO,IAAK,GAC/B,KAAK,WAAW,EAAK,EAAI,EAAG,EAAG,EAAI,EAAG,GACtC,KAAK,WAAW,EAAK,EAAG,EAAI,EAAG,EAAG,EAAI,GAE1C,GAAI,GAAK,KAAK,cAAc,EAAG,EAAM,KACrC,AAAI,EAAO,WAAa,EACpB,GAAK,EAAG,OAAS,EAEZ,EAAO,WAAa,GACzB,IAAK,EAAG,OACZ,AAAI,EAAO,eAAiB,EACxB,GAAM,EAAG,OAAS,GAAM,EAEnB,EAAO,eAAiB,GAC7B,IAAK,EAAG,QACZ,KAAK,aAAa,EAAG,EAAM,EAAO,EAAG,GAEzC,aAAa,EAAG,EAAM,EAAO,EAAG,EAAQ,CACpC,KAAK,cAAc,EAAG,EAAM,EAAO,EAAE,EAAG,EAAE,EAAG,GAEjD,WAAW,EAAG,EAAM,EAAO,EAAG,CAC1B,GAAI,GAAU,iBAAkB,CAC5B,GAAI,GAAM,GAAI,GAAK,EAAO,IAAK,GAC/B,KAAK,WAAW,EAAK,EAAE,EAAI,EAAG,EAAE,EAAG,EAAE,EAAI,EAAG,EAAE,GAC9C,KAAK,WAAW,EAAK,EAAE,EAAG,EAAE,EAAI,EAAG,EAAE,EAAG,EAAE,EAAI,GAElD,KAAK,OAAO,MACZ,KAAK,SAAS,GACd,KAAK,QAAQ,GACb,KAAK,GAAG,SAAS,EAAG,EAAE,EAAG,EAAE,GAE/B,eAAe,EAAG,EAAM,EAAO,EAAiB,EAAQ,CACpD,GAAI,GAAU,iBAAkB,CAC5B,GAAI,GAAM,GAAI,GAAK,EAAO,IAAK,GAC/B,KAAK,cAAc,EAAK,GAE5B,KAAK,OAAO,MACZ,KAAK,SAAS,GACd,KAAK,QAAQ,GACb,GAAI,GAAU,KAAK,cAAc,EAAG,EAAM,GACtC,EAAK,EAAQ,WACb,EAAI,EAAgB,EACxB,OAAQ,EAAO,mBACN,GACD,UACC,GACD,GAAM,GAAgB,EAAI,EAAQ,QAAU,EAC5C,UACC,GACD,GAAM,EAAgB,EAAI,EAAQ,OAClC,MAER,GAAI,GAAU,EAAgB,EAC9B,AAAI,EAAO,YAAc,GACrB,MAAK,UAAU,EAAgB,EAAG,EAAgB,EAAG,KAAK,GAAK,GAC/D,GAAM,EAAgB,EAAI,EAAgB,EAC1C,GAAW,EAAgB,GAE/B,OAAS,GAAI,EAAG,EAAI,EAAQ,WAAY,IAAK,CACzC,GAAI,GAAI,EAAQ,MAAM,GAClB,EAAK,KAAK,cAAc,EAAG,EAAM,GACjC,EAAI,EACR,OAAQ,EAAO,eACN,GACD,UACC,GACD,GAAM,GAAgB,EAAI,EAAG,OAAS,EACtC,UACC,GACD,GAAM,EAAgB,EAAI,EAAG,MAC7B,MAER,KAAK,GAAG,SAAS,EAAG,EAAG,GACvB,GAAK,EAET,AAAI,EAAO,YAAc,GACrB,KAAK,iBAEb,UAAU,EAAI,EAAI,EAAO,CACrB,GAAI,GAAM,KAAK,IAAI,GACf,EAAM,KAAK,IAAI,GACnB,KAAK,GAAG,OACR,KAAK,GAAG,UAAU,EAAK,EAAK,CAAC,EAAK,EAAK,EAAI,GAE/C,gBAAiB,CACb,KAAK,GAAG,UAEZ,YAAY,EAAO,EAAG,EAAG,EAAO,EAAQ,CACpC,KAAK,SAAS,GACd,KAAK,GAAG,YACR,KAAK,GAAG,QAAQ,EAAI,EAAQ,EAAG,EAAI,EAAS,EAAG,EAAQ,EAAG,EAAS,EAAG,EAAG,EAAG,EAAI,KAAK,IACrF,KAAK,GAAG,OAEZ,YAAY,EAAK,EAAG,EAAG,EAAO,EAAQ,CAClC,KAAK,OAAO,GACZ,KAAK,GAAG,YACR,KAAK,GAAG,QAAQ,EAAI,EAAQ,EAAG,EAAI,EAAS,EAAG,EAAQ,EAAG,EAAS,EAAG,EAAG,EAAG,EAAI,KAAK,IACrF,KAAK,GAAG,SAEZ,YAAY,EAAO,EAAQ,CAEvB,GADA,KAAK,SAAS,GACV,IAAO,QAAU,GAGrB,IADA,KAAK,GAAG,YACJ,EAAM,YAAa,CACnB,KAAK,GAAG,OAAO,KAAK,MAAM,EAAO,GAAG,GAAK,GAAK,KAAK,MAAM,EAAO,GAAG,GAAK,IACxE,OAAS,GAAI,EAAG,EAAI,EAAO,OAAQ,IAC/B,KAAK,GAAG,OAAO,KAAK,MAAM,EAAO,GAAG,GAAK,GAAK,KAAK,MAAM,EAAO,GAAG,GAAK,QAG3E,CACD,KAAK,GAAG,OAAO,EAAO,GAAG,EAAG,EAAO,GAAG,GACtC,OAAS,GAAI,EAAG,EAAI,EAAO,OAAQ,IAC/B,KAAK,GAAG,OAAO,EAAO,GAAG,EAAG,EAAO,GAAG,GAG9C,KAAK,GAAG,YACR,KAAK,GAAG,QAEZ,YAAY,EAAK,EAAQ,CAErB,GADA,KAAK,OAAO,GACR,IAAO,QAAU,GAGrB,IADA,KAAK,GAAG,YACJ,EAAI,YAAa,CACjB,GAAI,GAAU,EAAI,WAAa,EAAI,WAAa,GAAQ,GAAI,UAAY,IAAM,EAAK,GAAM,EACzF,KAAK,GAAG,OAAO,KAAK,MAAM,EAAO,GAAG,GAAK,EAAQ,KAAK,MAAM,EAAO,GAAG,GAAK,GAC3E,OAAS,GAAI,EAAG,EAAI,EAAO,OAAQ,IAC/B,KAAK,GAAG,OAAO,KAAK,MAAM,EAAO,GAAG,GAAK,EAAQ,KAAK,MAAM,EAAO,GAAG,GAAK,OAG9E,CACD,KAAK,GAAG,OAAO,EAAO,GAAG,EAAG,EAAO,GAAG,GACtC,OAAS,GAAI,EAAG,EAAI,EAAO,OAAQ,IAC/B,KAAK,GAAG,OAAO,EAAO,GAAG,EAAG,EAAO,GAAG,GAG9C,KAAK,GAAG,YACR,KAAK,GAAG,UAEZ,UAAU,EAAK,EAAQ,CAEnB,GADA,KAAK,OAAO,GACR,IAAO,QAAU,GAErB,MAAK,GAAG,YACR,KAAK,GAAG,QAAU,QAClB,KAAK,GAAG,SAAW,QACnB,KAAK,GAAG,OAAO,EAAO,GAAG,EAAG,EAAO,GAAG,GACtC,OAAS,GAAI,EAAG,EAAI,EAAO,OAAQ,IAC/B,KAAK,GAAG,OAAO,EAAO,GAAG,EAAG,EAAO,GAAG,GAE1C,KAAK,GAAG,UAEZ,SAAU,CACN,KAAK,GAAK,KACV,KAAK,GAAK,KACV,KAAK,OAAS,EACd,KAAK,QAAU,EACf,KAAK,KAAO,KAEZ,oBAAoB,CAAE,MAAO,MAAK,sBAClC,mBAAkB,EAAO,CAAE,KAAK,mBAAqB,KACrD,gBAAgB,CAAE,MAAO,MAAK,kBAC9B,eAAc,EAAO,CAAE,KAAK,eAAiB,EACjD,UAAU,EAAU,EAAU,EAAS,EAAS,CAE5C,KAAK,GAAG,UAAU,EAAU,EAAQ,EAAG,EAAQ,EAAG,EAAQ,EAAG,EAAQ,EAAG,EAAS,EAAG,EAAS,EAAG,EAAS,EAAG,EAAS,GAEzH,QAAQ,EAAG,IAEf,GAAU,iBAAmB,GACtB,mBAA2B,GAAU,CACxC,YAAY,EAAQ,EAAO,EAAQ,EAAK,CACpC,MAAM,EAAQ,EAAO,EAAQ,GAC7B,KAAK,WAAa,EAClB,KAAK,qBAAuB,EAC5B,KAAK,0BAA4B,EACjC,KAAK,eAAiB,EACtB,EAAa,QACb,KAAK,SAAW,GAAI,IACpB,KAAK,aAAe,GAAI,IACxB,KAAK,SAAS,WAAW,0BAA6B,EAAa,MAAM,WAAa,+BAAuC,EAAM,WAAa,aAAiB,EAAO,WAAa,wBAElL,WAAU,EAAQ,CACrB,MAAO,GAAO,QAAQ,mBAAoB,AAAC,GAAM,KAAO,EAAE,WAAW,GAAK,KAE9E,sBAAuB,CACnB,MAAO,6BAA+B,KAAK,KAAK,mBAEpD,WAAW,EAAG,EAAI,EAAI,EAAI,EAAI,CAC1B,KAAK,aAAa,WAAW,aAAgB,EAAG,WAAa,WAC3C,EAAG,WAAa,WAChB,EAAG,WAAa,WAChB,EAAG,WAAa,qBACN,EAAE,MAAM,QAAU,mBAAqB,EAAE,MAAM,UAAY,kBAAoB,EAAE,UAAU,WAAa,OAExI,SAAS,EAAG,EAAI,EAAI,CAAE,KAAK,WAAW,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC9D,QAAQ,EAAM,CACV,KAAK,YACL,KAAK,SAAS,WAAW,sBAAyB,EAAa,MAAM,WAAa,IAAM,KAAK,WAAW,WAAa,cAAkB,EAAK,EAAE,WAAa,QAAY,EAAK,EAAE,WACxK,aAAiB,EAAK,EAAE,WAAa,aAAiB,EAAK,EAAE,WAAa,kBAChF,KAAK,aAAa,WAAW,2BAA8B,EAAa,MAAM,WAAa,IAAM,KAAK,WAAW,WAAa,OAC9H,KAAK,aACL,KAAK,uBAET,WAAY,CACR,AAAI,KAAK,qBAAuB,GAC5B,MAAK,aAAa,WAAW,QAC7B,KAAK,wBAGb,WAAW,EAAO,EAAQ,CACtB,GAAI,GAAY,GAChB,GAAI,YAAiB,GACjB,EAAY,WAAc,EAAM,MAAM,QAAU,mBAAuB,EAAM,MAAM,UAAY,aAE1F,YAAiB,IACtB,KAAK,SAAS,WAAW,4BAA+B,EAAa,MAAM,WAAa,IAAM,KAAK,eAAiB,aAE7G,GAAS,aAAiB,YAC3B,WACC,GAAS,WAAe,cAAkB;AAAA,uCACE,EAAM,OAAO,QAAU,iBAAmB,EAAM,OAAO,UAAY;AAAA,yCACjE,EAAM,OAAO,QAAU,iBAAmB,EAAM,OAAO,UAAY;AAAA,oBAExH,EAAY,mBAAsB,EAAa,MAAM,WAAa,IAAM,KAAK,eAAiB,MAC9F,KAAK,qBAGL,MAAM,IAAI,gBAAe,2BAE7B,MAAO,GAEX,cAAc,EAAO,EAAM,CACvB,KAAK,aAAa,WAAW,YAAe,EAAK,EAAE,WAAa,UAC/C,EAAK,EAAE,WAAa,cAChB,EAAK,EAAE,WAAa,eACnB,EAAK,EAAE,WAAa,KACpC,KAAK,WAAW,EAAO,IACvB,4BAEV,kBAAkB,EAAO,EAAG,EAAG,EAAO,EAAQ,CAAE,KAAK,cAAc,EAAO,GAAI,GAAW,EAAG,EAAG,EAAO,IACtG,cAAc,EAAG,EAAM,CACnB,KAAK,aAAa,WAAW,YAAe,EAAK,EAAE,WAAa,UAC/C,EAAK,EAAE,WAAa,cAChB,EAAK,EAAE,WAAa,eACnB,EAAK,EAAE,WAAa,kCAEd,EAAE,MAAM,QAAU,mBAAqB,EAAE,MAAM,UAAY,kBAAoB,EAAE,UAAU,WAAa,OAExI,kBAAkB,EAAG,EAAG,EAAG,EAAO,EAAQ,CAAE,KAAK,cAAc,EAAG,GAAI,GAAW,EAAG,EAAG,EAAO,IAC9F,YAAY,EAAK,EAAG,EAAG,EAAO,EAAQ,CAClC,KAAK,aAAa,WAAW,iBAAqB,GAAI,EAAQ,GAAK,WAAa,WAC7D,GAAI,EAAS,GAAK,WAAa,WAC/B,GAAQ,GAAG,WAAa,WACxB,GAAS,GAAG,WAAa,kCAEhB,EAAI,MAAM,QAAU,mBAAqB,EAAI,MAAM,UAAY,kBAAoB,EAAI,UAAU,WAAa,OAE9I,YAAY,EAAO,EAAG,EAAG,EAAO,EAAQ,CACpC,KAAK,aAAa,WAAW,iBAAqB,GAAI,EAAQ,GAAK,WAAa,WAC7D,GAAI,EAAS,GAAK,WAAa,WAC/B,GAAQ,GAAG,WAAa,WACxB,GAAS,GAAG,WAAa,KACtC,KAAK,WAAW,EAAO,IACvB,4BAEV,aAAa,EAAG,EAAM,EAAO,EAAG,EAAG,CAC/B,GAAI,GAAS,EAAE,MAAM;AAAA,GACrB,OAAS,GAAI,EAAG,EAAI,EAAO,OAAQ,IAC/B,EAAI,EAAO,GACX,KAAK,aAAa,WAAW,YAAe,EAAE,WAAa,QAAa,GAAI,EAAK,cAAc,WAAa,sCACnF,EAAK,KAAK,WAAa,gBACzB,EAAK,aAAa,WAAa,oBAC5B,GAAK,KAAO,OAAS,UAAY,iBAClC,GAAK,OAAS,SAAW,UAAY,KACxD,KAAK,WAAW,EAAO,IACvB;AAAA,EACA,EAAa,UAAU,GACvB;AAAA,UACN,GAAM,EAAK,aAAe,KAGlC,WAAW,EAAG,EAAM,EAAO,EAAG,CAC1B,GAAI,GAAU,iBAAkB,CAC5B,GAAI,GAAM,GAAI,GAAK,EAAO,IAAK,GAC/B,KAAK,WAAW,EAAK,EAAE,EAAI,EAAG,EAAE,EAAG,EAAE,EAAI,EAAG,EAAE,GAC9C,KAAK,WAAW,EAAK,EAAE,EAAG,EAAE,EAAI,EAAG,EAAE,EAAG,EAAE,EAAI,GAElD,KAAK,aAAa,EAAG,EAAM,EAAO,EAAE,EAAG,EAAE,GAE7C,YAAY,EAAG,EAAM,EAAO,EAAO,EAAQ,CACvC,GAAI,GAAU,KAAK,cAAc,EAAG,EAAM,GACtC,EAAI,EAAM,EAAI,EAAK,KAAO,KAC9B,OAAQ,EAAO,mBACN,GACD,UACC,GACD,GAAK,CAAC,EAAQ,OAAS,EACvB,UACC,GACD,GAAK,CAAC,EAAQ,OACd,MAER,GAAI,GAAS,EAAE,MAAM;AAAA,GACrB,OAAS,GAAI,EAAG,EAAI,EAAO,OAAQ,IAAK,CACpC,GAAI,GAAI,EAAO,GACX,EAAK,KAAK,cAAc,EAAG,EAAM,GACjC,EAAI,EAAM,EACd,OAAQ,EAAO,eACN,GACD,UACC,GACD,GAAK,CAAC,EAAG,MAAQ,EACjB,UACC,GACD,GAAK,CAAC,EAAG,MACT,MAER,KAAK,aAAa,WAAW,YAAe,EAAE,WAAa,QAAY,EAAE,WAAa,sCAC7D,EAAK,KAAK,WAAa,gBACzB,EAAK,aAAa,WAAa,oBAC5B,GAAK,KAAO,OAAS,UAAY,iBAClC,GAAK,OAAS,SAAW,UAAY,KACxD,KAAK,WAAW,EAAO,IACvB;AAAA,EACA,EAAa,UAAU,GACvB;AAAA,UACN,GAAM,EAAK,aAAe,MAGlC,eAAe,EAAG,EAAM,EAAO,EAAiB,EAAQ,CACpD,GAAI,GAAU,iBAAkB,CAC5B,GAAI,GAAM,GAAI,GAAK,EAAO,IAAK,GAC/B,KAAK,cAAc,EAAK,GAE5B,GAAI,GAAU,KAAK,cAAc,EAAG,EAAM,GACtC,EAAI,EAAgB,EAAI,EAAK,aAAe,IAChD,OAAQ,EAAO,mBACN,GACD,UACC,GACD,GAAM,GAAgB,EAAI,EAAQ,QAAU,EAC5C,UACC,GACD,GAAM,EAAgB,EAAI,EAAQ,OAClC,MAER,GAAI,GAAS,EAAE,MAAM;AAAA,GACrB,OAAS,GAAI,EAAG,EAAI,EAAO,OAAQ,IAAK,CACpC,GAAI,GAAI,EAAO,GACX,EAAK,KAAK,cAAc,EAAG,EAAM,GACjC,EAAI,EAAgB,EACxB,OAAQ,EAAO,eACN,GACD,UACC,GACD,GAAM,GAAgB,EAAI,EAAG,OAAS,EACtC,UACC,GACD,GAAM,EAAgB,EAAI,EAAG,MAC7B,MAER,KAAK,aAAa,WAAW,YAAe,EAAE,WAAa,QAAY,EAAE,WAAa,sCAC7D,EAAK,KAAK,WAAa,gBACxB,GAAK,aAAe,KAAK,WAAa,oBACpC,GAAK,KAAO,OAAS,UAAY,iBAClC,GAAK,OAAS,SAAW,UAAY,KACxD,KAAK,WAAW,EAAO,IACvB;AAAA,EACA,EAAa,UAAU,GACvB;AAAA,UACN,GAAM,EAAK,aAAe,MAGlC,UAAU,EAAI,EAAI,EAAO,CACrB,KAAK,aAAa,WAAW,2BAA8B,EAAG,WAAa,IAAM,EAAG,WAAa,YAAe,KAAM,EAAQ,KAAK,IAAI,WAAa,OACpJ,KAAK,4BAET,gBAAiB,CACb,AAAI,KAAK,0BAA4B,GACjC,MAAK,aAAa,WAAW,QAC7B,KAAK,6BAGb,YAAY,EAAK,EAAQ,CACrB,GAAI,IAAO,OAAS,GAEpB,MAAK,aAAa,OAAO,eAAkB,EAAO,GAAG,EAAE,WAAa,IAAM,EAAO,GAAG,EAAE,YACtF,OAAS,GAAI,EAAG,EAAI,EAAO,OAAQ,GAAK,EACpC,KAAK,aAAa,OAAO,MAAQ,EAAO,GAAG,EAAE,WAAa,IAAM,EAAO,GAAG,EAAE,YAEhF,KAAK,aAAa,WAAW,iCACH,EAAI,MAAM,QAAU,mBAAqB,EAAI,MAAM,UAAY,kBAAoB,EAAI,UAAU,WAAa,QAE5I,UAAU,EAAK,EAAQ,CACnB,GAAI,IAAO,OAAS,GAEpB,MAAK,aAAa,OAAO,eAAkB,EAAO,GAAG,EAAE,WAAa,IAAM,EAAO,GAAG,EAAE,YACtF,OAAS,GAAI,EAAG,EAAI,EAAO,OAAQ,IAC/B,KAAK,aAAa,OAAO,MAAQ,EAAO,GAAG,EAAE,WAAa,IAAM,EAAO,GAAG,EAAE,YAEhF,KAAK,aAAa,WAAW,+BACH,EAAI,MAAM,QAAU,mBAAqB,EAAI,MAAM,UAAY,8DAAgE,EAAI,UAAU,WAAa,QAExL,YAAY,EAAO,EAAQ,CACvB,GAAI,IAAO,OAAS,GAEpB,MAAK,aAAa,OAAO,eAAkB,EAAO,GAAG,EAAE,WAAa,IAAM,EAAO,GAAG,EAAE,YACtF,OAAS,GAAI,EAAG,EAAI,EAAO,OAAQ,IAC/B,KAAK,aAAa,OAAO,MAAQ,EAAO,GAAG,EAAE,WAAa,IAAM,EAAO,GAAG,EAAE,YAEhF,KAAK,aAAa,WAAW,OAAU,KAAK,WAAW,EAAO,IACxD;AAAA,IAEV,UAAU,EAAO,EAAU,EAAS,EAAS,CAAE,KAAM,IAAI,OAAM,+CAC/D,KAAK,EAAU,CACX,KAAM,IAAI,OAAM,sCAEpB,QAAQ,EAAG,CAAE,KAAK,aAAa,WAAW,OAAS,EAAI,OACvD,iBAAkB,CACd,GAAI,GAAiB,MAAQ,MAAK,OAAS,KAAK,OAAO,QAAQ,GAC3D,EAAkB,MAAQ,MAAK,QAAU,KAAK,OAAO,QAAQ,GACjE,KAAO,KAAK,qBAAuB,GAC/B,KAAK,aAAa,WAAW,QAC7B,KAAK,uBAET,KAAO,KAAK,0BAA4B,GACpC,KAAK,aAAa,WAAW,QAC7B,KAAK,4BAET,MAAO;AAAA;AAAA,gBAEmB,EAAgB,iBAAqB,EAAiB,sBAA0B,KAAK,OAAO,WAAa,IAAM,KAAK,QAAQ,WAAa;AAAA;AAAA,EAG7J,KAAK,SAAS,SACd;AAAA,8BACkC,EAAa,MAAM,WAAa;AAAA,EAClE,KAAK,aAAa,SAClB;AAAA;AAAA,IAId,EAAa,MAAQ,EC5hFd,oBAA0C,GAAK,IAC9C,OAAO,CACP,MAAO,MAAK,MAEhB,YAAY,EAAO,CACf,KAAK,MAAQ,GAAI,OAAM,GAAO,KAAK,MAEvC,aAAa,EAAO,EAAG,CACnB,KAAK,MAAM,GAAS,EAExB,WAAY,CACR,KAAK,MAAQ,KAEjB,YAAa,CACT,KAAK,eAEL,QAAQ,CACR,MAAO,MAAK,UAEZ,OAAM,EAAO,CACb,GAAI,GAAS,EACT,KAAM,IAAI,YAAW,kCACzB,KAAK,OAAS,EACd,KAAK,MAAQ,KACb,KAAK,gBAAgB,YAErB,cAAc,CACd,MAAO,MAAK,gBAEZ,aAAY,EAAO,CACnB,KAAK,aAAe,KAAK,IAAI,EAAG,KAAK,IAAI,IAAK,IAC9C,KAAK,MAAQ,KACb,KAAK,gBAAgB,SAEzB,YAAY,EAAgB,EAAc,CACtC,MAAM,EAAgB,GACtB,KAAK,MAAQ,KACb,KAAK,OAAS,GACd,KAAK,aAAe,KAGrB,gBAA2C,EAAc,IACxD,MAAM,CACN,MAAO,MAAK,QAEZ,KAAI,EAAO,CACX,GAAK,GAAS,KAAK,MAAU,CAAC,AAAe,EAAc,oBACvD,KAAM,IAAI,YAAW,mCAAqC,KAAK,KAAK,WAAa,KAErF,KAAK,KAAO,EACZ,OAAS,GAAI,EAAG,EAAI,KAAK,OAAO,OAAQ,IACpC,KAAK,OAAO,GAAG,YAEnB,AAAI,KAAK,aAAe,KAAK,MACzB,MAAK,aAAe,KAAK,MAE7B,KAAK,YAEL,MAAM,CACN,MAAO,MAAK,QAEZ,KAAI,EAAO,CACX,GAAK,GAAS,KAAK,MAAU,CAAC,AAAe,EAAc,oBACvD,KAAM,IAAI,YAAW,gCAAkC,KAAK,KAAK,WAAa,KAElF,KAAK,KAAO,EACZ,OAAS,GAAI,EAAG,EAAI,KAAK,OAAO,OAAQ,IACpC,KAAK,OAAO,GAAG,YAEnB,AAAI,KAAK,aAAe,KAAK,MACzB,MAAK,aAAe,KAAK,MAE7B,KAAK,YAEL,YAAY,CACZ,MAAI,MAAK,YAAc,MACnB,MAAK,WAAa,GAAmB,GAAK,KAAK,aAAc,KAAK,kBAClE,KAAK,WAAW,SAAW,EAC3B,KAAK,WAAW,OAAS,GAEtB,KAAK,cAEZ,cAAc,CACd,MAAO,MAAK,gBAEZ,aAAY,EAAO,CACnB,KAAK,aAAe,EACpB,KAAK,WAAa,KAClB,KAAK,YAEL,mBAAmB,CACnB,MAAO,MAAK,qBAEZ,kBAAiB,EAAO,CACxB,KAAK,kBAAoB,EACzB,KAAK,SAAW,KAChB,KAAK,YAEL,mBAAmB,CACnB,MAAO,MAAK,qBAEZ,kBAAiB,EAAO,CACxB,KAAK,kBAAoB,EACzB,KAAK,SAAW,KAChB,KAAK,YAEL,kBAAkB,CAClB,MAAO,MAAK,oBAEZ,iBAAgB,EAAO,CACvB,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,sCACzB,KAAK,iBAAmB,EACxB,KAAK,WAAa,KAClB,KAAK,YAEL,gBAAgB,CAChB,MAAO,MAAK,kBAEZ,eAAc,EAAO,CACrB,KAAK,eAAiB,EACtB,KAAK,YAEL,iBAAiB,CACjB,MAAO,MAAK,mBAEZ,gBAAe,EAAO,CACtB,KAAK,gBAAkB,EACvB,KAAK,YAEL,YAAY,CACZ,MAAO,MAAK,cAEZ,WAAU,EAAO,CACjB,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,sCACzB,KAAK,WAAa,KAAK,IAAI,KAAK,IAAI,EAAO,IAAK,GAChD,KAAK,YAEL,QAAQ,CACR,MAAO,MAAK,UAEZ,OAAM,EAAO,CACb,KAAK,OAAS,EACd,KAAK,YAEL,SAAS,CACT,MAAO,MAAK,WAEZ,QAAO,EAAO,CACd,KAAK,QAAU,EACf,KAAK,YAEL,SAAS,CACT,MAAO,MAAK,WAEZ,QAAO,EAAO,CACd,KAAK,QAAU,EACf,KAAK,YAEL,kBAAkB,CAClB,MAAO,MAAK,oBAEZ,iBAAgB,EAAO,CACvB,KAAK,iBAAmB,EACxB,KAAK,eAAiB,KACtB,KAAK,YAEL,sBAAsB,CACtB,MAAO,MAAK,wBAEZ,qBAAoB,EAAO,CAC3B,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,sCACzB,KAAK,qBAAuB,EAC5B,KAAK,eAAiB,KACtB,KAAK,YAEL,iBAAiB,CACjB,MAAO,MAAK,mBAEZ,gBAAe,EAAO,CACtB,GAAI,GAAS,EACT,KAAM,IAAI,YAAW,4CACzB,KAAK,gBAAkB,EACvB,KAAK,YAEL,aAAa,CACb,MAAO,MAAK,eAEZ,YAAW,EAAO,CAClB,KAAK,YAAc,EACnB,KAAK,YAEL,aAAa,CACb,MAAO,MAAK,eAEZ,YAAW,EAAO,CAClB,GAAI,GAAS,EACT,KAAM,IAAI,YAAW,0BACzB,KAAK,YAAc,EACnB,KAAK,YAEL,OAAO,CACP,MAAO,MAAK,SAEZ,MAAK,EAAO,CACZ,KAAK,MAAQ,EACb,KAAK,YAEL,WAAW,CACX,MAAO,MAAK,aAEZ,qBAAqB,CACrB,MAAO,MAAK,uBAEZ,oBAAmB,EAAO,CAC1B,KAAK,oBAAsB,EAC3B,KAAK,kBAAoB,KACzB,KAAK,YAEL,yBAAyB,CACzB,MAAO,MAAK,2BAEZ,wBAAuB,EAAO,CAC9B,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,sCACzB,KAAK,wBAA0B,EAC/B,KAAK,kBAAoB,KACzB,KAAK,YAEL,oBAAoB,CACpB,MAAO,MAAK,sBAEZ,mBAAkB,EAAO,CACzB,GAAI,GAAS,EACT,KAAM,IAAI,YAAW,iCACzB,KAAK,mBAAqB,EAC1B,KAAK,YAEL,4BAA4B,CAC5B,MAAO,MAAK,8BAEZ,2BAA0B,EAAO,CACjC,KAAK,2BAA6B,KAAK,IAAI,EAAG,KAAK,IAAI,IAAK,IAC5D,KAAK,YAEL,qBAAqB,CACrB,MAAO,MAAK,uBAEZ,oBAAmB,EAAO,CAC1B,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,kCACzB,KAAK,oBAAsB,EAC3B,KAAK,YAEL,cAAc,CACd,MAAO,MAAK,gBAEZ,aAAY,EAAO,CACnB,KAAK,aAAe,EACpB,KAAK,YAEL,aAAa,CACb,MAAO,MAAK,aAEZ,aAAa,CACb,MAAO,MAAK,eAEZ,YAAW,EAAO,CAClB,KAAK,YAAc,EACnB,KAAK,YAEL,aAAa,CACb,MAAO,MAAK,eAEZ,YAAW,EAAO,CAClB,KAAK,YAAc,EACnB,KAAK,YAEL,cAAc,CACd,MAAO,MAAK,gBAEZ,aAAY,EAAO,CACnB,KAAK,aAAe,EACpB,KAAK,aAAe,KACpB,KAAK,YAEL,iBAAiB,CACjB,MAAO,MAAK,mBAEZ,gBAAe,EAAO,CACtB,GAAI,GAAS,EACT,KAAM,IAAI,YAAW,kCACzB,KAAK,gBAAkB,EACvB,KAAK,YAEL,gBAAgB,CAChB,MAAO,MAAK,kBAEZ,eAAc,EAAO,CACrB,KAAK,eAAiB,EACtB,KAAK,YAEL,gBAAgB,CAChB,MAAO,MAAK,kBAEZ,eAAc,EAAO,CACrB,KAAK,eAAiB,EACtB,KAAK,YAEL,cAAc,CACd,MAAO,MAAK,gBAEZ,aAAY,EAAO,CACnB,GAAI,GAAS,EACT,KAAM,IAAI,YAAW,kCACzB,KAAK,aAAe,EACpB,KAAK,YAEL,qBAAqB,CACrB,MAAO,MAAK,uBAEZ,oBAAmB,EAAO,CAC1B,KAAK,oBAAsB,EAC3B,KAAK,kBAAoB,KACzB,KAAK,YAEL,yBAAyB,CACzB,MAAO,MAAK,2BAEZ,wBAAuB,EAAO,CAC9B,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,sCACzB,KAAK,wBAA0B,EAC/B,KAAK,kBAAoB,KACzB,KAAK,YAEL,iBAAiB,CACjB,MAAO,MAAK,mBAEZ,aAAa,CACb,MAAO,MAAK,eAEZ,YAAW,EAAO,CAClB,KAAK,YAAc,EACnB,KAAK,SAET,YAAY,EAAa,EAAa,CAClC,MAAM,EAAa,GACnB,KAAK,KAAO,EACZ,KAAK,KAAO,IACZ,KAAK,iBAAmB,EACxB,KAAK,WAAa,KAClB,KAAK,aAAe,AAAe,EAAO,MAC1C,KAAK,SAAW,KAChB,KAAK,kBAAoB,AAAe,EAAO,SAAS,IAAK,IAAK,IAAK,KACvE,KAAK,kBAAoB,AAAe,EAAO,SAAS,IAAK,IAAK,IAAK,KACvE,KAAK,iBAAmB,EACxB,KAAK,eAAiB,KACtB,KAAK,gBAAkB,KACvB,KAAK,WAAa,GAClB,KAAK,OAAS,EACd,KAAK,aAAe,EACpB,KAAK,QAAU,AAAe,EAAO,MACrC,KAAK,QAAU,AAAe,EAAO,IACrC,KAAK,eAAiB,KACtB,KAAK,iBAAmB,AAAe,EAAO,MAC9C,KAAK,qBAAuB,EAC5B,KAAK,gBAAkB,GACvB,KAAK,YAAc,GACnB,KAAK,YAAc,EACnB,KAAK,MAAQ,GACb,KAAK,kBAAoB,KACzB,KAAK,oBAAsB,AAAe,EAAO,MACjD,KAAK,wBAA0B,EAC/B,KAAK,mBAAqB,EAC1B,KAAK,2BAA6B,GAClC,KAAK,oBAAsB,EAC3B,KAAK,aAAe,AAAe,EAAO,KAC1C,KAAK,YAAc,GACnB,KAAK,YAAc,GACnB,KAAK,aAAe,KACpB,KAAK,aAAe,AAAe,EAAO,IAC1C,KAAK,gBAAkB,EACvB,KAAK,eAAiB,GACtB,KAAK,eAAiB,EACtB,KAAK,aAAe,EACpB,KAAK,kBAAoB,KACzB,KAAK,oBAAsB,AAAe,EAAO,QACjD,KAAK,wBAA0B,EAC/B,KAAK,YAAc,GACnB,KAAK,MAAQ,KACb,KAAK,gBAAkB,GAAmB,IAAM,KAAM,KAAM,KAAK,IAAI,KAAK,yBAA0B,KAAK,2BAA6B,GAAI,MAC1I,KAAK,UAAY,GAAmB,IAAM,KAAM,KAAM,KAAK,IAAI,KAAK,yBAA0B,KAAK,2BAA6B,GAAI,MACpI,KAAK,YAAc,GAAmB,IAAM,KAAM,KAAM,KAAK,IAAI,KAAK,yBAA0B,KAAK,2BAA6B,GAAI,MACtI,KAAK,SAAS,MAAQ,AAAe,EAAO,SAC5C,KAAK,YAAY,MAAQ,AAAe,EAAO,SAC/C,KAAK,WAAa,AAAe,EAAa,WAAW,eACzD,KAAK,OAAS,GAElB,oBAAqB,CACjB,GAAI,KAAK,QAAU,KACf,OAAS,GAAI,EAAG,EAAI,KAAK,OAAO,OAAQ,IACpC,KAAK,OAAO,GAAG,YAGvB,KAAK,MAAQ,KACb,KAAK,SAAW,QAEhB,QAAQ,CACR,MAAO,MAAK,OAEhB,SAAU,CACN,GAAI,GAAI,GAAI,IAAa,KAAM,MAC/B,YAAK,OAAO,KAAK,GACV,EAEX,OAAO,EAAG,EAAG,EAAG,CACZ,GAAI,GAAe,GAAmB,IACtC,EAAa,QAAU,EACvB,EAAa,QAAU,EACvB,EAAa,QAAU,EACvB,EAAa,QAAU,EACvB,EAAE,cAAgB,AAAe,EAAe,YAChD,EAAE,kBAAoB,AAAe,EAAmB,UACxD,GAAI,GAAsB,GAAmB,GAAc,OACvD,EAAe,GAAmB,GAAc,OACpD,EAAa,UAAY,EACzB,EAAa,cAAgB,EAC7B,KAAK,qBAAqB,EAAG,KAAK,kBAAmB,EAAG,EAAG,GAAO,GAClE,EAAE,kBAAoB,AAAe,EAAmB,UACxD,GAAI,GAAU,EAAa,QAAW,GAAI,EAAa,QAAU,EAAa,SAAW,EACrF,EAAU,EAAa,QAAW,GAAI,EAAa,QAAU,EAAa,SAAW,EACrF,EAAS,KAAK,IAAK,GAAI,EAAa,QAAU,EAAa,SAAW,EAAI,GAAI,EAAa,QAAU,EAAa,SAAW,GAAK,KAAK,gBACvI,EAAiB,EAAI,EAAS,MAAS,EACvC,EAAgB,EAAI,EAAI,KAAK,GAAK,EACtC,GAAI,KAAK,OAAS,KAAM,CAEpB,GAAI,GAAa,AADG,EAAI,EAAS,KAAK,GACN,KAAK,kBAAqB,EACtD,EAAY,EAAI,KAAK,GAAM,EAC/B,KAAK,MAAQ,GAAI,OAAM,GAAW,KAAK,MACvC,GAAI,GAAI,EACR,OAAS,GAAI,EAAG,EAAI,EAAW,IAAK,CAChC,GAAI,GAAK,EAAI,EAAI,KAAK,GAAM,EAC5B,KAAK,MAAM,KAAO,GAAmB,GAAQ,EAAU,EAAS,KAAK,IAAI,GAAM,EAAU,EAAS,KAAK,IAAI,KAGnH,AAAI,KAAK,UAAY,MACjB,MAAK,SAAW,GAAmB,IAAqB,KAAK,kBAAmB,KAAK,oBACrF,KAAK,YAAc,MACnB,MAAK,WAAa,GAAmB,GAAK,KAAK,aAAc,KAAK,kBAClE,KAAK,WAAW,SAAW,AAAe,EAAK,SAAS,OAExD,KAAK,MAAM,OAAS,GACpB,EAAE,YAAY,KAAK,SAAU,KAAK,OAClC,KAAK,gBAAkB,MACvB,MAAK,eAAiB,GAAmB,GAAK,KAAK,iBAAkB,KAAK,uBAC1E,KAAK,mBAAqB,MAC1B,MAAK,kBAAoB,GAAmB,GAAK,KAAK,oBAAqB,KAAK,0BAEpF,GAAI,GAAa,MAAK,aAAe,EAAK,IAAM,KAAK,YAAY,WAAa,IAAM,IAAM,KAAK,MAC3F,EAAO,EAAE,gBAAgB,EAAS,WAAY,KAAK,UAAW,IAAO,GACrE,EAAU,GAAmB,GAAY,EAAU,EAAK,MAAQ,GAAM,EAAI,EAAU,EAAS,EAAI,EAAK,OAAS,GAAM,EAAI,EAAK,MAAQ,GAAM,EAAI,EAAK,OAAS,GAAM,GAGxK,GAFA,EAAE,eAAe,EAAU,KAAK,UAAW,KAAK,UAAU,MAAO,EAAS,GAEtE,KAAK,aAAe,GAAI,CACxB,EAAO,EAAE,gBAAgB,KAAK,YAAa,KAAK,YAAa,IAAO,GACpE,GAAI,GAAY,GAAmB,GAAY,EAAU,EAAK,MAAQ,GAAM,EAAI,EAAU,EAAS,EAAI,EAAK,OAAS,GAAM,EAAI,EAAK,MAAQ,EAAK,EAAK,OAAS,GAC/J,EAAE,eAAe,KAAK,YAAa,KAAK,YAAa,KAAK,YAAY,MAAO,EAAW,GAE5F,GAAI,GACA,EACA,EAAO,EAAG,EAAG,EAAI,EACjB,EAAY,KAAK,2BAA6B,IAElD,OAAS,GAAI,EAAG,EAAI,KAAK,OAAO,OAAQ,IACpC,GAAI,KAAK,OAAO,GAAG,QAAS,CACxB,GAAI,KAAK,OAAO,GAAG,MAAQ,KAAM,CAC7B,GAAI,GAAO,KAAK,IAAI,KAAK,KAAM,KAAK,IAAI,KAAK,KAAM,KAAK,OAAO,GAAG,MAC9D,EAAO,KAAK,IAAI,KAAK,KAAM,KAAK,IAAI,KAAK,KAAM,KAAK,OAAO,GAAG,MAClE,GAAI,EAAO,EAAM,CACb,GAAI,GAAa,KAAK,OAAO,GAAG,YAAc,IAC1C,EAAW,MAAK,GAAK,GAAiB,EAAK,EAAiB,GAAO,KAAK,MAAS,MAAK,KAAO,KAAK,MAClG,EAAW,MAAK,GAAK,GAAiB,EAAK,EAAiB,GAAO,KAAK,MAAS,MAAK,KAAO,KAAK,MAElG,EAAa,AADG,GAAS,GAAU,EACP,KAAK,kBAAqB,EAC1D,AAAI,EAAY,GACZ,GAAY,GAChB,KAAK,OAAO,GAAG,YAAY,EAAI,EAAY,GAE3C,OAAS,IAAI,EAAG,IAAK,EAAW,KAAK,CACjC,GAAI,IAAI,EAAW,GAAS,GAAU,GAAK,EAC3C,KAAK,OAAO,GAAG,aAAa,GAAG,GAAmB,GAAQ,EAAU,EAAS,EAAa,KAAK,IAAI,IAAM,EAAU,EAAS,EAAa,KAAK,IAAI,MAEtJ,GAAI,IAAkB,EAAc,KAAK,OAAO,GAAG,MAAQ,IAC3D,OAAS,IAAI,EAAW,IAAK,EAAG,KAAK,CACjC,GAAI,IAAI,EAAW,GAAS,GAAU,GAAK,EAC3C,KAAK,OAAO,GAAG,aAAa,EAAI,EAAY,EAAI,GAAG,GAAmB,GAAQ,EAAU,EAAS,GAAkB,KAAK,IAAI,IAAM,EAAU,EAAS,GAAkB,KAAK,IAAI,QAI5L,AAAI,KAAK,OAAO,GAAG,MAAQ,MACvB,EAAE,YAAY,KAAK,OAAO,GAAG,UAAW,KAAK,OAAO,GAAG,MAMnE,IAHA,EAAkB,KAAK,YAAe,MAAK,KAAO,KAAK,cAAgB,EACnE,KAAK,KAAO,GACZ,IAAmB,KAAK,aACrB,EAAkB,KAAK,MAC1B,GAAmB,KAAK,YAI5B,GAFA,EAAkB,EAAM,MAAK,KAAO,KAAK,MAAQ,KAAK,aAAgB,EAEjE,KAAK,oBAAsB,GAAQ,KAAK,oBAAsB,EAAmB,EAAgB,CAClG,GAAI,GAAgB,KAAK,YAAc,KAAK,oBAI5C,IAHA,EAAkB,EAAkB,MAAK,KAAO,GAAkB,GAC9D,KAAK,KAAO,GACZ,IAAmB,GAChB,EAAkB,KAAK,MAC1B,GAAmB,EAEvB,EAAkB,EAAM,MAAK,KAAO,KAAK,MAAQ,GAAkB,EACnE,OAAS,GAAI,EAAG,EAAI,EAAiB,IAAK,CACtC,GAAI,GAAQ,EAAkB,EAAI,EAClC,AAAI,GAAS,KAAK,MACd,GAAU,MAAK,GAAK,GAAiB,EAAK,EAAiB,GAAQ,KAAK,MAAS,MAAK,KAAO,KAAK,MAClG,EAAI,KAAK,IAAI,GACb,EAAI,KAAK,IAAI,GACb,EAAM,EAAa,GAAS,KAAK,iBAAmB,GACpD,EAAM,KAAM,KAAK,oBAAuB,GAAa,GAAS,KAAK,iBAAmB,IAAM,IAC5F,EAAE,WAAW,KAAK,kBAAoB,EAAU,EAAK,EAAK,EAAU,EAAK,EAAK,EAAU,EAAK,EAAK,EAAU,EAAK,KAK7H,GAAI,EAAkB,EAElB,OAAS,GAAI,EAAG,EAAI,EAAiB,IAAK,CACtC,GAAI,GAAS,EAAkB,EAAI,KAAK,YACxC,GAAI,GAAU,KAAK,KAAM,CACrB,EAAU,MAAK,GAAK,GAAiB,EAAK,EAAiB,GAAS,KAAK,MAAS,MAAK,KAAO,KAAK,MACnG,EAAI,KAAK,IAAI,GACb,EAAI,KAAK,IAAI,GACb,EAAM,EAAa,GAAS,KAAK,iBAAmB,GACpD,EAAM,KAAM,KAAK,iBAAoB,GAAa,GAAS,KAAK,iBAAmB,IAAM,IACzF,EAAE,WAAW,KAAK,eAAiB,EAAU,EAAK,EAAK,EAAU,EAAK,EAAK,EAAU,EAAK,EAAK,EAAU,EAAK,GAC9G,EAAO,EAAE,gBAAgB,EAAO,WAAW,OAAQ,KAAK,gBAAiB,IAAM,GAC/E,GAAI,GAAe,GAAM,KAAK,KAAK,EAAK,MAAQ,EAAK,MAAQ,EAAK,OAAS,EAAK,QAC5E,EAAW,GAAmB,GAAY,EAAW,GAAK,GAAgB,EAAK,EAAK,MAAQ,GAAO,EAAI,EAAW,GAAK,GAAgB,EAAK,EAAK,OAAS,GAAO,EAAI,GAAK,OAAS,GAAK,EAAG,EAAK,QAAU,GAE9M,EAAE,eAAe,EAAO,WAAY,KAAK,gBAAiB,KAAK,gBAAgB,MAAO,EAAU,IAS5G,GAJK,KAAK,iBAAmB,GAAO,KAAK,MAAM,OAAS,GACpD,EAAE,YAAY,KAAK,WAAY,KAAK,OACxC,KAAK,qBAAqB,EAAG,KAAK,kBAAmB,EAAG,EAAG,GAAM,GAE7D,KAAK,YAAa,CAClB,GAAI,KAAK,cAAgB,KAAK,OAAQ,CAClC,GAAI,GAAO,KAAK,YAAc,KAAK,gBAAmB,MAAK,KAAO,KAAK,MAAQ,IAC/E,AAAI,KAAK,IAAI,KAAK,OAAS,KAAK,cAAgB,EAC5C,KAAK,aAAe,KAAK,OAExB,AAAI,KAAK,aAAe,KAAK,MAC9B,KAAK,cAAgB,EAGrB,KAAK,cAAgB,EAG7B,GAAI,GAAc,KAAK,aAAe,KAAK,YACvC,EAAmB,MAAK,KAAO,KAAK,KAAO,IAC/C,AAAI,EAAc,KAAK,KAAO,GAC1B,GAAc,KAAK,KAAO,GAC1B,EAAc,KAAK,KAAO,GAC1B,GAAc,KAAK,KAAO,GAC9B,EAAU,MAAK,GAAK,GAAiB,EAAK,EAAiB,GAAc,KAAK,MAAS,MAAK,KAAO,KAAK,MACxG,EAAI,KAAK,IAAI,GACb,EAAI,KAAK,IAAI,GACb,EAAM,EAAS,KAAK,eAAkB,IACtC,EAAM,EAAS,KAAK,eAAkB,IACtC,GAAI,GAAM,EAAS,KAAK,aAAgB,IACpC,EAAa,GAAI,OAAM,GAAG,KAAK,MAQnC,GAPA,EAAW,GAAK,GAAmB,GAAQ,EAAU,EAAK,EAAK,EAAU,EAAK,GAC9E,EAAW,GAAK,GAAmB,GAAQ,EAAU,EAAK,EAAK,EAAU,EAAK,GAC9E,EAAW,GAAK,GAAmB,GAAQ,EAAU,EAAK,EAAK,EAAU,EAAK,GAC9E,EAAW,GAAK,GAAmB,GAAQ,EAAU,EAAK,EAAK,EAAU,EAAK,GAC1E,KAAK,cAAgB,MACrB,MAAK,aAAe,GAAmB,GAAY,KAAK,eAC5D,EAAE,YAAY,KAAK,aAAc,GAC7B,KAAK,wBAA0B,EAAG,CAClC,AAAI,KAAK,mBAAqB,MAC1B,MAAK,kBAAoB,GAAmB,GAAK,KAAK,oBAAqB,KAAK,yBAChF,KAAK,kBAAkB,SAAW,EAClC,KAAK,kBAAkB,OAAS,EAChC,KAAK,kBAAkB,SAAW,AAAe,EAAK,SAAS,OAEnE,GAAI,GAAc,GAAI,OAAM,GAAG,KAAK,MACpC,EAAY,GAAK,EAAW,GAC5B,EAAY,GAAK,EAAW,GAC5B,EAAY,GAAK,EAAW,GAC5B,EAAY,GAAK,EAAW,GAC5B,EAAY,GAAK,EAAW,GAC5B,EAAE,UAAU,KAAK,kBAAmB,IAG5C,YAAK,kBAAkB,EAAG,EAAG,GACtB,EAEX,yBAA0B,CACtB,AAAI,KAAK,cAAgB,KAAK,QAC1B,KAAK,WCtmBV,oBAA6C,EAAc,IAC1D,mBAAmB,CAAE,MAAO,MAAK,qBACjC,kBAAiB,EAAO,CACxB,KAAK,kBAAoB,EACzB,KAAK,SAAW,KAChB,KAAK,YAEL,mBAAmB,CAAE,MAAO,MAAK,qBACjC,kBAAiB,EAAO,CACxB,KAAK,kBAAoB,EACzB,KAAK,SAAW,KAChB,KAAK,YAEL,iBAAiB,CAAE,MAAO,MAAK,mBAC/B,gBAAe,EAAO,CACtB,KAAK,gBAAkB,EACvB,KAAK,YAEL,gBAAgB,CAAE,MAAO,MAAK,kBAC9B,eAAc,EAAO,CACrB,KAAK,eAAiB,EACtB,KAAK,YAEL,oBAAoB,CAAE,MAAO,MAAK,sBAClC,mBAAkB,EAAO,CACzB,KAAK,mBAAqB,EAC1B,KAAK,YAEL,eAAe,CAAE,MAAO,MAAK,iBAC7B,cAAa,EAAO,CACpB,KAAK,cAAgB,EACrB,KAAK,YAEL,gBAAgB,CAAE,MAAO,MAAK,kBAC9B,eAAc,EAAO,CACrB,GAAI,CAAC,OAAO,MAAM,IAAU,CAAC,OAAO,MAAM,KAAK,iBAAmB,CAAC,AAAe,EAAc,qBACxF,GAAS,KAAK,eACd,KAAM,IAAI,YAAW,mCAAqC,KAAK,eAAe,WAAa,KAEnG,KAAK,eAAiB,EACtB,KAAK,YAEL,gBAAgB,CAAE,MAAO,MAAK,kBAC9B,eAAc,EAAO,CACrB,GAAI,CAAC,OAAO,MAAM,IAAU,CAAC,OAAO,MAAM,KAAK,iBAAmB,CAAC,AAAe,EAAc,qBACxF,GAAS,KAAK,eACd,KAAM,IAAI,YAAW,gCAAkC,KAAK,eAAe,WAAa,KAEhG,KAAK,eAAiB,EACtB,KAAK,YAEL,kBAAkB,CAAE,MAAO,MAAK,oBAChC,iBAAgB,EAAO,CACvB,KAAK,iBAAmB,EACxB,KAAK,YAEL,QAAQ,CAAE,MAAO,MAAK,UACtB,OAAM,EAAO,CACb,KAAK,OAAS,EACd,KAAK,YAEL,OAAO,CAAE,MAAO,MAAK,MACzB,YAAY,EAAa,EAAa,CAClC,MAAM,EAAa,GACnB,KAAK,SAAW,KAChB,KAAK,kBAAoB,AAAe,EAAO,MAC/C,KAAK,kBAAoB,AAAe,EAAO,SAAS,IAAK,GAAI,GAAI,IACrE,KAAK,gBAAkB,KACvB,KAAK,eAAiB,KACtB,KAAK,mBAAqB,EAC1B,KAAK,cAAgB,GAAgB,aAAa,QAClD,KAAK,eAAiB,OAAO,IAC7B,KAAK,eAAiB,OAAO,IAC7B,KAAK,iBAAmB,AAAe,EAAO,IAC9C,KAAK,OAAS,EACd,KAAK,MAAQ,GAAmB,IAAM,KAAM,KAAM,KAAK,IAAI,EAAY,MAAQ,EAAG,EAAY,OAAS,GAAI,MAC3G,KAAK,MAAM,MAAQ,AAAe,EAAO,WACzC,KAAK,WAAa,AAAe,EAAa,WAAW,eAE7D,oBAAqB,CACjB,AAAI,KAAK,MAAQ,MACb,KAAK,KAAK,UAAU,MACxB,KAAK,SAAW,KAEpB,OAAO,EAAG,EAAG,EAAG,CACZ,GAAI,GAAe,GAAmB,IACtC,EAAa,QAAU,EACvB,EAAa,QAAU,EACvB,EAAa,QAAU,EACvB,EAAa,QAAU,EACvB,EAAE,cAAgB,AAAe,EAAe,YAChD,EAAE,kBAAoB,AAAe,EAAmB,UACxD,GAAI,GAAe,GAAmB,GAAc,OACpD,EAAa,UAAY,EACzB,EAAa,cAAgB,EACzB,KAAK,UAAY,MACjB,MAAK,SAAW,GAAmB,IAAqB,KAAK,kBAAmB,KAAK,oBAEzF,EAAE,kBAAkB,KAAK,SAAU,EAAG,EAAG,EAAG,GAC5C,KAAK,qBAAqB,EAAG,KAAK,kBAAmB,EAAG,EAAG,GAAO,GAC9D,EAAa,SAAW,IACxB,GAAa,SAAW,IACxB,EAAa,SAAW,IACxB,GAAa,SAAW,IAC5B,EAAE,kBAAoB,AAAe,EAAmB,UACxD,GAAI,GAAa,EAAK,GAAa,QAAU,EAAa,SACtD,EAAc,EAAK,GAAa,QAAU,EAAa,SAC3D,GAAK,EAAa,IAAQ,EAAc,GAAK,CACzC,GAAI,GACJ,AAAI,KAAK,iBAAmB,KACxB,GAAS,KAAK,gBAAkB,KAAO,KAAK,MAAM,QAAQ,GAAK,KAAK,eAAe,KAAM,KAAK,OAC9F,AAAK,CAAC,OAAO,MAAM,KAAK,iBAAqB,KAAK,MAAQ,KAAK,eAC3D,KAAK,KAAK,eAAiB,KAAK,iBAE/B,AAAK,CAAC,OAAO,MAAM,KAAK,iBAAqB,KAAK,MAAQ,KAAK,eAChE,KAAK,KAAK,eAAiB,KAAK,iBAGhC,KAAK,KAAK,eAAiB,MAI/B,MAAK,MAAM,eAAiB,KAC5B,EAAS,KAAK,iBAElB,GAAI,GAAO,EAAE,gBAAgB,EAAQ,KAAK,KAAM,IAAO,GACnD,EACA,EAAQ,KAAK,cAKjB,OAJK,KAAK,iBAAmB,MAAU,GAAS,GAAgB,aAAa,SACzE,GAAQ,GAAgB,aAAa,OACpC,GAAS,GAAgB,aAAa,SAAa,EAAO,QAAQ,KAAO,GAC1E,GAAQ,GAAgB,aAAa,OACjC,OACC,IAAgB,aAAa,KAC9B,EAAM,GAAmB,GAAW,EAAa,QAAY,GAAa,KAAK,kBAAoB,KAAQ,GAAI,EAAa,QAAY,GAAc,EAAK,QAAU,GAAM,EAAI,EAAK,MAAQ,GAAM,EAAI,EAAK,OAAS,GAAM,GAC1N,EAAE,eAAe,EAAQ,KAAK,KAAM,KAAK,KAAK,MAAO,EAAK,GAC1D,UACC,IAAgB,aAAa,OAC9B,EAAM,GAAmB,GAAW,EAAa,QAAY,GAAa,EAAK,OAAS,GAAM,EAAG,EAAa,QAAY,GAAc,EAAK,QAAU,GAAM,EAAI,EAAK,MAAQ,GAAM,EAAI,EAAK,OAAS,GAAM,GAC5M,EAAE,eAAe,EAAQ,KAAK,KAAM,KAAK,KAAK,MAAO,EAAK,GAC1D,UACC,IAAgB,aAAa,QAC9B,GAAI,GAAO,GACP,EAAI,EAAO,YAAY,KAG3B,GAFI,EAAI,GACJ,GAAI,EAAO,YAAY,MACvB,GAAK,EACL,EAAO,EAAO,UAAU,EAAG,EAAI,OAE9B,CAED,IADA,EAAI,EACI,EAAI,EAAO,QAAa,GAAO,IAAM,KAAO,EAAO,IAAM,KAAS,EAAO,IAAM,KAAS,EAAO,IAAM,KAAU,EAAO,IAAM,MAChI,IAEJ,EAAO,EAAO,UAAU,EAAG,GAE/B,GAAI,GAAQ,EAAE,gBAAgB,EAAM,KAAK,KAAM,IAAO,GACtD,EAAM,GAAmB,GAAW,EAAa,QAAW,GAAa,EAAM,MAAQ,EAAa,KAAK,kBAAoB,MAAQ,EAAG,EAAa,QAAY,GAAc,EAAK,QAAU,GAAM,EAAI,EAAK,MAAQ,GAAM,EAAI,EAAK,OAAS,GAAM,GACnP,EAAE,eAAe,EAAQ,KAAK,KAAM,KAAK,KAAK,MAAO,EAAK,GAC1D,UACC,IAAgB,aAAa,MAC9B,EAAM,GAAmB,GAAW,EAAa,QAAW,GAAa,EAAK,MAAQ,EAAa,KAAK,kBAAoB,MAAQ,EAAG,EAAa,QAAY,GAAc,EAAK,QAAU,GAAM,EAAI,EAAK,MAAQ,GAAM,EAAI,EAAK,OAAS,GAAM,GAClP,EAAE,eAAe,EAAQ,KAAK,KAAM,KAAK,KAAK,MAAO,EAAK,GAC1D,OAGZ,YAAK,qBAAqB,EAAG,KAAK,kBAAmB,EAAG,EAAG,GAAM,GACjE,KAAK,kBAAkB,EAAG,EAAG,GACtB,IAGf,AAAC,UAAU,EAAiB,CACxB,eAAkD,EAAU,CACxD,YAAY,EAAO,EAAe,EAAW,CACzC,MAAM,EAAO,EAAe,IAGpC,EAAgB,qBAAuB,EACvC,eAA0C,EAAM,EAEhD,EAAa,KAAO,GAAI,GAAqB,OAAQ,QACrD,EAAa,OAAS,GAAI,GAAqB,SAAU,UACzD,EAAa,QAAU,GAAI,GAAqB,UAAW,WAC3D,EAAa,MAAQ,GAAI,GAAqB,QAAS,SACvD,EAAgB,aAAe,IAEhC,IAAoB,IAAkB,KC1LlC,YAAc,CACjB,YAAY,EAAG,EAAG,CACd,KAAK,EAAI,IAAM,OAAY,EAAI,EAC/B,KAAK,EAAI,IAAM,OAAY,EAAI,EAEnC,OAAQ,CAAE,MAAO,IAAI,IAAQ,KAAK,EAAG,KAAK,KAEvC,QAA+B,CAClC,aAAc,CACV,KAAK,QAAU,GACf,KAAK,OAAS,IAGtB,QAAqB,CACjB,aAAc,CACV,KAAK,KAAO,EACZ,KAAK,OAAS,IAGf,eAAoB,KAAK,CAC5B,SAAS,EAAQ,CACb,GAAI,GAAM,GACN,EAAO,GAKX,GAJI,EAAS,EAAM,GACf,GAAM,EAAM,KAAK,UAAY,KAC7B,EAAS,EAAM,GACf,GAAM,EAAM,EAAM,OAAO,KAAK,YAAc,KAC5C,EAAS,EAAM,GAAI,CACnB,GAAI,GAAI,KAAK,cAAc,WAC3B,EAAM,EAAM,EAAE,OAAO,EAAE,OAAS,GAAK,YAEhC,EAAS,EAAM,KAAM,CAC1B,GAAI,GAAI,KAAK,cAAc,WAC3B,EAAM,EAAM,EAAI,IAIpB,GAFI,EAAS,EAAM,IACf,GAAM,EAAM;AAAA,GACZ,EAAS,EAAM,EACf,GAAI,EAAM,aAAc,CACpB,GAAI,GAAI,IAAM,KAAK,WAAW,WAC9B,EAAM,EAAM,EAAE,UAAU,EAAE,OAAS,GAC7B,EAAS,EAAM,GACjB,GAAM,EAAM,SAEf,CACD,GAAI,GAAO,KAAK,WAChB,EAAO,KACH,EAAO,IACP,GAAO,MACP,EAAO,IACP,GAAO,EAAO,IACd,GAAQ,GACR,GAAO,IACX,EAAM,EAAM,EAAK,WAGzB,GAAI,EAAS,EAAM,EAAG,CAClB,GAAI,GAAI,IAAM,KAAK,aAAa,WAChC,EAAM,EAAM,IAAM,EAAE,UAAU,EAAE,OAAS,GAE7C,GAAI,EAAS,EAAM,EAAG,CAClB,GAAI,GAAI,IAAM,KAAK,aAAa,WAChC,EAAM,EAAM,IAAM,EAAE,UAAU,EAAE,OAAS,GAE7C,GAAI,EAAS,EAAM,IAAK,CACpB,GAAI,GAAK,KAAO,KAAK,kBAAkB,WACvC,EAAM,EAAM,IAAM,EAAG,UAAU,EAAG,OAAS,GAAG,UAAU,WAEnD,EAAS,EAAM,KAAM,CAC1B,GAAI,GAAK,KAAO,KAAK,kBAAkB,WACvC,EAAM,EAAM,IAAM,EAAG,UAAU,EAAG,OAAS,GAAG,UAAU,WAEnD,EAAS,EAAM,MAAO,CAC3B,GAAI,GAAK,KAAO,KAAK,kBAAkB,WACvC,EAAM,EAAM,IAAM,EAAG,UAAU,EAAG,OAAS,GAAG,UAAU,GAE5D,MAAK,GAAS,EAAM,GAAM,CAAC,EAAM,cAC7B,GAAM,EAAM,GAET,IAGf,EAAM,EAAI,EACV,EAAM,GAAK,EACX,EAAM,EAAI,EACV,EAAM,GAAK,EACX,EAAM,EAAI,GACV,EAAM,EAAI,GACV,EAAM,EAAI,GACV,EAAM,IAAM,IACZ,EAAM,KAAO,IACb,EAAM,MAAQ,IACd,EAAM,GAAK,KACX,EAAM,WAAa,KACnB,EAAM,KAAO,KACb,EAAM,EAAK,GAAI,QAAQ,qBAAqB,cAC5C,EAAM,aAAgB,EAAM,EAAE,QAAQ,MAAQ,GAAO,EAAM,EAAE,QAAQ,MAAQ,EAC7E,EAAM,OAAS,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACtF,WAAoB,OAChB,SAAS,CAAE,MAAO,IAAI,SACtB,YAAW,EAAU,CAAE,MAAO,GAAS,UAAY,UACnD,cAAa,EAAU,CAC1B,GAAI,GAAI,GAAI,GACZ,SAAE,QAAQ,EAAW,KACd,QAEJ,6BAA4B,EAAK,CACpC,GAAI,GAAM,GAAI,IACd,EAAI,QAAU,GACd,GAAI,GAAO,GAAI,MACX,EAAO,EAAK,cACZ,EAAQ,EAAK,WACb,EAAM,EAAK,UACX,EAAQ,EACR,EAAU,EACV,EAAU,EAEd,IADA,EAAM,EAAI,OACH,EAAI,QAAQ,MAAQ,GACvB,EAAM,EAAI,QAAQ,KAAM,KAE5B,GAAI,GAAY,GACZ,EAAY,GACZ,EAAK,EAAI,MAAM,KACnB,GAAI,EAAG,QAAU,EACb,MAAO,GACX,OAAS,GAAI,EAAG,EAAK,EAAG,QAAY,EAAI,EAAI,IACxC,GAAI,EAAG,GAAG,QAAQ,KAAO,EAAG,CACxB,GAAI,GAAS,EAAG,GAAG,MAAM,KACzB,AAAI,EAAO,QAAU,EACjB,EAAM,SAAS,EAAO,IAErB,AAAI,EAAO,QAAU,EACtB,GAAM,SAAS,EAAO,IACtB,EAAQ,SAAS,EAAO,IAAM,GAG9B,GAAM,SAAS,EAAO,IACtB,EAAQ,SAAS,EAAO,IAAM,EAC9B,EAAO,SAAS,EAAO,KAE3B,EAAY,WAEP,EAAG,GAAG,QAAQ,KAAO,EAAG,CAC7B,GAAI,GAAS,EAAG,GAAG,MAAM,KACzB,AAAI,EAAO,QAAU,EACjB,EAAQ,SAAS,EAAO,IAEvB,AAAI,EAAO,QAAU,EACtB,GAAQ,SAAS,EAAO,IACxB,EAAU,SAAS,EAAO,KAG1B,GAAQ,SAAS,EAAO,IACxB,EAAU,SAAS,EAAO,IAC1B,EAAU,WAAW,EAAO,KAEhC,EAAY,GAKpB,MAFK,CAAC,GAAe,CAAC,GAElB,MAAM,IAAS,MAAM,IAAU,MAAM,IAAQ,MAAM,IAAU,MAAM,IAAY,MAAM,IAEzF,GAAK,YAAY,EAAM,EAAO,GAC9B,EAAK,SAAS,EAAO,EAAS,GAAW,EAAI,IAAQ,GAAU,IAAO,GACtE,EAAI,OAAS,EAAK,UAAY,IAC9B,EAAI,QAAU,IACP,QAEJ,6BAA4B,EAAI,CACnC,GAAI,GAAM,GAAI,IACV,EAAI,EACR,EAAK,EAAG,cACR,GAAI,GAAI,EAAG,QAAQ,KACnB,GAAI,EAAI,EAAG,CAEP,GADA,EAAI,WAAW,EAAG,UAAU,EAAG,IAC3B,MAAM,GACN,MAAO,GAGX,GADA,EAAI,QAAU,CAAC,EAAI,MACf,GAAK,EAAG,OAAS,EACjB,SAAI,QAAU,GACP,EAEX,EAAK,EAAG,UAAU,EAAI,GAG1B,GADA,EAAI,EAAG,QAAQ,KACX,EAAI,EAAG,CAEP,GADA,EAAI,WAAW,EAAG,UAAU,EAAG,IAC3B,MAAM,GACN,MAAO,GAGX,GADA,EAAI,QAAU,EAAI,KACd,GAAK,EAAG,OAAS,EACjB,SAAI,QAAU,GACP,EAEX,EAAK,EAAG,UAAU,EAAI,GAG1B,GADA,EAAI,EAAG,QAAQ,KACX,EAAI,EAAG,CAEP,GADA,EAAI,WAAW,EAAG,UAAU,EAAG,IAC3B,MAAM,GACN,MAAO,GAGX,GADA,EAAI,QAAU,EAAI,GACd,GAAK,EAAG,OAAS,EACjB,SAAI,QAAU,GACP,EAEX,EAAK,EAAG,UAAU,EAAI,GAM1B,MAJA,GAAI,EAAG,QAAQ,KACX,EAAI,GACJ,GAAI,EAAG,QACX,EAAI,WAAW,EAAG,UAAU,EAAG,IAC3B,MAAM,IAGV,GAAI,QAAU,EACd,EAAI,QAAU,IACP,QAIJ,qBAAoB,EAAU,EAAY,CAC7C,GAAI,GAAU,GACV,EAAM,GAKV,GAJI,EAAW,GACX,GAAM,IACN,EAAW,CAAC,GAEZ,GAAY,MAAO,CACnB,GAAI,GAAK,EAAW,OAAU,EAC9B,EAAM,EAAM,EAAE,WAAa,IAC3B,GAAY,MAAQ,EACpB,EAAU,GAEd,GAAI,GAAc,MACd,MAAO,IAAO,GAAK,EAAM,KAC7B,GAAI,GAAY,KAAM,CAClB,GAAI,GAAM,EAAW,MAAS,EAC1B,EAAK,EAAE,WACX,AAAI,GAAW,EAAG,QAAU,GACxB,GAAK,IAAM,GACf,EAAM,EAAM,EAAK,IACjB,GAAY,KAAO,EACnB,EAAU,GAId,GAFI,GAAc,MAEd,EAAW,EACX,MAAO,IAAO,GAAK,EAAM,KAC7B,GAAI,GAAY,GAAI,CAChB,GAAI,GAAK,EAAW,IAAO,EACvB,EAAK,EAAE,WACX,AAAI,GAAW,EAAG,QAAU,GACxB,GAAK,IAAM,GACf,EAAM,EAAM,EAAK,IACjB,GAAY,GAAK,EACjB,EAAU,GAId,GAFI,GAAc,IAEd,EAAW,EACX,MAAO,IAAO,GAAK,EAAM,KAC7B,EAAW,KAAK,MAAM,EAAW,KAAO,IACxC,GAAI,GACJ,MAAI,GAAa,GACb,EAAI,EAAS,QAAQ,GAEpB,AAAI,EAAa,IAClB,EAAI,EAAS,QAAQ,GAEpB,AAAI,EAAa,KAClB,EAAI,EAAS,QAAQ,GAGrB,EAAI,EAAS,WAEb,GAAW,EAAW,IACtB,GAAI,IAAM,GACd,EAAM,EAAM,EAAI,IACT,QAEJ,gBAAe,EAAe,EAAmB,EAAY,CAChE,GAAI,GAAmB,GACnB,EAAuB,GACvB,EAAc,GACd,EAAc,GACd,EAAY,GACZ,EAAW,GACf,AAAI,GAAiB,IACjB,GAAuB,IAEvB,GAAiB,GACjB,GAAmB,IAElB,IAAiB,IAAQ,GAAqB,KAC/C,GAAc,IAEb,IAAiB,MAAU,GAAqB,OACjD,GAAY,IAEX,IAAiB,OAAW,GAAqB,QAClD,GAAW,IAEX,GAAc,IACd,GAAuB,IACvB,GAAc,GACd,GAAmB,IACnB,GAAc,IACd,GAAc,IACd,GAAc,MACd,GAAc,IACd,GAAc,OACd,GAAY,IAChB,GAAI,GAAS,EACb,UAAU,EAAM,WACZ,GACA,IAAU,EAAM,KAChB,GACA,IAAU,EAAM,MAChB,GACA,IAAU,EAAM,GAChB,GACA,IAAU,EAAM,GAChB,GACA,IAAU,EAAM,GAChB,GACA,IAAU,EAAM,GACb,QAEJ,gBAAe,EAAe,EAAmB,EAAM,CAC1D,GAAI,GAAM,GAAI,IACV,EAAmB,GACnB,EAAuB,GACvB,EAAc,GACd,EAAc,GACd,EAAY,GACZ,EAAW,GACX,EAAa,GACb,EAAY,GAChB,MAAI,IAAqB,GACrB,EAAI,KAAO,IAEV,AAAI,GAAqB,EAC1B,EAAI,KAAO,GAEV,AAAI,GAAqB,EAC1B,EAAI,KAAO,GAEV,AAAI,GAAqB,EAC1B,EAAI,KAAO,GAEV,AAAI,GAAqB,GAC1B,EAAI,KAAO,EAEV,AAAI,GAAqB,GAC1B,EAAI,KAAO,EAEV,AAAI,GAAqB,GAC1B,EAAI,KAAO,EAEV,AAAI,GAAqB,GAC1B,EAAI,KAAO,EAEV,AAAI,GAAqB,GAC1B,EAAI,KAAO,EAEV,AAAI,GAAqB,IAC1B,EAAI,KAAO,GAEV,AAAI,GAAqB,IAC1B,EAAI,KAAO,GAEV,AAAI,GAAqB,IAC1B,EAAI,KAAO,GAEV,AAAI,GAAqB,KAC1B,EAAI,KAAO,IAEV,AAAI,GAAqB,KAC1B,EAAI,KAAO,IAEV,AAAI,GAAqB,KAC1B,EAAI,KAAO,IAEV,AAAI,GAAqB,KAC1B,EAAI,KAAO,IAEV,AAAI,GAAqB,MAC1B,EAAI,KAAO,KAEV,AAAI,GAAqB,MAC1B,EAAI,KAAO,KAEV,AAAI,GAAqB,MAC1B,EAAI,KAAO,KAEV,AAAI,GAAqB,EAAI,MAC9B,EAAI,KAAO,EAAI,KAEd,AAAI,GAAqB,EAAI,MAC9B,EAAI,KAAO,EAAI,KAEd,AAAI,GAAqB,EAAI,MAC9B,EAAI,KAAO,MAEV,AAAI,GAAqB,GAAK,MAC/B,EAAI,KAAO,EAAI,MAEd,AAAI,GAAqB,GAAK,MAC/B,EAAI,KAAO,EAAI,MAEd,AAAI,GAAqB,GAAK,MAC/B,EAAI,KAAO,EAAI,MAEd,AAAI,GAAqB,IAAM,MAChC,EAAI,KAAO,GAAK,MAEf,AAAI,GAAqB,IAAM,MAChC,EAAI,KAAO,GAAK,MAEf,AAAI,GAAqB,IAAM,MAChC,EAAI,KAAO,GAAK,MAEf,AAAI,GAAqB,IAAM,MAChC,EAAI,KAAO,GAAK,MAGhB,EAAI,KAAO,IAAM,MAErB,AAAI,GAAQ,EAAc,cAAc,SACpC,GAAuB,GACvB,EAAmB,GACnB,EAAc,GACd,EAAY,GACZ,EAAW,EAAgB,MAC3B,EAAa,EAAgB,MAC7B,EAAY,EAAgB,GAAK,EAAI,MACjC,EAAI,MAAQ,IACZ,GAAuB,IACvB,EAAI,MAAQ,GACZ,GAAmB,IACnB,EAAI,MAAQ,IACZ,GAAc,IACd,EAAI,MAAQ,MACZ,GAAc,IACd,EAAI,MAAQ,OACZ,GAAY,IACZ,EAAI,MAAQ,GAAK,OACjB,GAAW,IACX,EAAI,MAAQ,IAAM,OAClB,GAAa,IACjB,EAAI,OAAS,EACT,GACA,GAAI,QAAU,EAAM,MACpB,GACA,GAAI,QAAU,EAAM,KACpB,GACA,GAAI,QAAU,EAAM,GACpB,GACA,GAAI,OAAS,EAAI,QAAU,EAAM,GACjC,GACA,GAAI,OAAS,EAAI,QAAU,EAAM,GAChC,EAAI,QAAU,GAAO,IAAY,IAClC,GAAI,QAAU,EAAM,IACpB,GACA,GAAI,QAAU,EAAM,GACpB,GACA,GAAI,QAAU,EAAM,GACpB,GACA,GAAI,QAAU,EAAM,IACpB,EAAI,QAAU,EAAM,IACpB,GAAI,OAAS,EAAM,OAevB,EAAI,OAAS,EAAc,eAAe,EAAe,EAAmB,EAAI,MAE7E,IAGf,AAAC,UAAU,EAAe,CACtB,eAAmD,EAAU,CACzD,YAAY,EAAO,EAAe,EAAW,CACzC,MAAM,EAAO,EAAe,IAGpC,EAAc,sBAAwB,EAEtC,eAA2C,EAAM,EAEjD,EAAc,SAAW,GAAI,GAAsB,WAAY,YAC/D,EAAc,SAAW,GAAI,GAAsB,WAAY,0BAC/D,EAAc,cAAgB,IAC/B,GAAkB,GAAgB,KAC9B,YAAa,CAChB,YAAY,EAAS,EAAS,CAC1B,KAAK,IAAM,EACX,KAAK,IAAM,EACX,KAAK,IAAM,EACX,KAAK,IAAM,IAGZ,OAAoB,OAChB,QAAO,EAAG,EAAQ,CACrB,GAAI,MAAM,EAAE,KACR,MAAO,GACX,GAAI,GAAQ,EAAE,IAAM,EAAE,IACtB,MAAO,IAAI,IAAO,EAAE,IAAO,EAAS,GAAS,GAAM,EAAG,EAAE,IAAO,EAAS,GAAS,GAAM,SAEpF,cAAa,EAAQ,EAAQ,CAChC,GAAI,MAAO,IAAW,YAClB,MAAI,OAAO,IAAW,YACX,GAAI,IAAO,OAAO,IAAK,OAAO,KAClC,GAAI,IAAO,EAAQ,GAE9B,GAAI,MAAO,IAAW,YAClB,MAAO,IAAI,IAAO,EAAQ,GAC9B,GAAI,EAAS,EACT,KAAM,IAAI,YAAW,8BAAgC,EAAO,WAAa,IAAM,EAAO,YAC1F,MAAO,IAAI,IAAO,EAAQ,SAEvB,WAAU,EAAG,CAChB,MAAO,CAAC,MAAM,EAAE,WAEb,SAAQ,EAAI,EAAI,CACnB,GAAI,MAAM,EAAG,KACT,MAAO,IAAI,IAAO,EAAG,IAAK,EAAG,KACjC,GAAI,MAAM,EAAG,KACT,MAAO,IAAI,IAAO,EAAG,IAAK,EAAG,KACjC,GAAI,GAAM,GAAI,IAAO,EAAG,IAAK,EAAG,KAChC,MAAI,GAAG,IAAM,EAAI,KACb,GAAI,IAAM,EAAG,KACb,EAAG,IAAM,EAAI,KACb,GAAI,IAAM,EAAG,KACb,EAAG,IAAM,EAAI,KACb,GAAI,IAAM,EAAG,KACb,EAAG,IAAM,EAAI,KACb,GAAI,IAAM,EAAG,KACV,QAEJ,mBAAkB,EAAI,EAAO,CAChC,MAAI,OAAM,EAAG,KACF,GAAI,IAAO,EAAO,GACzB,EAAQ,EAAG,IACJ,GAAI,IAAO,EAAO,EAAG,KAC5B,EAAQ,EAAG,IACJ,GAAI,IAAO,EAAG,IAAK,GACvB,GAAI,IAAO,EAAG,IAAK,EAAG,OAG9B,QAAkB,OACd,WAAU,EAAa,EAAa,EAAkB,EAAkB,EAAQ,CACnF,OAAS,GAAI,EAAG,EAAI,EAAQ,IACxB,EAAiB,EAAmB,GAAK,EAAY,EAAc,GAAG,QAG9E,YAAY,EAAG,CAGX,GAFA,KAAK,KAAO,GACZ,KAAK,MAAQ,EACT,YAAa,OACb,KAAK,KAAO,GAAI,OAAM,EAAE,QACxB,GAAY,UAAU,EAAG,EAAG,KAAK,KAAM,EAAG,EAAE,QAC5C,KAAK,MAAQ,EAAE,eAEV,YAAa,IAMlB,KAAK,KAAO,GAAI,OAAM,GAAY,oBAClC,KAAK,KAAK,GAAK,EACf,KAAK,MAAQ,MAGb,MAAM,IAAI,OAAM,qCAGxB,MAAO,CACH,GAAI,GAAc,KAAK,KAAK,OAAS,GAAY,mBACjD,KAAO,KAAK,KAAK,OAAS,GACtB,KAAK,KAAK,KAAK,QAI3B,GAAY,mBAAqB,IAC1B,YAAgB,IACf,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAAE,KAAK,UAAY,YAC5B,qBAAqB,CAAE,MAAO,IAAU,8BACxC,oBAAmB,EAAO,CAAE,GAAU,oBAAsB,KACnE,YAAY,CAAE,MAAO,MAAK,cAC1B,aAAa,CAAE,MAAO,MAAK,YAC/B,YAAY,EAAQ,CAehB,GAdA,KAAK,gBAAkB,EACvB,KAAK,UAAY,KACjB,KAAK,YAAc,EACnB,KAAK,KAAO,KACZ,KAAK,WAAa,KAClB,KAAK,OAAS,KACd,KAAK,cAAgB,KACrB,KAAK,SAAW,GAChB,KAAK,UAAY,GACjB,KAAK,OAAS,AAAe,EAAO,MACpC,KAAK,WAAa,EAClB,KAAK,QAAU,GACf,KAAK,MAAQ,GACb,KAAK,SAAW,GACZ,EAAO,MAAM,QAAU,EACvB,KAAM,IAAI,OAAM,6BACpB,KAAK,WAAa,EAAc,eAChC,KAAK,YAAc,EAAc,eACjC,KAAK,OAAS,KAEd,aAAa,CAAE,MAAO,MAAK,eAC3B,YAAW,EAAO,CAClB,GAAI,GAAS,KAAK,OAAO,MAAM,OAC3B,KAAM,IAAI,YAAW,kBAAoB,EAAM,WAAa,KAChE,KAAK,YAAc,EACnB,KAAK,OAAO,MAAM,KAAK,aAAa,cAEpC,MAAM,CACN,MAAI,MAAK,MAAQ,MACb,MAAK,KAAO,GAAmB,GAAK,KAAK,OAAQ,KAAK,YACtD,KAAK,KAAK,OAAS,EACnB,KAAK,KAAK,SAAW,AAAe,EAAK,SAAS,OAE/C,KAAK,QAEZ,YAAY,CACZ,MAAI,MAAK,YAAc,MACnB,MAAK,WAAa,GAAmB,GAAK,KAAK,OAAQ,KAAK,WAAa,KAAK,OAAO,YAAY,mBAE9F,KAAK,WAEhB,gBAAiB,CAAE,KAAK,WAAa,QACjC,QAAQ,CACR,MAAI,MAAK,QAAU,MACf,MAAK,OAAS,GAAmB,GAAY,KAAK,SAC/C,KAAK,UAEZ,eAAe,CACf,MAAI,MAAK,eAAiB,MACtB,MAAK,cAAgB,GAAmB,GAAK,AAAe,EAAO,SAAS,IAAK,KAAK,OAAO,IAAK,KAAK,OAAO,MAAO,KAAK,OAAO,MAAO,IAErI,KAAK,iBAEZ,UAAU,CAAE,MAAO,MAAK,YACxB,SAAQ,EAAO,CACf,KAAK,SAAW,EAChB,KAAK,OAAO,YAEZ,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAChB,KAAK,UAAY,EACjB,KAAK,OAAO,YAEZ,QAAQ,CAAE,MAAO,MAAK,UACtB,OAAM,EAAO,CACb,KAAK,OAAS,EACd,KAAK,KAAO,KACZ,KAAK,WAAa,KAClB,KAAK,OAAS,KACd,KAAK,cAAgB,KACrB,KAAK,OAAO,YAEZ,YAAY,CAAE,MAAO,MAAK,cAC1B,WAAU,EAAO,CACjB,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,sCACzB,KAAK,WAAa,EAClB,KAAK,KAAO,KACZ,KAAK,WAAa,KAClB,KAAK,OAAO,YAEZ,SAAS,CAAE,MAAO,MAAK,WACvB,QAAO,EAAO,CACd,KAAK,QAAU,EACf,KAAK,OAAO,YAEZ,OAAO,CAAE,MAAO,MAAK,SACrB,MAAK,EAAO,CACZ,KAAK,MAAQ,EACb,KAAK,OAAO,SAEhB,cAAc,EAAG,CACb,KAAK,SAAS,OAAO,EAAG,EAAG,GAAI,IAAY,IAE/C,cAAe,CACX,MAAI,MAAK,SAAS,QAAU,EACjB,GAAI,IAAQ,IAAK,KAErB,KAAK,SAAS,KAAK,SAAS,OAAS,GAAG,KAAK,KAAK,SAAS,KAAK,SAAS,OAAS,GAAG,MAAQ,GAExG,SAAS,EAAG,CAGR,GAFA,KAAK,WAAa,EAAc,kBAAkB,KAAK,WAAY,EAAE,GACrE,KAAK,YAAc,EAAc,kBAAkB,KAAK,YAAa,EAAE,GACnE,KAAK,SAAS,QAAU,EAAG,CAC3B,KAAK,cAAc,GACnB,KAAK,kBACL,eAEK,KAAK,SAAS,GAAG,MAAQ,EAAG,CACjC,GAAI,GAAS,KAAK,SAAS,GAAG,KAAK,KAAK,SAAS,GAAG,MAAQ,GAAG,EAAI,KAAK,SAAS,GAAG,KAAK,KAAK,SAAS,GAAG,MAAQ,GAAG,EACjH,EAAS,EAAE,EAAI,KAAK,SAAS,GAAG,KAAK,KAAK,SAAS,GAAG,MAAQ,GAAG,EACrE,GAAK,EAAS,IAAU,GAAS,GAAO,EAAS,EAAI,GAAU,CAC3D,KAAK,cAAc,GACnB,WAEC,AAAI,MAAK,SAAS,GAAG,OAAS,KAAK,SAAS,GAAG,KAAK,QACrD,KAAK,SAAS,GAAG,OAEzB,KAAK,SAAS,GAAG,KAAK,KAAK,SAAS,GAAG,OAAS,EAChD,KAAK,SAAS,GAAG,QACjB,KAAK,kBACA,GAAU,oBAAsB,GAAO,KAAK,gBAAkB,GAAU,qBACzE,KAAK,cACT,KAAK,OAAO,sBAAsB,EAAE,GACpC,KAAK,OAAO,SAEhB,aAAc,CACV,GAAI,KAAK,SAAS,QAAU,EACxB,OACJ,GAAI,GAAa,GAAU,oBAAsB,GAAM,IACvD,KAAO,KAAK,SAAS,KAAK,SAAS,OAAS,GAAG,OAAU,KAAK,gBAAkB,GAC5E,KAAK,iBAAmB,KAAK,SAAS,KAAK,SAAS,OAAS,GAAG,MAChE,KAAK,SAAS,OAAO,KAAK,SAAS,OAAS,EAAG,GAEnD,GAAI,KAAK,gBAAkB,EAAU,CACjC,GAAI,GAAQ,KAAK,gBAAkB,EAC/B,EAAU,KAAK,SAAS,KAAK,SAAS,OAAS,GAAG,MAAQ,EAC1D,EAAU,GAAI,OAAM,GACxB,GAAY,UAAU,KAAK,SAAS,KAAK,SAAS,OAAS,GAAG,KAAM,EAAO,EAAS,EAAG,KAAK,SAAS,KAAK,SAAS,OAAS,GAAG,MAAQ,GACvI,KAAK,SAAS,KAAK,SAAS,OAAS,GAAG,KAAO,EAC/C,KAAK,SAAS,KAAK,SAAS,OAAS,GAAG,OAAS,EACjD,KAAK,iBAAmB,EAE5B,GAAI,GAAO,KAAK,SAAS,GAAG,KAAK,GAAG,EAChC,EAAO,KAAK,SAAS,GAAG,KAAK,GAAG,EAChC,EAAO,KAAK,SAAS,GAAG,KAAK,GAAG,EAChC,EAAO,KAAK,SAAS,GAAG,KAAK,GAAG,EACpC,OAAS,GAAI,EAAG,EAAI,KAAK,SAAS,OAAQ,IAAK,CAC3C,GAAI,GAAQ,KAAK,SAAS,GAAG,MAC7B,AAAI,EAAO,KAAK,SAAS,GAAG,KAAK,GAAG,GAChC,GAAO,KAAK,SAAS,GAAG,KAAK,GAAG,GAChC,EAAO,KAAK,SAAS,GAAG,KAAK,EAAQ,GAAG,GACxC,GAAO,KAAK,SAAS,GAAG,KAAK,EAAQ,GAAG,GAC5C,OAAS,GAAI,EAAG,EAAI,EAAO,IACvB,AAAI,EAAO,KAAK,SAAS,GAAG,KAAK,GAAG,GAChC,GAAO,KAAK,SAAS,GAAG,KAAK,GAAG,GAChC,EAAO,KAAK,SAAS,GAAG,KAAK,GAAG,GAChC,GAAO,KAAK,SAAS,GAAG,KAAK,GAAG,GAG5C,KAAK,WAAW,IAAM,EACtB,KAAK,WAAW,IAAM,EACtB,KAAK,YAAY,IAAM,EACvB,KAAK,YAAY,IAAM,EAE3B,aAAa,EAAQ,CACjB,GAAI,EAAO,QAAU,EACjB,OACJ,GAAI,EAAO,QAAU,EAAG,CACpB,KAAK,WAAa,EAAc,kBAAkB,KAAK,WAAY,EAAO,GAAG,GAC7E,KAAK,YAAc,EAAc,kBAAkB,KAAK,YAAa,EAAO,GAAG,GAC/E,OAEJ,GAAI,GAAY,EAAO,GAAG,EAAI,EAAO,GAAG,EACpC,EAAW,EAAO,EAAO,OAAS,GAAG,EAAI,EAAO,EAAO,OAAS,GAAG,EACnE,EAAmB,GACnB,EAAc,GAGlB,OAAS,GAAI,EAAG,EAAI,KAAK,SAAS,OAAQ,IACtC,GAAI,KAAK,SAAS,GAAG,MAAQ,EAAG,CAC5B,GAAI,GAAwB,KAAK,SAAS,GAAG,KAAK,GAAG,EAAI,EAAO,EAAO,OAAS,GAAG,EAC/E,EAAmB,EAAO,GAAG,EAAI,KAAK,SAAS,GAAG,KAAK,KAAK,SAAS,GAAG,MAAQ,GAAG,EACvF,AAAK,EAAwB,GAAO,EAAwB,EAAI,GAC5D,GAAmB,GAClB,EAAmB,GAAO,EAAmB,EAAI,GAClD,GAAc,GAG1B,AAAI,GAAoB,EAEhB,MAAK,SAAS,GAAkB,MAAQ,EAAO,QAAU,KAAK,SAAS,GAAkB,KAAK,QAC9F,KAAK,SAAS,GAAkB,OACpC,GAAY,UAAU,KAAK,SAAS,GAAkB,KAAM,EAAG,KAAK,SAAS,GAAkB,KAAM,EAAO,OAAQ,KAAK,SAAS,GAAkB,OACpJ,GAAY,UAAU,EAAQ,EAAG,KAAK,SAAS,GAAkB,KAAM,EAAG,EAAO,QACjF,KAAK,SAAS,GAAkB,OAAS,EAAO,OAChD,KAAK,iBAAmB,EAAO,QAE9B,AAAI,GAAe,EAEhB,MAAK,SAAS,GAAa,MAAQ,EAAO,QAAU,KAAK,SAAS,GAAa,KAAK,QACpF,KAAK,SAAS,GAAa,OAC/B,GAAY,UAAU,EAAQ,EAAG,KAAK,SAAS,GAAa,KAAM,KAAK,SAAS,GAAa,MAAO,EAAO,QAC3G,KAAK,SAAS,GAAa,OAAS,EAAO,OAC3C,KAAK,iBAAmB,EAAO,QAI/B,MAAK,SAAS,KAAK,GAAI,IAAY,IACnC,KAAK,iBAAmB,EAAO,QAEnC,KAAK,WAAa,EAAc,kBAAkB,KAAK,WAAY,EAAO,GAAG,GAC7E,KAAK,WAAa,EAAc,kBAAkB,KAAK,WAAY,EAAO,EAAO,OAAS,GAAG,GAC7F,OAAS,GAAI,EAAG,EAAI,EAAO,OAAQ,IAC/B,KAAK,YAAc,EAAc,kBAAkB,KAAK,YAAa,EAAO,GAAG,GAEnF,AAAK,GAAU,oBAAsB,GAAO,KAAK,gBAAkB,GAAU,qBACzE,KAAK,cACT,KAAK,OAAO,eAET,iBAAgB,EAAG,EAAG,CACzB,MAAI,GAAE,KAAK,GAAG,EAAI,EAAE,KAAK,GAAG,EACjB,GACP,EAAE,KAAK,GAAG,EAAI,EAAE,KAAK,GAAG,EACjB,EACJ,EAEX,SAAU,CACN,GAAI,GAAM,GACV,KAAK,SAAS,KAAK,GAAU,iBAC7B,OAAS,GAAI,KAAK,SAAS,OAAS,EAAG,GAAK,EAAG,IAC3C,OAAS,GAAI,EAAG,EAAI,KAAK,SAAS,GAAG,MAAO,IACxC,EAAI,KAAK,KAAK,SAAS,GAAG,KAAK,IAGvC,MAAO,GAEX,iBAAiB,EAAG,EAAoB,CACpC,GAAI,GAAK,EACL,EAAK,EACL,EAAM,EACV,GAAI,KAAK,SAAS,QAAU,EACxB,MAAO,MAEX,OAAS,GAAI,EAAG,EAAI,KAAK,SAAS,OAAQ,IACtC,GAAK,GAAK,KAAK,SAAS,GAAG,KAAK,GAAG,GAAO,GAAK,KAAK,SAAS,GAAG,KAAK,KAAK,SAAS,GAAG,MAAQ,GAAG,EAAI,CACjG,GAAI,GAAO,KAAK,SAAS,GAAG,KAG5B,IAFA,EAAK,EACL,EAAK,KAAK,SAAS,GAAG,MAAQ,EACvB,EAAK,EAAK,GAAG,CAChB,GAAI,GAAK,EAAK,GAAO,EACrB,AAAI,EAAK,GAAG,EAAI,EACZ,EAAK,EAEL,EAAK,EAKb,GAHA,EAAM,EAAK,EACP,EAAM,GACN,GAAM,GACL,EAMA,CAED,GADA,IACI,GAAK,EAAK,GAAK,EACf,MAAO,GAAK,GAChB,GAAI,GAAK,EAAK,EAAM,GAAG,EACnB,MAAO,GAAK,EAAM,GACtB,GAAI,GAAI,GAAI,IACZ,SAAE,EAAI,EACN,EAAE,EAAI,EAAK,GAAK,EAAK,GAAK,EAAM,GAAG,EAAI,EAAK,GAAK,GAAM,GAAI,EAAK,GAAK,GAAM,GAAK,EAAM,GAAG,EAAI,EAAK,GAAK,GAChG,MAdP,OAAI,GAAI,EAAK,GAAK,EAAI,EAAK,EAAM,GAAG,EAAI,EAC7B,EAAK,GAEL,EAAK,EAAM,GAelC,GAAI,EACA,MAAO,MAEX,GAAI,CACA,KAAK,SAAS,GAAG,KAAK,GAAG,cAEtB,EAAP,CACI,SAEJ,GAAI,GAAQ,KAAK,SAAS,GAAG,KAAK,GAC9B,EAAQ,KAAK,IAAI,KAAK,SAAS,GAAG,KAAK,GAAG,EAAI,GAClD,OAAS,GAAI,EAAG,EAAI,KAAK,SAAS,OAAQ,IAAK,CAC3C,GAAI,GAAK,KAAK,IAAI,KAAK,SAAS,GAAG,KAAK,GAAG,EAAI,GAC3C,EAAK,KAAK,IAAI,KAAK,SAAS,GAAG,KAAK,KAAK,SAAS,GAAG,MAAQ,GAAG,EAAI,GACxE,AAAI,EAAK,GACL,GAAQ,KAAK,SAAS,GAAG,KAAK,GAC9B,EAAQ,GAER,EAAK,GACL,GAAQ,KAAK,SAAS,GAAG,KAAK,KAAK,SAAS,GAAG,MAAQ,GACvD,EAAQ,GAGhB,MAAO,GAAM,QAEjB,OAAQ,CACJ,KAAK,SAAW,GAChB,KAAK,WAAa,EAAc,eAChC,KAAK,YAAc,EAAc,eACjC,KAAK,OAAO,qBACZ,KAAK,gBAAkB,IAG/B,GAAU,oBAAsB,EACzB,YAAkB,IACjB,eAAe,CAAE,MAAO,MAAK,iBAC7B,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAAE,KAAK,UAAY,EACvC,YAAY,EAAQ,EAAc,CAC9B,KAAK,UAAY,KACjB,KAAK,SAAW,GAChB,KAAK,eAAiB,GACtB,KAAK,eAAiB,GACtB,KAAK,qBAAuB,GAC5B,KAAK,eAAiB,GAAY,cAAc,kBAChD,KAAK,UAAY,EACjB,KAAK,cAAgB,GACrB,KAAK,mBAAqB,GAC1B,KAAK,SAAW,AAAe,EAAO,SAAS,IAAK,IAAK,IAAK,KAC9D,KAAK,aAAe,AAAe,EAAO,MAC1C,KAAK,iBAAmB,EACxB,KAAK,SAAW,GAChB,KAAK,gBAAkB,GACvB,KAAK,kBAAoB,GACzB,KAAK,SAAW,KAChB,KAAK,KAAO,KACZ,KAAK,MAAQ,KACb,KAAK,cAAgB,EACrB,KAAK,gBAAkB,EACvB,KAAK,MAAQ,GAAmB,IAAM,EAAQ,KAAM,EAAG,SAEvD,UAAU,CAAE,MAAO,MAAK,YACxB,SAAQ,EAAO,CACf,KAAK,SAAW,EAChB,KAAK,gBAAgB,YAErB,gBAAgB,CAAE,MAAO,MAAK,kBAC9B,eAAc,EAAO,CACrB,KAAK,eAAiB,EACtB,KAAK,gBAAgB,YAErB,gBAAgB,CAAE,MAAO,MAAK,kBAC9B,eAAc,EAAO,CACrB,KAAK,eAAiB,EACtB,KAAK,gBAAgB,YAErB,sBAAsB,CAAE,MAAO,MAAK,wBACpC,gBAAgB,CAAE,MAAO,MAAK,kBAC9B,eAAc,EAAO,CACrB,KAAK,eAAiB,EACtB,KAAK,8BACL,KAAK,gBAAgB,SAEzB,6BAA8B,CAC1B,GAAI,KAAK,gBAAkB,GAAY,cAAc,kBAAmB,CACpE,KAAK,qBAAuB,GAC5B,OAEJ,KAAK,qBAAuB,QAI5B,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAChB,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,qCACzB,KAAK,UAAY,EACjB,KAAK,gBAAgB,YAErB,eAAe,CAAE,MAAO,MAAK,iBAC7B,cAAa,EAAO,CACpB,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,yCACzB,KAAK,cAAgB,EACrB,KAAK,gBAAgB,YAErB,oBAAoB,CAAE,MAAO,MAAK,sBAClC,mBAAkB,EAAO,CACzB,GAAI,GAAS,EACT,KAAM,IAAI,YAAW,qCACzB,KAAK,mBAAqB,KAE1B,UAAU,CAAE,MAAO,MAAK,YACxB,SAAQ,EAAO,CACf,KAAK,SAAW,EAChB,KAAK,SAAW,KAChB,KAAK,gBAAgB,YAErB,cAAc,CAAE,MAAO,MAAK,gBAC5B,aAAY,EAAO,CACnB,KAAK,aAAe,EACpB,KAAK,KAAO,KACZ,KAAK,gBAAgB,YAErB,kBAAkB,CAAE,MAAO,MAAK,oBAChC,iBAAgB,EAAO,CACvB,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,sCACzB,KAAK,iBAAmB,EACxB,KAAK,KAAO,KACZ,KAAK,gBAAgB,YAErB,UAAU,CAAE,MAAO,MAAK,YACxB,SAAQ,EAAO,CACf,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,oCACzB,KAAK,SAAW,EAChB,KAAK,gBAAgB,YAErB,iBAAiB,CAAE,MAAO,MAAK,mBAC/B,gBAAe,EAAO,CACtB,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,mCACzB,KAAK,gBAAkB,EACvB,KAAK,gBAAgB,YAErB,mBAAmB,CAAE,MAAO,MAAK,qBACjC,kBAAiB,EAAO,CACxB,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,mCACzB,KAAK,kBAAoB,EACzB,KAAK,gBAAgB,YAErB,UAAU,CACV,MAAI,MAAK,UAAY,MACjB,MAAK,SAAW,GAAmB,GAAY,KAAK,WAEjD,KAAK,YAEZ,MAAM,CACN,MAAI,MAAK,MAAQ,MACb,MAAK,KAAO,GAAmB,GAAK,KAAK,aAAc,KAAK,iBAAkB,KAC3E,KAAK,QAEZ,OAAO,CAAE,MAAO,MAAK,QAE7B,AAAC,UAAU,EAAa,CACpB,eAAmD,EAAU,CACzD,YAAY,EAAO,EAAe,EAAW,CACzC,MAAM,EAAO,EAAe,IAGpC,EAAY,sBAAwB,EACpC,eAA2C,EAAM,EAEjD,EAAc,kBAAoB,GAAI,GAAsB,oBAAqB,SACjF,EAAc,YAAc,GAAI,GAAsB,cAAe,KACrE,EAAc,aAAe,GAAI,GAAsB,eAAgB,OACvE,EAAc,cAAgB,GAAI,GAAsB,gBAAiB,QACzE,EAAc,eAAiB,GAAI,GAAsB,iBAAkB,SAC3E,EAAc,gBAAkB,GAAI,GAAsB,kBAAmB,UAC7E,EAAc,iBAAmB,GAAI,GAAsB,mBAAoB,WAC/E,EAAc,kBAAoB,GAAI,GAAsB,oBAAqB,YACjF,EAAc,mBAAqB,GAAI,GAAsB,qBAAsB,aACnF,EAAc,oBAAsB,GAAI,GAAsB,sBAAuB,cACrF,EAAc,qBAAuB,GAAI,GAAsB,uBAAwB,eACvF,EAAY,cAAgB,IAC7B,IAAgB,IAAc,KAC1B,YAAkB,IACjB,eAAe,CAAE,MAAO,MAAK,iBAC7B,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAAE,KAAK,UAAY,KACnC,mBAAmB,CAAE,MAAO,MAAK,eACjC,kBAAiB,EAAO,CACxB,GAAI,GAAS,EACT,KAAM,IAAI,YAAW,4CACzB,KAAK,YAAc,EACnB,KAAK,gBAAgB,kBACrB,KAAK,gBAAgB,SAEzB,YAAY,EAAQ,EAAc,CAC9B,KAAK,UAAY,KACjB,KAAK,YAAc,EACnB,KAAK,SAAW,GAChB,KAAK,UAAY,GAAY,SAAS,OACtC,KAAK,SAAW,GAChB,KAAK,SAAW,AAAe,EAAO,SAAS,IAAK,IAAK,IAAK,KAC9D,KAAK,aAAe,AAAe,EAAO,MAC1C,KAAK,iBAAmB,EACxB,KAAK,SAAW,GAChB,KAAK,gBAAkB,GACvB,KAAK,kBAAoB,GACzB,KAAK,SAAW,KAChB,KAAK,KAAO,KACZ,KAAK,MAAQ,KACb,KAAK,cAAgB,EACrB,KAAK,gBAAkB,EACvB,KAAK,MAAQ,GAAmB,IAAM,EAAQ,KAAM,EAAG,SAEvD,UAAU,CAAE,MAAO,MAAK,YACxB,SAAQ,EAAO,CACf,KAAK,SAAW,EAChB,KAAK,gBAAgB,YAErB,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAChB,KAAK,UAAY,EACjB,KAAK,gBAAgB,YAErB,UAAU,CAAE,MAAO,MAAK,YACxB,SAAQ,EAAO,CACf,KAAK,SAAW,EAChB,KAAK,gBAAgB,YAErB,UAAU,CAAE,MAAO,MAAK,YACxB,SAAQ,EAAO,CACf,KAAK,SAAW,EAChB,KAAK,SAAW,KAChB,KAAK,gBAAgB,YAErB,cAAc,CAAE,MAAO,MAAK,gBAC5B,aAAY,EAAO,CACnB,KAAK,aAAe,EACpB,KAAK,KAAO,KACZ,KAAK,gBAAgB,YAErB,kBAAkB,CAAE,MAAO,MAAK,oBAChC,iBAAgB,EAAO,CACvB,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,sCACzB,KAAK,iBAAmB,EACxB,KAAK,KAAO,KACZ,KAAK,gBAAgB,YAErB,UAAU,CAAE,MAAO,MAAK,YACxB,SAAQ,EAAO,CACf,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,oCACzB,KAAK,SAAW,EAChB,KAAK,gBAAgB,YAErB,iBAAiB,CAAE,MAAO,MAAK,mBAC/B,gBAAe,EAAO,CACtB,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,mCACzB,KAAK,gBAAkB,EACvB,KAAK,gBAAgB,YAErB,mBAAmB,CAAE,MAAO,MAAK,qBACjC,kBAAiB,EAAO,CACxB,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,mCACzB,KAAK,kBAAoB,EACzB,KAAK,gBAAgB,YAErB,UAAU,CACV,MAAI,MAAK,UAAY,MACjB,MAAK,SAAW,GAAmB,GAAY,KAAK,WAEjD,KAAK,YAEZ,MAAM,CACN,MAAI,MAAK,MAAQ,MACb,MAAK,KAAO,GAAmB,GAAK,KAAK,aAAc,KAAK,iBAAkB,KAC3E,KAAK,QAEZ,OAAO,CAAE,MAAO,MAAK,QAE7B,AAAC,UAAU,EAAa,CACpB,eAA8C,EAAU,CACpD,YAAY,EAAO,EAAe,EAAW,CACzC,MAAM,EAAO,EAAe,IAGpC,EAAY,iBAAmB,EAC/B,eAAsC,EAAM,EAE5C,EAAS,KAAO,GAAI,GAAiB,OAAQ,QAC7C,EAAS,QAAU,GAAI,GAAiB,UAAW,YACnD,EAAS,IAAM,GAAI,GAAiB,MAAO,OAC3C,EAAS,SAAW,GAAI,GAAiB,WAAY,aACrD,EAAS,MAAQ,GAAI,GAAiB,QAAS,SAC/C,EAAS,YAAc,GAAI,GAAiB,cAAe,gBAC3D,EAAS,OAAS,GAAI,GAAiB,SAAU,UACjD,EAAS,WAAa,GAAI,GAAiB,aAAc,eACzD,EAAY,SAAW,IACxB,IAAgB,IAAc,KAC1B,YAAgB,IACf,eAAe,CAAE,MAAO,MAAK,iBAC7B,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAAE,KAAK,UAAY,KACnC,iBAAiB,CAAE,MAAO,MAAK,mBAC/B,gBAAe,EAAO,CAAE,KAAK,gBAAkB,KAC/C,iBAAiB,CAAE,MAAO,MAAK,mBAC/B,gBAAe,EAAO,CACtB,AAAI,EAAQ,IACR,GAAQ,IACR,EAAQ,IACR,GAAQ,IACZ,KAAK,gBAAkB,EACvB,KAAK,gBAAgB,SAEzB,YAAY,EAAQ,EAAc,CAC9B,KAAK,UAAY,KACjB,KAAK,UAAY,GAAmB,IACpC,KAAK,OAAS,KACd,KAAK,gBAAkB,GACvB,KAAK,gBAAkB,GACvB,KAAK,SAAW,GAChB,KAAK,UAAY,AAAe,EAAO,SAAS,IAAK,IAAK,IAAK,KAC/D,KAAK,mBAAqB,AAAe,EAAO,SAAS,IAAK,GAAI,GAAI,IACtE,KAAK,eAAiB,GAAU,cAAc,KAC9C,KAAK,UAAY,AAAe,EAAO,SAAS,IAAK,IAAK,IAAK,KAC/D,KAAK,aAAe,AAAe,EAAO,SAAS,IAAK,EAAG,IAAK,GAChE,KAAK,aAAe,KACpB,KAAK,KAAO,KACZ,KAAK,iBAAmB,KACxB,KAAK,YAAc,AAAe,EAAO,MACzC,KAAK,gBAAkB,EACvB,KAAK,WAAa,KAClB,KAAK,aAAe,AAAe,EAAO,QAC1C,KAAK,iBAAmB,EACxB,KAAK,SAAW,KAChB,KAAK,MAAQ,KACb,KAAK,cAAgB,EACrB,KAAK,gBAAkB,EACvB,KAAK,MAAQ,GAAmB,IAAM,EAAQ,KAAM,EAAG,SAEvD,UAAU,CAAE,MAAO,MAAK,YACxB,SAAQ,EAAO,CACf,KAAK,SAAW,EAChB,KAAK,gBAAgB,YAErB,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAChB,KAAK,UAAY,EACjB,KAAK,SAAW,KAChB,KAAK,gBAAgB,YAErB,oBAAoB,CAAE,MAAO,MAAK,sBAClC,mBAAkB,EAAO,CACzB,KAAK,mBAAqB,EAC1B,KAAK,iBAAmB,KACxB,KAAK,gBAAgB,YAErB,gBAAgB,CAAE,MAAO,MAAK,kBAC9B,eAAc,EAAO,CACrB,KAAK,eAAiB,EACtB,KAAK,gBAAgB,YAErB,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAChB,KAAK,UAAY,EACjB,KAAK,SAAW,KAChB,KAAK,gBAAgB,YAErB,cAAc,CAAE,MAAO,MAAK,gBAC5B,aAAY,EAAO,CACnB,KAAK,aAAe,EACpB,KAAK,aAAe,KACpB,KAAK,gBAAgB,YAErB,cAAc,CACd,MAAI,MAAK,cAAgB,MACrB,MAAK,aAAe,GAAmB,GAAY,KAAK,eAErD,KAAK,gBAEZ,MAAM,CACN,MAAI,MAAK,MAAQ,MACb,MAAK,KAAO,GAAmB,GAAK,KAAK,YAAa,KAAK,gBAAiB,KACzE,KAAK,QAEZ,kBAAkB,CAClB,MAAI,MAAK,kBAAoB,MACzB,MAAK,iBAAmB,GAAmB,GAAK,KAAK,mBAAoB,EAAG,KACzE,KAAK,oBAEZ,aAAa,CAAE,MAAO,MAAK,eAC3B,YAAW,EAAO,CAClB,KAAK,YAAc,EACnB,KAAK,KAAO,KACZ,KAAK,gBAAgB,YAErB,iBAAiB,CAAE,MAAO,MAAK,mBAC/B,gBAAe,EAAO,CACtB,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,sCACzB,KAAK,gBAAkB,EACvB,KAAK,KAAO,KACZ,KAAK,gBAAgB,YAErB,YAAY,CACZ,MAAI,MAAK,YAAc,MACnB,MAAK,WAAa,GAAmB,GAAK,KAAK,aAAc,KAAK,iBAAkB,KACjF,KAAK,cAEZ,cAAc,CAAE,MAAO,MAAK,gBAC5B,aAAY,EAAO,CACnB,KAAK,aAAe,EACpB,KAAK,WAAa,KAClB,KAAK,gBAAgB,YAErB,kBAAkB,CAAE,MAAO,MAAK,oBAChC,iBAAgB,EAAO,CACvB,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,sCACzB,KAAK,iBAAmB,EACxB,KAAK,WAAa,KAClB,KAAK,gBAAgB,SAEzB,YAAY,EAAa,EAAc,EAAS,EAAS,EAAS,EAAS,CACvE,AAAK,MAAK,UAAU,SAAW,GAAa,KAAK,UAAU,SAAW,GAC9D,KAAK,UAAU,SAAW,GAAa,KAAK,UAAU,SAAW,IACrE,MAAK,SAAW,MAEpB,KAAK,UAAU,QAAU,EACzB,KAAK,UAAU,QAAU,EACzB,KAAK,UAAU,QAAU,EACzB,KAAK,UAAU,QAAU,EACzB,KAAK,UAAU,MAAQ,EACvB,KAAK,UAAU,OAAS,EAE5B,eAAe,EAAM,EAAM,EAAO,EAAO,CACrC,KAAK,UAAU,KAAO,EACtB,KAAK,UAAU,KAAO,EACtB,KAAK,UAAU,MAAQ,EACvB,KAAK,UAAU,MAAQ,EAE3B,aAAa,EAAe,EAAU,EAAU,CAC5C,KAAK,UAAU,iBAAmB,EAClC,KAAK,UAAU,iBAAmB,EAClC,KAAK,UAAU,aAAe,KAAK,UAAU,KAC7C,KAAK,UAAU,gBAAkB,KAAK,UAAU,QAChD,KAAK,UAAU,cAAgB,KAAK,UAAU,MAC9C,KAAK,UAAU,iBAAmB,EAAc,EAChD,KAAK,UAAU,QAAU,MAEzB,UAAU,CAAE,MAAO,MAAK,UAAU,QACtC,aAAc,CAAE,KAAK,UAAU,QAAU,MACrC,WAAW,CAAE,MAAO,MAAK,aACzB,UAAU,CACV,MAAI,MAAK,UAAY,MACjB,MAAK,SAAW,GAAmB,IAAqB,KAAK,UAAW,KAAK,YAE1E,KAAK,YAEZ,OAAO,CAAE,MAAO,MAAK,QAE7B,AAAC,UAAU,EAAW,CAClB,eAAmD,EAAU,CACzD,YAAY,EAAO,EAAe,EAAW,CACzC,MAAM,EAAO,EAAe,IAGpC,EAAU,sBAAwB,EAClC,eAA2C,EAAM,EAEjD,EAAc,KAAO,GAAI,GAAsB,OAAQ,aACvD,EAAc,QAAU,GAAI,GAAsB,UAAW,0BAC7D,EAAU,cAAgB,IAC3B,IAAc,IAAY,KACtB,YAAa,IACZ,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAAE,KAAK,UAAY,QAChC,WAAU,EAAG,CAAE,MAAO,MAAK,MAAM,IAAM,GAAK,OAC/C,eAAe,CACf,GAAI,KAAK,eAAiB,KACtB,MAAO,MAAK,cAGhB,OAFA,KAAK,cAAgB,GAAmB,GAAc,OACtD,KAAK,cAAc,cAAgB,EAC3B,KAAK,gBACJ,IAAO,UAAU,KAClB,KAAK,cAAc,UAAY,EAC/B,UACC,IAAO,UAAU,OAClB,KAAK,cAAc,UAAY,EAC/B,UACC,IAAO,UAAU,MAClB,KAAK,cAAc,UAAY,EAC/B,MAER,MAAO,MAAK,iBAEZ,oBAAoB,CAAE,MAAO,MAAK,uBAClC,mBAAkB,EAAU,CAAE,KAAK,oBAAsB,KACzD,eAAe,CAAE,MAAO,MAAK,cACjC,YAAY,EAAQ,EAAc,CAC9B,KAAK,UAAY,KACjB,KAAK,cAAgB,KACrB,KAAK,oBAAsB,KAC3B,KAAK,SAAW,GAChB,KAAK,WAAa,EAClB,KAAK,qBAAuB,GAC5B,KAAK,WAAa,GAClB,KAAK,MAAQ,SACb,KAAK,WAAa,GAAO,UAAU,OACnC,KAAK,SAAW,AAAe,EAAO,SAAS,IAAK,IAAK,IAAK,KAC9D,KAAK,aAAe,AAAe,EAAO,QAC1C,KAAK,iBAAmB,EACxB,KAAK,WAAa,EAClB,KAAK,SAAW,EAChB,KAAK,gBAAkB,EACvB,KAAK,kBAAoB,EACzB,KAAK,SAAW,KAChB,KAAK,YAAc,KACnB,KAAK,KAAO,KACZ,KAAK,cAAgB,KACrB,KAAK,MAAQ,KACb,KAAK,cAAgB,EACrB,KAAK,gBAAkB,EACvB,KAAK,MAAQ,GAAmB,IAAM,EAAQ,KAAM,EAAG,MAE3D,cAAe,CACX,KAAK,gBAAgB,mBAAmB,MAE5C,oBAAoB,EAAU,EAAM,CAChC,KAAK,QAAU,GACf,KAAK,qBAAwB,EAAK,eAAiB,EAAc,cAAc,UAAa,EAAK,SAAW,EAC5G,KAAK,WAAa,GAAO,UAAU,KAAK,qBAAuB,EAAW,EAAK,SAAW,GAC1F,KAAK,gBAAgB,qBACrB,KAAK,gBAAgB,YAErB,UAAU,CAAE,MAAO,MAAK,YACxB,SAAQ,EAAO,CACf,AAAI,KAAK,UAAY,GACjB,MAAK,SAAW,EAChB,KAAK,gBAAgB,qBACrB,KAAK,gBAAgB,aAGzB,YAAY,CAAE,MAAO,MAAK,cAC1B,WAAU,EAAO,CACjB,KAAK,WAAa,GAAO,UAAU,GAC/B,KAAK,UACL,KAAK,gBAAgB,YAEzB,gBAAgB,CAAE,MAAO,MAAK,qBAAuB,EAAc,cAAc,SAAW,EAAc,cAAc,YACxH,eAAc,EAAO,CACrB,GAAI,GAAI,GAAS,EAAc,cAAc,SAC7C,GAAI,KAAK,sBAAwB,EAAG,CAChC,GAAI,GAAe,KAAK,cAAc,SACtC,AAAI,MAAM,IACN,GAAe,GACnB,AAAI,EACA,MAAK,qBAAuB,GAC5B,KAAK,YAAc,GAGnB,MAAK,qBAAuB,GAC5B,KAAK,YAAc,GAEvB,KAAK,WAAa,GAAO,UAAU,KAAK,YACxC,KAAK,gBAAgB,aAKzB,kBAAkB,CAAE,MAAO,IAAI,IAAc,KAAK,WAAY,KAAK,yBACnE,iBAAgB,EAAO,CACvB,GAAI,EAAM,QACN,KAAK,mBAEJ,CACD,GAAI,GAAI,GAAO,UAAU,EAAM,OAC/B,AAAK,MAAK,sBAAwB,EAAM,UAAc,KAAK,YAAc,IACrE,MAAK,WAAa,EAClB,KAAK,qBAAuB,EAAM,SAC9B,KAAK,UACL,KAAK,gBAAgB,cAIjC,YAAY,CAAE,MAAO,MAAK,cAC1B,WAAU,EAAO,CACjB,KAAK,WAAa,KAAK,IAAI,IAAK,KAAK,IAAI,EAAG,IACxC,KAAK,UACL,KAAK,gBAAgB,YAEzB,OAAO,CAAE,MAAO,MAAK,SACrB,MAAK,EAAO,CACZ,KAAK,MAAQ,EACb,KAAK,gBAAgB,qBACjB,KAAK,UACL,KAAK,gBAAgB,YAEzB,YAAY,CAAE,MAAO,MAAK,cAC1B,WAAU,EAAO,CACjB,KAAK,WAAa,EAClB,KAAK,cAAgB,KACjB,KAAK,UACL,KAAK,gBAAgB,YAEzB,YAAY,CACZ,MAAI,MAAK,MAAM,QAAU,GACd,KAAK,MACT,KAAK,MAAM,UAAU,EAAG,IAAM,QAErC,UAAU,CAAE,MAAO,MAAK,YACxB,SAAQ,EAAO,CACf,KAAK,SAAW,EAChB,KAAK,SAAW,KACZ,KAAK,UACL,KAAK,gBAAgB,YAEzB,cAAc,CAAE,MAAO,MAAK,gBAC5B,aAAY,EAAO,CACnB,KAAK,aAAe,EACpB,KAAK,YAAc,KACnB,KAAK,KAAO,KACZ,KAAK,cAAgB,KACjB,KAAK,UACL,KAAK,gBAAgB,YAEzB,kBAAkB,CAAE,MAAO,MAAK,oBAChC,iBAAgB,EAAO,CACvB,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,sCACzB,KAAK,iBAAmB,EACxB,KAAK,gBAAgB,qBACrB,KAAK,KAAO,KACR,KAAK,UACL,KAAK,gBAAgB,YAEzB,YAAY,CAAE,MAAO,MAAK,cAC1B,WAAU,EAAO,CACjB,KAAK,WAAa,EACd,KAAK,UACL,KAAK,gBAAgB,YAEzB,UAAU,CAAE,MAAO,MAAK,YACxB,SAAQ,EAAO,CACf,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,oCACzB,KAAK,SAAW,EAChB,KAAK,gBAAgB,qBACjB,KAAK,UACL,KAAK,gBAAgB,YAEzB,iBAAiB,CAAE,MAAO,MAAK,mBAC/B,gBAAe,EAAO,CACtB,KAAK,gBAAkB,EACnB,KAAK,UACL,KAAK,gBAAgB,YAEzB,mBAAmB,CAAE,MAAO,MAAK,qBACjC,kBAAiB,EAAO,CACxB,KAAK,kBAAoB,EACrB,KAAK,UACL,KAAK,gBAAgB,YAEzB,UAAU,CACV,MAAI,MAAK,UAAY,MACjB,MAAK,SAAW,GAAmB,GAAY,KAAK,WAEjD,KAAK,YAEZ,aAAa,CACb,MAAI,MAAK,aAAe,MACpB,MAAK,YAAc,GAAmB,GAAY,KAAK,aAAc,KAElE,KAAK,eAEZ,MAAM,CACN,MAAI,MAAK,MAAQ,MACb,MAAK,KAAO,GAAmB,GAAK,KAAK,aAAc,KAAK,iBAAkB,KAC3E,KAAK,QAEZ,eAAe,CACf,MAAI,MAAK,eAAiB,MACtB,MAAK,cAAgB,GAAmB,GAAK,KAAK,aAAc,IAC7D,KAAK,iBAEZ,OAAO,CAAE,MAAO,MAAK,QAE7B,AAAC,UAAU,EAAQ,CAKf,eAA+C,EAAU,CACrD,YAAY,EAAO,EAAe,EAAW,CACzC,MAAM,EAAO,EAAe,IAGpC,EAAO,kBAAoB,EAC3B,eAAuC,EAAM,EAE7C,EAAU,KAAO,GAAI,GAAkB,OAAQ,QAC/C,EAAU,OAAS,GAAI,GAAkB,SAAU,UACnD,EAAU,MAAQ,GAAI,GAAkB,QAAS,SACjD,EAAO,UAAY,IACpB,IAAW,IAAS,KAChB,YAAa,IACZ,eAAe,CAAE,MAAO,MAAK,iBAC7B,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAAE,KAAK,UAAY,EACvC,YAAY,EAAQ,EAAc,CAC9B,KAAK,UAAY,KACjB,KAAK,OAAS,GACd,KAAK,MAAQ,KACb,KAAK,cAAgB,EACrB,KAAK,gBAAkB,EACvB,KAAK,MAAQ,GAAmB,IAAM,EAAQ,KAAM,GAAI,SAExD,QAAQ,CAAE,MAAO,MAAK,UACtB,OAAM,EAAO,CACb,KAAK,OAAS,EACd,KAAK,gBAAgB,YAErB,OAAO,CAAE,MAAO,MAAK,QAEtB,QAAkB,IACjB,eAAe,CAAE,MAAO,MAAK,iBAC7B,QAAQ,CAAE,MAAO,MAAK,OAC1B,SAAU,CACN,GAAI,GAAI,GAAmB,IAAK,KAAK,gBAAiB,MACtD,YAAK,OAAO,KAAK,GACV,KAEP,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAAE,KAAK,UAAY,KACnC,cAAc,CAAE,MAAO,MAAK,gBAC5B,aAAY,EAAO,CAAE,KAAK,aAAe,EAC7C,YAAY,EAAQ,EAAc,CAC9B,KAAK,UAAY,KACjB,KAAK,aAAe,KACpB,KAAK,KAAO,KACZ,KAAK,SAAW,KAChB,KAAK,SAAW,GAChB,KAAK,eAAiB,GACtB,KAAK,KAAO,OAAO,IACnB,KAAK,KAAO,OAAO,IACnB,KAAK,MAAQ,OAAO,IACpB,KAAK,WAAa,EAClB,KAAK,OAAS,AAAe,EAAO,MACpC,KAAK,UAAY,GACjB,KAAK,WAAa,AAAe,EAAO,SAAS,GAAI,EAAG,EAAG,GAC3D,KAAK,eAAiB,EACtB,KAAK,MAAQ,KACb,KAAK,OAAS,GACd,KAAK,cAAgB,EACrB,KAAK,gBAAkB,EACvB,KAAK,QAAU,GAAI,IAAO,EAAQ,MAClC,KAAK,MAAQ,GAAmB,IAAM,EAAQ,SAE9C,MAAM,CACN,MAAI,MAAK,MAAQ,MACb,MAAK,KAAO,GAAmB,GAAK,KAAK,OAAQ,KAAK,WAAY,KAC/D,KAAK,QAEZ,UAAU,CACV,MAAI,MAAK,UAAY,MACjB,MAAK,SAAW,GAAmB,GAAK,KAAK,WAAY,KAAK,eAAgB,KAC3E,KAAK,YAEZ,UAAU,CAAE,MAAO,MAAK,YACxB,SAAQ,EAAO,CACf,KAAK,SAAW,EACX,GACD,MAAK,eAAiB,IAE1B,KAAK,gBAAgB,YAErB,gBAAgB,CAAE,MAAO,MAAK,kBAC9B,eAAc,EAAO,CAAE,KAAK,eAAiB,EACjD,UAAW,CACP,AAAI,KAAK,gBACL,MAAK,QAAU,GACX,KAAK,cAAgB,MACrB,KAAK,aAAa,OAG9B,WAAW,EAAW,EAAW,CAC7B,GAAI,CAAC,MAAM,IAAc,CAAC,MAAM,IAAe,GAAa,EACxD,KAAM,IAAI,YAAW,QAAU,EAAU,WAAa,iCAAmC,EAAU,WAAa,KAEpH,KAAK,KAAO,EACZ,KAAK,KAAO,EACZ,KAAK,gBAAgB,YAErB,MAAM,CAAE,MAAO,MAAK,QACpB,KAAI,EAAO,CACX,GAAI,CAAC,MAAM,IAAU,CAAC,MAAM,KAAK,OAAS,CAAC,AAAe,EAAc,qBAChE,GAAS,KAAK,KACd,KAAM,IAAI,YAAW,mCAAqC,KAAK,KAAK,WAAa,KAGzF,KAAK,KAAO,EACZ,KAAK,gBAAgB,SAEzB,UAAU,EAAK,EAAK,CAChB,AAAI,EAAM,GACN,MAAK,KAAO,EACZ,KAAK,KAAO,EACZ,KAAK,gBAAgB,aAGzB,MAAM,CAAE,MAAO,MAAK,QACpB,KAAI,EAAO,CACX,GAAI,CAAC,MAAM,IAAU,CAAC,MAAM,KAAK,OAAS,CAAC,AAAe,EAAc,qBAChE,GAAS,KAAK,KACd,KAAM,IAAI,YAAW,gCAAkC,KAAK,KAAK,WAAa,KAEtF,KAAK,KAAO,EACZ,KAAK,gBAAgB,YAErB,OAAO,CAAE,MAAO,MAAK,SACrB,MAAK,EAAO,CACZ,GAAI,CAAC,MAAM,IAAW,EAAQ,EAC1B,KAAM,IAAI,YAAW,4CACzB,KAAK,MAAQ,EACb,KAAK,gBAAgB,YAErB,YAAY,CAAE,MAAO,MAAK,cAC1B,WAAU,EAAO,CACjB,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,sCACzB,KAAK,WAAa,EAClB,KAAK,KAAO,KACZ,KAAK,gBAAgB,YAErB,QAAQ,CAAE,MAAO,MAAK,UACtB,OAAM,EAAO,CACb,KAAK,OAAS,EACd,KAAK,KAAO,KACZ,KAAK,gBAAgB,YAErB,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAChB,KAAK,UAAY,EACjB,KAAK,gBAAgB,YAErB,YAAY,CAAE,MAAO,MAAK,cAC1B,WAAU,EAAO,CACjB,KAAK,WAAa,EAClB,KAAK,SAAW,KAChB,KAAK,gBAAgB,YAErB,gBAAgB,CAAE,MAAO,MAAK,kBAC9B,eAAc,EAAO,CACrB,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,sCACzB,KAAK,eAAiB,EACtB,KAAK,SAAW,KAChB,KAAK,gBAAgB,YAErB,OAAO,CAAE,MAAO,MAAK,SACrB,SAAS,CAAE,MAAO,MAAK,UAExB,QAAoB,CACvB,aAAc,CACV,KAAK,QAAU,EACf,KAAK,QAAU,EACf,KAAK,OAAS,EACd,KAAK,OAAS,EACd,KAAK,KAAO,EACZ,KAAK,MAAQ,EACb,KAAK,KAAO,EACZ,KAAK,UAAY,IAyBlB,QAAoB,IACnB,WAAW,CAAE,MAAO,MAAK,eACzB,UAAS,EAAO,CAAE,KAAK,YAAc,KACrC,QAAQ,CAAE,MAAO,MAAK,UACtB,OAAM,EAAO,CAAE,KAAK,OAAS,EACjC,YAAY,EAAG,EAAK,EAAS,CACzB,KAAK,YAAc,GACnB,KAAK,OAAS,EAId,KAAK,SAAW,GAChB,KAAK,YAAc,EACnB,KAAK,OAAS,EACd,KAAK,SAAW,MAAQ,IAAY,YAAc,GAAQ,EAE9D,OAAQ,CACJ,MAAO,IAAI,IAAc,KAAK,OAAQ,KAAK,YAAa,KAAK,UAEjE,UAAW,CACP,GAAI,KAAK,YACL,MAAO,GAAc,oBAAoB,KAAK,OAAQ,GAErD,CACD,GAAI,GAAO,EAAc,aAAa,KAAK,QACvC,EAAM,EAAK,cAAc,WAAa,IAAO,GAAK,WAAa,GAAG,WAAa,IAAM,EAAK,UAAU,WAClG,IAAM,EAAK,WAAW,WAAa,IACrC,EAAK,EAAK,aAAa,WAC3B,AAAI,EAAG,QAAU,GACb,GAAK,IAAM,GACf,EAAM,EAAM,EAAK,IACjB,GAAI,GAAI,EAAK,aACT,EAAK,EAAK,kBACd,SAAI,EAAI,EAAK,IACT,EAAI,IACJ,GAAM,EAAM,KAChB,AAAI,GAAM,EACN,EAAM,EAAM,EAAE,WAGd,EAAM,EAAM,EAAE,QAAQ,GAEnB,GAGf,SAAS,EAAK,CACV,MAAI,MAAK,YACE,EAAc,4BAA4B,GAC9C,EAAc,4BAA4B,MAEjD,UAAU,CAAE,MAAO,MAAK,YACxB,SAAQ,EAAO,CAAE,KAAK,SAAW,IAEzC,GAAc,gBAAkB,uBAChC,GAAc,gBAAkB,iBAChC,YAAwB,CACpB,aAAc,CACV,KAAK,uBAAyB,MAG/B,gBAAoB,GAAY,CACnC,YAAY,EAAQ,EAAc,EAAO,CACrC,MAAM,EAAQ,GACd,KAAK,OAAS,EACd,KAAK,eAAiB,GACtB,KAAK,UAAY,GAAM,YAAY,KACnC,KAAK,WAAa,EAClB,KAAK,KAAO,EACZ,KAAK,KAAO,EACZ,KAAK,OAAS,EACd,KAAK,IAAM,GAAI,IACf,KAAK,IAAI,uBAAyB,IAClC,KAAK,cAAgB,GAAI,IACzB,KAAK,cAAc,MAAQ,EAC3B,KAAK,cAAc,KAAO,EAC1B,KAAK,cAAc,KAAO,MAE1B,QAAQ,CAAE,MAAO,MAAK,OAC1B,YAAa,CACT,KAAK,KAAO,KAAK,cAAc,OAC/B,KAAK,KAAO,KAAK,cAAc,OAC/B,KAAK,gBAAgB,SAEzB,cAAe,CACX,KAAK,KAAO,OAAO,IACnB,KAAK,KAAO,OAAO,IACnB,KAAK,gBAAgB,YAErB,gBAAgB,CAAE,MAAO,MAAK,kBAC9B,eAAc,EAAO,CACrB,KAAK,eAAiB,EACtB,KAAK,gBAAgB,YAErB,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAChB,KAAK,UAAY,EACjB,KAAK,gBAAgB,SAEzB,oBAAoB,EAAG,CACnB,GAAI,GAAM,GAAI,IACV,EAAM,KAAK,IACX,EAAM,KAAK,IACf,EAAI,KAAO,KAAK,KAChB,EAAI,UAAY,EACX,EAAc,UAAU,IACzB,GAAI,EAAc,eAClB,EAAE,IAAM,EACR,EAAE,IAAM,KAER,MAAM,IACN,GAAM,EAAE,KACR,MAAM,IACN,GAAM,EAAE,KACZ,EAAI,OAAS,EACb,EAAI,OAAS,EACT,GAAO,GACP,IAAO,GACP,GAAO,IAEP,GAAO,GACP,IAAQ,GAAM,GAAO,MACrB,GAAO,GACP,IAAQ,GAAM,GAAO,MACzB,EAAI,MAAQ,EACZ,EAAI,KAAO,EACX,EAAI,QAAU,EACd,EAAI,QAAU,EACd,GAAI,GAAQ,EAAM,EAClB,GAAI,MAAM,EAAI,MAAO,CACjB,GAAI,GAAe,KAAK,MAAM,GAC9B,AAAK,EAAe,KAAK,MAAM,IAAkB,GAC7C,GAAe,KAAK,MAAM,GAAgB,GAC9C,EAAI,UAAa,EAAe,GAAM,EACtC,GAAI,GAAY,KAAK,IAAI,GAAI,EAAI,WAC7B,EAAI,EAAQ,EAYhB,GAXA,AAAI,GAAK,EACL,GAAI,KAAQ,EAAY,EACxB,EAAI,aAEH,AAAI,GAAK,EACV,GAAI,KAAQ,EAAY,EACxB,EAAI,aAGJ,EAAI,KAAQ,EAEZ,MAAM,KAAK,KAAM,CACjB,GAAI,GAAI,EAAM,EAAI,KAClB,AAAI,EAAI,KAAK,MAAM,IAAM,GACrB,GAAK,EAAI,EAAK,KAAK,MAAM,GAAK,EAAI,KAAK,MAAM,GAAK,GACtD,EAAI,MAAQ,EAAI,KAAO,OAI1B,CACD,GAAI,GAAI,EAAI,KAAK,WACb,EAAI,EAAE,QAAQ,KAClB,AAAI,GAAK,EACL,EAAI,UAAY,CAAE,GAAE,OAAS,EAAI,GAGjC,EAAI,UAAY,EAGxB,YAAK,cAAgB,EACd,IAGf,AAAC,UAAU,EAAO,CAGd,eAAiD,EAAU,CACvD,YAAY,EAAO,EAAe,EAAW,CACzC,MAAM,EAAO,EAAe,IAGpC,EAAM,oBAAsB,EAC5B,eAAyC,EAAM,EAE/C,EAAY,KAAO,GAAI,GAAoB,OAAQ,QACnD,EAAY,MAAQ,GAAI,GAAoB,QAAS,SACrD,EAAM,YAAc,IACrB,IAAU,IAAQ,KACd,oBAAoB,GAAY,IAC/B,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAChB,KAAK,UAAY,EACjB,KAAK,gBAAgB,YAErB,UAAU,CAAE,MAAO,MAAK,SAC5B,WAAY,CACR,GAAI,GAAI,GAAI,IAAO,KAAK,aAAc,MACtC,YAAK,SAAS,KAAK,GACnB,KAAK,aAAa,qBAClB,KAAK,aAAa,SACX,KAEP,cAAc,CAAE,MAAO,MAAK,gBAC5B,aAAY,EAAO,CACnB,GAAI,GAAS,EACT,KAAM,IAAI,YAAW,iCACzB,KAAK,aAAe,EACpB,KAAK,IAAM,KAAK,IAAO,KAAK,aAAe,KAAK,eAAiB,IACjE,KAAK,IAAM,KAAK,IAAM,KAAK,YAC3B,KAAK,gBAAgB,YAErB,gBAAgB,CAAE,MAAO,MAAK,kBAC9B,eAAc,EAAO,CACrB,KAAK,eAAiB,EACtB,GAAI,GAAI,KAAK,aAAa,qBAC1B,GAAI,MAAM,EAAE,GACR,KAAK,KAAO,KAAK,KAAQ,KAAK,aAAe,KAAK,eAAiB,IACnE,KAAK,KAAO,KAAK,KAAO,KAAK,aAC7B,KAAK,gBAAgB,aAEpB,CACD,GAAI,GAAO,KAAK,KAAO,KAAK,KAC5B,KAAK,KAAO,EAAE,EAAK,EAAO,KAAK,eAAiB,IAChD,KAAK,KAAO,KAAK,KAAO,EAE5B,KAAK,gBAAgB,YAErB,cAAc,CAAE,MAAO,MAAK,WAC5B,aAAY,EAAO,CACnB,KAAK,QAAU,EACf,KAAK,gBAAgB,SAEzB,YAAY,EAAQ,EAAc,CAC9B,MAAM,EAAQ,GACd,KAAK,UAAY,GAAM,YAAY,OACnC,KAAK,SAAW,GAChB,KAAK,aAAe,IACpB,KAAK,eAAiB,EACtB,KAAK,QAAU,GAAM,WACrB,KAAK,eAAiB,EAAc,cAAc,SAElD,KAAK,UAAY,EAEjB,KAAK,UAAY,EACjB,KAAK,YAAc,EACnB,KAAK,kBAAoB,GAAM,iBAAiB,UAChD,KAAK,aAAe,EACpB,KAAK,SAAW,GAChB,KAAK,IAAM,EAAc,WAAW,EAAc,UAClD,KAAK,IAAM,KAAK,IAAM,KAAK,YAC3B,KAAK,KAAO,MAEZ,gBAAgB,CAAE,MAAO,MAAK,kBAC9B,eAAc,EAAO,CACrB,KAAK,eAAiB,EACtB,KAAK,gBAAgB,YAErB,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAAE,KAAK,UAAY,KACnC,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAAE,KAAK,UAAY,EACvC,WAAW,EAAe,EAAmB,CACzC,MAAO,GAAc,eAAe,EAAe,EAAmB,KAAK,mBAE3E,mBAAmB,CAAE,MAAO,MAAK,qBACjC,kBAAiB,EAAO,CAAE,KAAK,kBAAoB,IAE3D,GAAM,WAAa,EACnB,AAAC,UAAU,EAAO,CAEd,eAAiD,EAAU,CACvD,YAAY,EAAO,EAAe,EAAW,CACzC,MAAM,EAAO,EAAe,IAGpC,EAAM,oBAAsB,EAC5B,eAAyC,EAAM,EAE/C,EAAY,IAAM,GAAI,GAAoB,MAAO,OACjD,EAAY,OAAS,GAAI,GAAoB,SAAU,UACvD,EAAM,YAAc,EACpB,eAAsD,EAAU,CAC5D,YAAY,EAAO,EAAe,EAAW,CACzC,MAAM,EAAO,EAAe,IAGpC,EAAM,yBAA2B,EACjC,eAA8C,EAAM,EAEpD,EAAiB,UAAY,GAAI,GAAyB,YAAa,cACvE,EAAiB,OAAS,GAAI,GAAyB,SAAU,mBACjE,EAAiB,SAAW,GAAI,GAAyB,WAAY,oBACrE,EAAM,iBAAmB,IAC1B,IAAU,IAAQ,KACd,oBAAuC,EAAa,CACvD,YAAY,EAAQ,EAAc,CAC9B,MAAM,EAAQ,GACd,KAAK,eAAiB,GAAU,gBAAgB,SAChD,KAAK,eAAiB,GAAU,cAAc,SAC9C,KAAK,oBAAsB,GAAU,mBAAmB,UACxD,KAAK,kBAAoB,GAAU,iBAAiB,UACpD,KAAK,mBAAqB,EAC1B,KAAK,mBAAqB,EAC1B,KAAK,aAAe,KAEpB,gBAAgB,CAAE,MAAO,MAAK,kBAC9B,eAAc,EAAO,CACrB,KAAK,eAAiB,EAClB,KAAK,UACL,KAAK,gBAAgB,YAEzB,gBAAgB,CAAE,MAAO,MAAK,kBAC9B,eAAc,EAAO,CACrB,KAAK,eAAiB,EAClB,KAAK,UACL,KAAK,gBAAgB,YAEzB,qBAAqB,CAAE,MAAO,MAAK,uBACnC,oBAAmB,EAAO,CAC1B,KAAK,oBAAsB,EACvB,KAAK,UACL,KAAK,gBAAgB,YAEzB,mBAAmB,CAAE,MAAO,MAAK,qBACjC,kBAAiB,EAAO,CACxB,KAAK,kBAAoB,EACrB,KAAK,UACL,KAAK,gBAAgB,YAEzB,oBAAoB,CAAE,MAAO,MAAK,sBAClC,mBAAkB,EAAO,CACzB,KAAK,mBAAqB,EACtB,KAAK,UACL,KAAK,gBAAgB,YAEzB,oBAAoB,CAAE,MAAO,MAAK,sBAClC,mBAAkB,EAAO,CACzB,KAAK,mBAAqB,EACtB,KAAK,UACL,KAAK,gBAAgB,YAEzB,cAAc,CAAE,MAAO,MAAK,gBAC5B,aAAY,EAAO,CACnB,KAAK,aAAe,EAChB,KAAK,UACL,KAAK,gBAAgB,WAGjC,AAAC,UAAU,EAAW,CAClB,eAAqD,EAAU,CAC3D,YAAY,EAAO,EAAe,EAAW,CACzC,MAAM,EAAO,EAAe,IAGpC,EAAU,wBAA0B,EACpC,eAA6C,EAAM,EAEnD,EAAgB,OAAS,GAAI,GAAwB,SAAU,QAC/D,EAAgB,SAAW,GAAI,GAAwB,WAAY,UACnE,EAAgB,QAAU,GAAI,GAAwB,UAAW,SACjE,EAAU,gBAAkB,EAC5B,eAAmD,EAAU,CACzD,YAAY,EAAO,EAAe,EAAW,CACzC,MAAM,EAAO,EAAe,IAGpC,EAAU,sBAAwB,EAElC,eAA2C,EAAM,EAEjD,EAAc,MAAQ,GAAI,GAAsB,QAAS,OACzD,EAAc,SAAW,GAAI,GAAsB,WAAY,UAC/D,EAAc,MAAQ,GAAI,GAAsB,QAAS,UACzD,EAAU,cAAgB,EAC1B,eAAwD,EAAU,CAC9D,YAAY,EAAO,EAAe,EAAW,CACzC,MAAM,EAAO,EAAe,IAGpC,EAAU,2BAA6B,EACvC,eAAgD,EAAM,EAEtD,EAAmB,WAAa,GAAI,GAA2B,aAAc,eAC7E,EAAmB,UAAY,GAAI,GAA2B,YAAa,uBAC3E,EAAmB,YAAc,GAAI,GAA2B,cAAe,eAC/E,EAAU,mBAAqB,EAC/B,eAAsD,EAAU,CAC5D,YAAY,EAAO,EAAe,EAAW,CACzC,MAAM,EAAO,EAAe,IAGpC,EAAU,yBAA2B,EACrC,eAA8C,EAAM,EAEpD,EAAiB,UAAY,GAAI,GAAyB,YAAa,cACvE,EAAiB,UAAY,GAAI,GAAyB,YAAa,uBACvE,EAAiB,aAAe,GAAI,GAAyB,eAAgB,iBAC7E,EAAU,iBAAmB,IAC9B,IAAc,IAAY,KAC7B,YAAc,CACV,YAAY,EAAc,KACtB,SAAS,CAAE,MAAO,cAE1B,QAAgB,CACZ,YAAY,EAAO,CACf,KAAK,OAAS,EACd,KAAK,OAAS,EAElB,SAAS,EAAQ,CACb,GAAI,GAAM,GACN,EAAI,KAAK,IAAI,KAAK,OAAS,KAC3B,EAAM,KAAK,MAAM,GACjB,EAAO,KAAK,MAAM,IAAQ,GAAI,KAAK,MAAM,KAC7C,GAAI,EAAS,EAAM,IAAK,CACpB,GAAI,GAAK,KAAO,EAAK,WACrB,EAAM,IAAM,EAAG,UAAU,EAAG,OAAS,GAAG,UAAU,EAAG,WAEhD,EAAS,EAAM,KAAM,CAC1B,GAAI,GAAK,KAAO,EAAK,WACrB,EAAM,IAAM,EAAG,UAAU,EAAG,OAAS,GAAG,UAAU,EAAG,WAEhD,EAAS,EAAM,MAAO,CAC3B,GAAI,GAAK,KAAO,EAAK,WACrB,EAAM,IAAM,EAAG,UAAU,EAAG,OAAS,GAAG,UAAU,EAAG,GAEzD,GAAI,EAAS,EAAM,EAAG,CAClB,GAAI,GAAM,EAAM,GACZ,EAAI,IAAM,EAAI,WAClB,EAAM,EAAE,UAAU,EAAE,OAAS,GAAK,EAAM,IAG5C,GADA,EAAM,KAAK,MAAM,EAAM,IACnB,EAAS,EAAM,EAAG,CAClB,GAAI,GAAM,EAAM,GACZ,EAAI,IAAM,EAAI,WAClB,EAAM,EAAE,UAAU,EAAE,OAAS,GAAK,IAAM,EAG5C,GADA,EAAM,KAAK,MAAM,EAAM,IACnB,EAAS,EAAM,EAAG,CAClB,GAAI,GAAM,EAAM,GACZ,EAAI,IAAM,EAAI,WAClB,EAAM,EAAE,UAAU,EAAE,OAAS,GAAK,IAAM,EAG5C,GADA,EAAM,KAAK,MAAM,EAAM,IACnB,EAAS,EAAM,EAAG,CAClB,GAAI,GAAI,EAAI,WACZ,EAAM,EAAE,UAAU,EAAE,OAAS,GAAK,IAAM,EAE5C,MAAO,KAGf,GAAU,eAAiB,IACpB,mBAAoC,EAAc,IACjD,cAAc,CAAE,MAAO,MAAK,gBAC5B,cAAc,CAAE,MAAO,MAAK,gBAC5B,cAAc,CAAE,MAAO,MAAK,gBAC5B,aAAY,EAAO,CACnB,KAAK,aAAe,EACpB,KAAK,WAAa,KAClB,KAAK,YAEL,kBAAkB,CAAE,MAAO,MAAK,oBAChC,iBAAgB,EAAO,CACvB,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,sCACzB,KAAK,iBAAmB,EACxB,KAAK,WAAa,KAClB,KAAK,mBAEE,0BAA0B,CAAE,MAAO,GAAO,0CAC1C,yBAAwB,EAAO,CAAE,EAAO,gCAAkC,QAC9E,sBAAsB,CACzB,GAAI,EAAO,eAAiB,KACxB,OAIJ,GAAI,GAAY,olCAiBhB,GAAI,CACA,EAAO,cAAgB,GAAI,IAAQ,KAAK,UAErC,EAAP,CACI,QAAQ,IAAI,mCAGhB,aAAa,CAAE,MAAO,MAAK,YAC/B,cAAe,CACX,GAAI,GAAI,GAAI,IAAU,KAAM,MAC5B,YAAK,YAAY,KAAK,GACf,EAEX,0BAA0B,EAAO,EAAM,CACnC,KAAK,8BAAgC,EACrC,KAAK,8BAAgC,EAEzC,mBAAmB,EAAG,CAClB,AAAI,KAAK,+BAAiC,MACtC,KAAK,8BAA8B,GACvC,KAAK,cAAgB,EACrB,KAAK,YAAY,QAErB,YAAY,EAAgB,EAAa,CACrC,MAAM,EAAgB,GACtB,KAAK,8BAAgC,KACrC,KAAK,8BAAgC,KACrC,KAAK,eAAiB,GACtB,KAAK,cAAgB,GACrB,KAAK,iBAAmB,GACxB,KAAK,eAAiB,KACtB,KAAK,cAAgB,KACrB,KAAK,WAAa,KAClB,KAAK,aAAe,AAAe,EAAO,UAC1C,KAAK,iBAAmB,EACxB,KAAK,eAAiB,KACtB,KAAK,cAAgB,KACrB,KAAK,aAAe,KACpB,KAAK,cAAgB,KACrB,KAAK,cAAgB,KACrB,KAAK,eAAiB,KACtB,KAAK,iBAAmB,KACxB,KAAK,aAAe,GAAmB,IACvC,KAAK,WAAa,KAClB,KAAK,SAAW,KAChB,KAAK,UAAY,AAAe,EAAO,SAAS,IAAK,IAAK,IAAK,KAC/D,KAAK,UAAY,AAAe,EAAO,SAAS,IAAK,IAAK,IAAK,KAC/D,KAAK,yBAA2B,GAChC,KAAK,uBAAyB,GAAmB,GAAM,EAAG,GAC1D,KAAK,qBAAuB,EAC5B,KAAK,qBAAuB,EAC5B,KAAK,sBAAwB,EAC7B,KAAK,0BAA4B,KACjC,EAAO,sBACP,KAAK,OAAS,GAAI,IAAM,KAAM,MAC9B,KAAK,OAAS,GACd,KAAK,QAAU,GACf,KAAK,YAAc,GACnB,KAAK,WAAa,GAAI,IAAU,KAAM,MACtC,KAAK,aAAe,GAAI,IAAY,KAAM,MAC1C,KAAK,aAAe,GAAI,IAAY,KAAM,MAC1C,KAAK,eAAiB,AAAC,GAAM,CAAE,KAAK,WAAW,KAAK,YAAa,IACjE,KAAK,cAAgB,AAAC,GAAM,CAAE,KAAK,UAAU,KAAK,YAAa,IAC/D,KAAK,aAAe,AAAC,GAAM,CAAE,KAAK,SAAS,KAAK,YAAa,IAC7D,KAAK,cAAgB,AAAC,GAAM,CAAE,KAAK,UAAU,KAAK,YAAa,IAC/D,KAAK,cAAgB,AAAC,GAAM,CAAE,KAAK,UAAU,KAAK,YAAa,IAC/D,KAAK,eAAiB,AAAC,GAAM,CAAE,KAAK,gBAAgB,KAAK,YAAa,IACtE,KAAK,iBAAmB,AAAC,GAAM,CAAE,KAAK,QAAQ,KAAK,YAAa,IAChE,KAAK,YAAY,iBAAiB,aAAc,KAAK,gBACrD,KAAK,YAAY,iBAAiB,YAAa,KAAK,eACpD,KAAK,YAAY,iBAAiB,WAAY,KAAK,cACnD,KAAK,YAAY,iBAAiB,YAAa,KAAK,eACpD,KAAK,YAAY,iBAAiB,YAAa,KAAK,eACpD,KAAK,YAAY,iBAAiB,QAAS,KAAK,gBAChD,KAAK,YAAY,iBAAiB,UAAW,KAAK,kBAClD,KAAK,WAAa,EAAc,eAChC,GAAI,GAAyB,EAAe,MACxC,EAA0B,EAAe,OACzC,EAAoB,EAAe,MACnC,EAAqB,EAAe,OAE5C,SAAU,CACN,AAAI,KAAK,gBAAkB,MACvB,KAAK,YAAY,oBAAoB,aAAc,KAAK,gBACxD,KAAK,eAAiB,MACtB,KAAK,YAAY,oBAAoB,aAAc,KAAK,eACxD,KAAK,cAAgB,MACrB,KAAK,YAAY,oBAAoB,aAAc,KAAK,cACxD,KAAK,eAAiB,MACtB,KAAK,YAAY,oBAAoB,YAAa,KAAK,eACvD,KAAK,eAAiB,MACtB,KAAK,YAAY,oBAAoB,YAAa,KAAK,eACvD,KAAK,gBAAkB,MACvB,KAAK,YAAY,oBAAoB,QAAS,KAAK,gBACnD,KAAK,kBAAoB,MACzB,KAAK,YAAY,oBAAoB,UAAW,KAAK,kBACzD,MAAM,UACN,OAAO,QAAQ,MAAM,QAAQ,AAAC,GAAS,CAAE,QAAQ,IAAI,KAAM,EAAK,GAAI,QAExE,oBAAqB,CACjB,GAAI,GAAM,GAAI,IAAQ,IAAK,KAC3B,OAAS,GAAI,EAAG,EAAI,KAAK,QAAQ,OAAQ,IACrC,GAAI,CAAC,KAAK,OAAO,GAAG,SAAU,CAC1B,GAAI,GAAI,KAAK,OAAO,GAAG,eACvB,AAAK,MAAM,EAAE,IACT,AAAI,OAAM,EAAI,IAEL,EAAE,EAAI,EAAI,IACf,GAAM,GAGtB,MAAO,GAEX,sBAAsB,EAAG,CACrB,GAAI,GAAM,KAAK,WAAW,IAE1B,GADA,KAAK,WAAa,EAAc,kBAAkB,KAAK,WAAY,GAC/D,MAAM,GACN,OACJ,GAAI,GAAQ,EAAI,EAChB,GAAI,EAAQ,EACR,OAAQ,KAAK,OAAO,sBACX,IAAM,iBAAiB,OACxB,AAAI,EAAM,KAAK,OAAO,IAAQ,MAAK,OAAO,IAAM,KAAK,OAAO,KAAO,KAAU,GAAO,KAAK,OAAO,KAC5F,MAAK,gBACL,KAAK,OAAO,WAAW,KAAK,OAAO,IAAM,EAAO,KAAK,OAAO,IAAM,GAClE,KAAK,eAET,UACC,IAAM,iBAAiB,SACxB,AAAI,EAAM,KAAK,OAAO,IAAQ,MAAK,OAAO,IAAM,KAAK,OAAO,KAAO,KAAU,GAAO,KAAK,OAAO,KAC5F,MAAK,gBACL,KAAK,OAAO,KAAO,EACnB,KAAK,eAET,UAIZ,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAChB,KAAK,UAAY,EACjB,KAAK,SAAW,KAChB,KAAK,YAEL,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAChB,KAAK,UAAY,EACjB,KAAK,SAAW,KAChB,KAAK,YAEL,QAAQ,CAAE,MAAO,MAAK,UACtB,YAAY,CAAE,MAAO,MAAK,cAC1B,QAAQ,CAAE,MAAO,MAAK,UACtB,SAAS,CAAE,MAAO,MAAK,QAC3B,UAAW,CACP,GAAI,GAAI,GAAI,IAAM,KAAM,KAAM,KAAK,OAAO,QAC1C,YAAK,OAAO,KAAK,GACjB,KAAK,SACE,EAEX,UAAW,CACP,GAAI,GAAI,GAAI,IAAU,MACtB,YAAK,QAAQ,KAAK,GAClB,KAAK,SACE,EAEX,oBAAqB,CACjB,KAAK,SAAW,KAChB,KAAK,eAAiB,KAE1B,WAAW,EAAQ,EAAG,CAClB,AAAI,EAAE,QAAQ,QAAU,EACpB,KAAK,gBAAgB,EAAQ,EAAE,QAAQ,GAAG,MAAO,EAAE,QAAQ,GAAG,OAEzD,EAAE,QAAQ,QAAU,GACzB,GAAE,iBACF,KAAK,0BACL,KAAK,yBAA2B,KAAK,KAAK,KAAK,IAAI,EAAE,QAAQ,GAAG,MAAQ,EAAE,QAAQ,GAAG,MAAO,GAAK,KAAK,IAAI,EAAE,QAAQ,GAAG,MAAQ,EAAE,QAAQ,GAAG,MAAO,IACnJ,KAAK,uBAAyB,GAAmB,GAAO,EAAE,QAAQ,GAAG,MAAQ,EAAE,QAAQ,GAAG,OAAU,EAAI,EAAE,QAAQ,GAAG,MAAQ,EAAE,QAAQ,GAAG,OAAU,GACpJ,KAAK,qBAAuB,KAAK,aAAa,MAC9C,KAAK,qBAAuB,KAAK,aAAa,KAC9C,KAAK,sBAAwB,KAAK,OAAO,IAAM,KAAK,OAAO,KAGnE,UAAU,EAAQ,EAAG,CAMjB,AALK,EAAE,SAAW,GAAO,KAAK,eAAiB,MAC3C,MAAK,cAAgB,KACjB,KAAK,+BAAiC,MACtC,KAAK,8BAA8B,OAEvC,EAAE,SAAW,GAEjB,KAAK,gBAAgB,EAAQ,EAAE,MAAO,EAAE,OAE5C,gBAAgB,EAAQ,EAAO,EAAO,CAClC,GAAI,GAAI,KAAK,cAAc,YAAY,AAAe,GAAQ,YAAY,EAAO,IAAQ,UACrF,EAAK,EAAE,EACP,EAAK,EAAE,EACX,GAAK,GAAM,KAAK,aAAa,SACrB,GAAM,KAAK,aAAa,MAAQ,KAAK,aAAa,SAClD,GAAM,KAAK,aAAa,SACxB,GAAM,KAAK,aAAa,OAAS,KAAK,aAAa,QAAU,CACjE,GAAI,KAAK,eAAiB,KAAM,CAC5B,GAAI,GAAK,EAAO,mBAAmB,KAAK,aAAc,GAAmB,GAAM,EAAI,IACnF,KAAK,cAAc,oBAAoB,EAAG,EAAG,KAAK,OAC9C,KAAK,+BAAiC,MACtC,KAAK,8BAA8B,KAAK,eAC5C,KAAK,cAAgB,KACrB,OAEJ,GAAI,GAAI,EAAO,mBAAmB,KAAK,aAAc,GAAmB,GAAM,EAAI,IAClF,KAAK,aAAa,iBAAmB,KAAK,MAAM,IAChD,KAAK,aAAa,iBAAmB,KAAK,MAAM,IAChD,KAAK,aAAa,aAAe,KAAK,aAAa,KACnD,KAAK,aAAa,gBAAkB,KAAK,aAAa,QACtD,KAAK,aAAa,cAAgB,KAAK,aAAa,MACpD,KAAK,aAAa,cAAgB,EAClC,KAAK,aAAa,iBAAmB,EAAE,EACvC,KAAK,aAAa,QAAU,WAEtB,GAAM,KAAK,WAAW,SAAS,SACjC,GAAM,KAAK,WAAW,SAAS,MAAQ,KAAK,WAAW,SAAS,SAChE,GAAM,KAAK,WAAW,SAAS,SAC/B,GAAM,KAAK,WAAW,SAAS,OAAS,KAAK,WAAW,SAAS,QAAU,CAC/E,GAAI,GAAI,EAAO,mBAAmB,KAAK,WAAW,SAAU,GAAmB,GAAM,EAAI,IACrF,EAAK,EAAO,mBAAmB,KAAK,aAAc,GAAmB,GAAM,KAAK,aAAa,QAAS,IACtG,EAAK,EAAO,mBAAmB,KAAK,aAAc,GAAmB,GAAM,KAAK,aAAa,MAAQ,KAAK,aAAa,QAAS,IACpI,GAAK,EAAE,GAAK,EAAG,GAAO,EAAE,GAAK,EAAG,EAC5B,KAAK,WAAW,aAAa,EAAG,KAAK,OAAO,IAAK,KAAK,OAAO,SAG5D,CACD,KAAK,gBACL,GAAI,GAAM,EAAE,EAAK,GAAG,EAAI,EAAG,GAAK,EAC5B,EAAM,EAAO,GAAG,EAAI,EAAG,GAC3B,KAAK,OAAO,WAAW,EAAK,GAC5B,KAAK,cAEL,KAAK,KAAK,KAItB,UAAU,EAAQ,EAAG,CACjB,GAAI,EAAE,QAAQ,QAAU,EACpB,EAAE,iBACF,KAAK,gBAAgB,EAAQ,EAAE,QAAQ,GAAG,MAAO,EAAE,QAAQ,GAAG,eAEzD,EAAE,QAAQ,QAAU,EAAG,CAC5B,EAAE,iBAEF,GAAI,GAAa,AADC,KAAK,KAAK,KAAK,IAAI,EAAE,QAAQ,GAAG,MAAQ,EAAE,QAAQ,GAAG,MAAO,GAAK,KAAK,IAAI,EAAE,QAAQ,GAAG,MAAQ,EAAE,QAAQ,GAAG,MAAO,IACtG,KAAK,yBAChC,EAAY,KAAK,qBAAuB,EAC5C,GAAK,EAAY,KAAK,aAAa,OAAW,EAAY,IACtD,OACJ,GAAI,GAAe,KAAK,OAAO,IAAM,KAAK,OAAO,IACjD,KAAK,aAAa,KAAO,KAAK,qBAAyB,MAAK,uBAAuB,EAAI,KAAK,aAAa,SAAW,KAAK,qBAA0B,MAAK,uBAAuB,EAAI,KAAK,aAAa,SAAW,EAChN,KAAK,OAAO,WAAW,KAAK,aAAa,KAAM,KAAK,aAAa,KAAO,KAAK,sBAAwB,GACrG,KAAK,aAAa,MAAQ,EAC1B,KAAK,UAGb,SAAS,EAAQ,EAAG,CAChB,KAAK,0BAET,UAAU,EAAQ,EAAG,CACjB,AAAK,EAAE,SAAW,GAAO,MAAK,aAAa,SAAW,KAAK,WAAW,UAClE,KAAK,0BACT,KAAK,gBAAgB,EAAQ,EAAE,MAAO,EAAE,OACpC,KAAK,YAAY,SACb,MAAK,2BAA6B,MAClC,aAAa,KAAK,2BACtB,KAAK,0BAA4B,WAAW,IAAM,CAAE,KAAK,UAAa,MAG9E,yBAA0B,CACtB,KAAK,aAAa,QAAU,GAC5B,KAAK,WAAW,cACZ,KAAK,aAAa,SAClB,KAAK,SAEb,gBAAgB,EAAQ,EAAO,EAAO,CAClC,GAAI,GAAI,KAAK,cAAc,YAAY,AAAe,GAAQ,YAAY,EAAO,IAAQ,UACrF,EAAK,EAAE,EACP,EAAK,EAAE,EAaX,GAZA,AAAI,KAAK,eAAiB,KACtB,AAAK,EAAK,KAAK,aAAa,SAAa,EAAK,KAAK,aAAa,MAAQ,KAAK,aAAa,SAClF,EAAK,KAAK,aAAa,SAAa,EAAK,KAAK,aAAa,OAAS,KAAK,aAAa,QACrF,KAAK,YAAY,MAAM,QAAU,EAAO,cAAc,QAAY,KAAK,YAAY,MAAM,QAAU,aACpG,MAAK,YAAY,MAAM,OAAS,EAAO,eAAiB,KAAO,EAAO,cAAc,OAAS,aAG5F,KAAK,YAAY,MAAM,QAAU,WACtC,MAAK,YAAY,MAAM,OAAS,WAE/B,KAAK,YAAY,MAAM,QAAU,WACtC,MAAK,YAAY,MAAM,OAAS,WAChC,KAAK,aAAa,QAAS,CAE3B,GAAI,GAAU,AADL,KAAK,aAAa,aAAgB,GAAK,KAAK,aAAa,iBAAmB,KAAK,aAAa,cACpF,KAAK,aAAa,iBACjC,EAAU,EAAK,KAAK,aAAa,cACrC,KAAK,gBACL,GAAI,GAAiB,MAAK,aAAa,iBAAmB,KAAK,aAAa,kBAAoB,EAC5F,EAAc,MAAK,aAAa,iBAAmB,KAAK,aAAa,kBAAoB,EACzF,EAAa,EAAO,iCAAoC,KAAK,IAAI,GAAU,GAAO,KAAK,IAAI,KAAM,GAAU,EAC/G,KAAK,OAAO,WAAW,EAAa,EAAgB,EAAY,EAAQ,EAAa,EAAgB,EAAY,GACjH,KAAK,cACL,KAAK,SACL,OAEJ,GAAI,KAAK,WAAW,SAAS,QAAS,CAElC,GAAI,GAAS,AADJ,KAAK,WAAW,SAAS,aAAgB,GAAK,KAAK,WAAW,SAAS,iBAAmB,KAAK,WAAW,SAAS,cAC1G,KAAK,WAAW,SAAS,iBAC3C,KAAK,gBACL,KAAK,OAAO,WAAW,KAAK,WAAW,SAAS,iBAAmB,EAAO,KAAK,WAAW,SAAS,iBAAmB,GACtH,KAAK,cACL,KAAK,SACL,QAGR,MAAM,EAAG,QACF,oBAAmB,EAAU,EAAG,EAAM,EAAO,CAChD,GAAI,IAAS,OAAW,CACpB,GAAI,GAAK,EAAS,QAAU,KAAK,MAAO,GAAE,EAAI,EAAS,MAAQ,EAAS,OACpE,EAAK,EAAS,OAAS,EAAS,QAAU,KAAK,MAAO,GAAE,EAAI,EAAS,MAAQ,EAAS,OAC1F,MAAO,IAAmB,GAAM,GAAM,EAAG,GAAM,GAEnD,GAAI,GAAK,EAAS,QAAU,KAAK,MAAO,GAAE,EAAI,EAAS,MAAQ,EAAS,OACpE,EAAK,EAAS,OAAS,EAAS,QAAU,KAAK,MAAO,GAAE,EAAI,GAAQ,GACxE,MAAO,IAAmB,GAAM,GAAM,EAAG,GAAM,SAE5C,oBAAmB,EAAU,EAAG,EAAM,EAAO,CAChD,MAAI,KAAS,OACF,GAAI,IAAQ,EAAS,KAAQ,GAAE,EAAI,EAAS,SAAW,EAAS,MAAO,EAAS,KAAQ,EAAC,EAAS,OAAS,EAAE,EAAI,EAAS,SAAW,EAAS,OAElJ,GAAI,IAAQ,EAAS,KAAQ,GAAE,EAAI,EAAS,SAAW,EAAS,MAAO,EAAQ,EAAC,EAAS,OAAS,EAAE,EAAI,EAAS,SAAW,SAEhI,YAAW,EAAO,EAAK,EAAM,EAAO,CACvC,GAAI,GAAM,EAAc,eAExB,GAAI,CAAE,GAAK,GAAG,EAAI,IAAS,EAAK,EAAQ,GAAG,EAAI,EAC3C,MAAO,GACX,GAAI,GAAK,EACL,EAAK,EAEL,EAAQ,EACZ,GAAI,EAAK,GAAG,EAAI,EAAO,CAGnB,IAFA,EAAK,EACL,EAAK,EAAQ,EACN,EAAK,EAAK,GAAG,CAChB,GAAI,GAAK,EAAK,GAAO,EACrB,AAAI,EAAK,GAAG,EAAI,EACZ,EAAK,EAEL,EAAK,EAEb,EAAQ,EAAK,EACT,EAAQ,GACR,GAAQ,GAGhB,GAAI,GAAO,EAAQ,EACnB,GAAI,EAAK,KAAU,OACf,SAEJ,GAAI,EAAK,GAAM,EAAI,EAAK,CAGpB,IAFA,EAAK,EACL,EAAK,EAAQ,EACN,EAAK,EAAK,GAAG,CAChB,GAAI,GAAK,EAAK,GAAO,EACrB,AAAI,EAAK,GAAG,EAAI,EACZ,EAAK,EAEL,EAAK,EAEb,EAAO,EAAK,EACR,EAAO,EAAQ,GACf,GAAO,EAAQ,GAEvB,EAAI,IAAM,EAAK,GAAO,EACtB,EAAI,IAAM,EAAK,GAAO,EACtB,OAAS,GAAI,EAAQ,EAAG,GAAK,EAAM,IAC/B,AAAI,EAAK,GAAG,EAAI,EAAI,KAChB,GAAI,IAAM,EAAK,GAAG,GAClB,EAAK,GAAG,EAAI,EAAI,KAChB,GAAI,IAAM,EAAK,GAAG,GAE1B,MAAO,GAEX,iBAAkB,CACd,OAAS,GAAI,EAAG,EAAI,KAAK,QAAQ,OAAQ,IACrC,KAAK,QAAQ,GAAG,iBAGxB,gBAAgB,EAAG,EAAe,EAAgB,EAAc,CAC5D,GAAI,GAAgB,KACpB,GAAI,CAAC,KAAK,aAAa,QACnB,OACJ,GAAI,GAAe,GAAI,OAAM,KAAK,QAAQ,QACtC,EAAe,GAAI,OAAM,KAAK,QAAQ,QACtC,EAAS,GAAI,OAAM,KAAK,QAAQ,QAChC,EAAS,GAAI,OAAM,KAAK,QAAQ,QAChC,EAAU,GAAI,OAAM,KAAK,QAAQ,QACjC,EAAc,EACd,EAAa,EACb,EAAW,EACX,EAAY,EAChB,EAAE,kBAAoB,AAAe,EAAmB,yBACxD,EAAE,QAAQ,GAAmB,GAAW,EAAG,EAAG,EAAe,IAC7D,OAAS,GAAI,EAAG,EAAI,KAAK,QAAQ,OAAQ,IACrC,AAAI,KAAK,QAAQ,GAAG,QAAU,GAC1B,EAAQ,GAAK,KAAK,QAAQ,GAAG,OAE7B,EAAQ,GAAK,UAAa,GAAI,GAAG,WAEzC,GAAK,KAAK,aAAa,UAAY,GAAY,SAAS,KAAS,KAAK,aAAa,UAAY,GAAY,SAAS,OAAS,CACzH,GAAI,GAAiB,EAAgB,EAAI,KAAK,aAAa,QAAU,KAAK,aAAa,gBACvF,AAAI,KAAK,aAAa,SAClB,GAAiB,EAAiB,EAAa,QAAU,EAAa,SAC1E,EAAc,EACd,GAAI,GAAK,EACL,EAAK,EACT,OAAS,GAAI,EAAG,EAAI,KAAK,QAAQ,OAAQ,IACrC,GAAK,KAAK,QAAQ,GAAG,SAAS,OAAS,GAAO,KAAK,QAAQ,GAAG,SAAa,CAAC,KAAK,QAAQ,GAAG,SAAW,CACnG,GAAI,GAAQ,EAAE,cAAc,EAAQ,GAAI,KAAK,aAAa,KAAM,KAChE,EAAa,GAAM,EAAM,OAAU,EACnC,GAAI,GAAM,EAAM,MAAQ,GACxB,AAAI,GAAM,GACN,IAAe,EAAM,QACzB,AAAI,EAAiB,EAAK,EACtB,AAAI,GAAM,EACN,GAAO,GAAK,EACZ,EAAO,GAAK,EACZ,GAAM,EAAM,OACR,EAAW,GACX,GAAW,IAGf,IAAM,EAAM,OACZ,EAAO,GAAK,EACZ,EAAO,GAAK,EACZ,EAAK,EACL,GAAe,EAAM,OACjB,EAAW,GACX,GAAW,IAInB,GAAO,GAAK,EACZ,EAAO,GAAK,EACZ,GAAM,EACF,EAAW,GACX,GAAW,IAI3B,AAAI,EAAa,GACb,GAAa,OAGhB,CACD,GAAI,GAAK,EACT,OAAS,GAAI,EAAG,EAAI,KAAK,QAAQ,OAAQ,IACrC,GAAK,KAAK,QAAQ,GAAG,SAAS,OAAS,GAAO,KAAK,QAAQ,GAAG,SAAa,CAAC,KAAK,QAAQ,GAAG,SAAW,CACnG,GAAI,GAAQ,EAAE,cAAc,EAAQ,GAAI,KAAK,aAAa,KAAM,KAChE,EAAa,GAAM,EAAM,MAAS,EAC9B,EAAW,EAAa,GAAK,IAC7B,GAAW,EAAa,GAAK,IACjC,EAAa,GAAM,EAAM,OAAU,EAC/B,EAAY,EAAa,IACzB,GAAY,EAAa,IAC7B,EAAO,GAAK,EACZ,EAAO,GAAK,EACZ,GAAM,EAAM,OAAS,EACrB,GAAe,GAAK,EAAI,EAAM,OAAS,EAAM,OAAS,GAIlE,GAAI,GAAI,EAAW,EAAI,KAAK,aAAa,QAAU,KAAK,aAAa,gBACjE,EAAI,EAAc,EAAI,KAAK,aAAa,QAAU,KAAK,aAAa,gBACpE,EAAI,EACJ,EAAI,EACR,OAAQ,KAAK,aAAa,cACjB,IAAY,SAAS,KACtB,EAAI,KAAK,aAAa,iBACtB,AAAK,KAAK,aAAa,QAKnB,IAAK,EAAa,QAClB,EAAI,EAAa,QAAW,GAAiB,EAAa,QAAU,EAAa,QAAU,GAAK,GALhG,GAAa,SAAY,EAAI,EAAI,KAAK,YAAY,iBAAmB,KAAK,YAAY,iBAAoB,EAC1G,EAAK,GAAiB,GAAK,GAM/B,UACC,IAAY,SAAS,QACtB,EAAI,KAAK,aAAa,iBACtB,EAAI,KAAK,aAAa,eACtB,AAAK,KAAK,aAAa,QAInB,IAAK,EAAa,QAClB,GAAK,EAAa,SAJlB,EAAa,SAAY,EAAI,EAAI,KAAK,YAAY,iBAAmB,KAAK,YAAY,iBAAoB,EAM9G,UACC,IAAY,SAAS,IACtB,AAAK,KAAK,aAAa,QAMnB,GAAI,EAAa,QAAW,GAAgB,EAAa,QAAU,EAAa,QAAU,GAAK,EAAI,KAAK,aAAa,iBAAmB,KAAK,aAAa,gBAC1J,EAAI,EAAa,QAAU,KAAK,aAAa,eAAiB,KAAK,aAAa,iBANhF,GAAK,GAAgB,GAAK,EAAI,KAAK,aAAa,iBAAmB,KAAK,aAAa,gBACrF,EAAI,KAAK,aAAa,eAAiB,KAAK,aAAa,gBACzD,EAAa,SAAY,EAAc,KAAK,aAAa,eAAiB,EAAI,KAAK,aAAa,eAAiB,KAAK,aAAa,iBAAoB,GAM3J,UACC,IAAY,SAAS,SACtB,EAAI,EAAgB,KAAK,aAAa,iBAAmB,EACzD,EAAI,KAAK,aAAa,eACtB,AAAK,KAAK,aAAa,QAInB,IAAK,EAAa,QAClB,GAAK,EAAa,SAJlB,EAAa,SAAY,EAAI,EAAI,KAAK,aAAa,iBAAmB,KAAK,aAAa,iBAAoB,EAMhH,UACC,IAAY,SAAS,MACtB,EAAI,EAAgB,KAAK,aAAa,iBAAmB,EACzD,AAAK,KAAK,aAAa,QAKnB,IAAK,EAAa,QAClB,EAAI,EAAa,QAAW,GAAiB,EAAa,QAAU,EAAa,QAAU,GAAK,GALhG,GAAa,SAAY,EAAI,EAAI,KAAK,aAAa,iBAAmB,KAAK,aAAa,iBAAoB,EAC5G,EAAK,GAAiB,GAAK,GAM/B,UACC,IAAY,SAAS,YACtB,EAAI,EAAgB,KAAK,aAAa,iBAAmB,EACzD,AAAK,KAAK,aAAa,QAKnB,IAAK,EAAa,QAClB,EAAI,EAAiB,EAAa,QAAU,EAAI,KAAK,aAAa,gBALlE,GAAa,SAAY,EAAI,EAAI,KAAK,aAAa,iBAAmB,KAAK,aAAa,iBAAoB,EAC5G,EAAI,EAAiB,KAAK,aAAa,eAAiB,GAM5D,UACC,IAAY,SAAS,OACtB,AAAK,KAAK,aAAa,QAMnB,GAAI,EAAa,QAAW,GAAgB,EAAa,QAAU,EAAa,QAAU,GAAK,EAAI,KAAK,aAAa,iBAAmB,KAAK,aAAa,gBAC1J,EAAI,EAAiB,EAAa,QAAU,EAAc,EAAI,KAAK,aAAa,QAAU,EAAI,KAAK,aAAa,eAAiB,KAAK,aAAa,iBANnJ,GAAK,GAAgB,GAAK,EAAI,KAAK,aAAa,iBAAmB,KAAK,aAAa,gBACrF,EAAI,EAAiB,KAAK,aAAa,eAAiB,EAAI,KAAK,aAAa,QAAU,KAAK,aAAa,gBAAkB,EAC5H,EAAa,SAAY,EAAc,EAAI,KAAK,aAAa,QAAU,EAAI,KAAK,aAAa,eAAiB,KAAK,aAAa,iBAMpI,UACC,IAAY,SAAS,WACtB,EAAI,KAAK,aAAa,iBACtB,EAAI,KAAK,aAAa,eACtB,AAAK,KAAK,aAAa,QAKnB,IAAK,EAAa,QAClB,EAAI,EAAiB,EAAa,QAAU,EAAI,KAAK,aAAa,gBALlE,GAAa,SAAY,EAAI,EAAI,KAAK,aAAa,iBAAmB,KAAK,aAAa,gBACxF,EAAI,EAAiB,KAAK,aAAa,eAAiB,GAM5D,MAER,GAAI,GAAO,GAAmB,GAAW,GAAK,EAAG,GAAK,EAAG,GAAK,EAAG,GAAK,GACtE,EAAE,cAAc,KAAK,aAAa,QAAS,GAC3C,EAAE,cAAc,KAAK,aAAa,IAAK,GACvC,EAAE,kBAAoB,AAAe,EAAmB,UACxD,OAAS,GAAI,EAAG,EAAI,KAAK,QAAQ,OAAQ,IACrC,GAAK,KAAK,QAAQ,GAAG,SAAS,OAAS,GAAO,KAAK,QAAQ,GAAG,SAAa,CAAC,KAAK,QAAQ,GAAG,SAAW,CACnG,EAAE,aAAa,EAAQ,GAAI,KAAK,aAAa,KAAM,KAAK,aAAa,KAAK,MAAQ,EAAI,EAAO,GAAK,GAAK,KAAK,aAAa,SAAY,EAAI,EAAI,EAAO,GAAK,KAAK,aAAa,SAAY,GACvL,GAAI,GAAM,EAAI,EAAO,GAAK,KAAK,aAAa,gBAAkB,EAAI,KAAK,aAAa,QAAU,GAAM,EAChG,EAAM,EAAI,EAAO,GAAK,KAAK,aAAa,QAAU,EAAa,GAAK,GAAM,EAC9E,EAAE,SAAS,KAAK,QAAQ,GAAG,UAAW,GAAmB,GAAO,EAAI,GAAK,GAAmB,GAAO,EAAK,GAAI,WAIjH,oBAAmB,EAAG,EAAG,EAAG,EAAM,EAAO,EAAY,EAAU,CAClE,GAAK,EAAK,GAAG,EAAI,GAAc,EAAK,EAAQ,GAAG,EAAI,EAC/C,MAAO,GAKX,GAAI,GAAQ,YAA4B,GACpC,EAAK,EACL,EAAK,EAEL,EAAQ,EACZ,GAAI,EAAK,GAAG,EAAI,EAAY,CAGxB,IAFA,EAAK,EACL,EAAK,EAAQ,EACN,EAAK,EAAK,GAAG,CAChB,GAAI,GAAK,EAAK,GAAO,EACrB,AAAI,EAAK,GAAG,EAAI,EACZ,EAAK,EAEL,EAAK,EAEb,EAAQ,EAAK,EACT,EAAQ,GACR,GAAQ,GAGhB,GAAI,GAAO,EAAQ,EACnB,GAAI,EAAK,GAAM,EAAI,EAAU,CAGzB,IAFA,EAAK,EACL,EAAK,EAAQ,EACN,EAAK,EAAK,GAAG,CAChB,GAAI,GAAK,EAAK,GAAO,EACrB,AAAI,EAAK,GAAG,EAAI,EACZ,EAAK,EAEL,EAAK,EAEb,EAAO,EAAK,EACR,EAAO,EAAQ,GACf,GAAO,EAAQ,GAEvB,GAAI,EAAO,EAAQ,EAAI,EAAE,MAAQ,EAAE,QAAU,EAAE,QAC9C,CACG,GAAI,GAAS,GAAI,OAAM,EAAK,GAAO,EAAQ,IACvC,EAAU,EAAO,mBAAmB,EAAG,EAAK,IAC5C,EACA,EAAI,EAAQ,EACZ,EAAI,EACJ,EACA,EACA,EACJ,KAAO,EAAI,GAAM,CACb,EAAO,KAAO,GAAmB,GAAO,EAAQ,EAAG,EAAQ,GAC3D,EAAM,EAAK,GAAG,EACd,EAAM,EACN,EAAQ,EAAO,mBAAmB,EAAG,GAAmB,GAAM,EAAQ,EAAI,EAAG,EAAQ,EAAI,IAAI,EAC7F,EACI,AAAI,GAAK,GAAG,EAAI,GACZ,GAAM,EAAK,GAAG,GACd,EAAK,GAAG,EAAI,GACZ,GAAM,EAAK,GAAG,GAClB,UACM,EAAI,GAAU,EAAK,GAAG,EAAI,GACpC,GAAI,GAAK,EAAO,mBAAmB,EAAG,GAAI,IAAQ,EAAK,GAAG,EAAG,IACzD,EAAK,EAAO,mBAAmB,EAAG,GAAI,IAAQ,EAAK,GAAG,EAAG,IAC7D,AAAI,KAAK,IAAI,EAAG,EAAI,EAAG,GAAK,GACxB,GAAO,KAAO,GAAmB,GAAO,EAAG,EAAG,EAAG,GACjD,EAAO,KAAO,GAAmB,GAAO,EAAG,EAAG,EAAG,IAiBrD,EAAU,EAAO,mBAAmB,EAAG,EAAK,IAEhD,SAAO,KAAO,EACd,EAAS,EAAO,MAAM,EAAG,GACrB,EAAI,GACJ,EAAE,UAAU,EAAG,GACZ,UAIH,EAAO,CACP,GAAI,GAAS,GAAI,OAAM,EAAO,EAAQ,GACtC,OAAS,GAAI,EAAO,GAAK,EAAM,IAC3B,EAAO,EAAI,GAAS,EAAO,mBAAmB,EAAG,EAAK,IAE1D,EAAE,UAAU,EAAG,OAGf,QAAS,GAAI,EAAO,EAAI,EAAM,IAC1B,EAAE,SAAS,EAAG,EAAO,mBAAmB,EAAG,EAAK,IAAK,EAAO,mBAAmB,EAAG,EAAK,EAAI,KAIvG,MAAO,GAAO,EAElB,eAAe,EAAG,EAAG,EAAO,CACxB,GAAI,CAAC,EAAM,QACP,OAEJ,GAAI,GAAS,AADD,GAAM,cAAc,QAAU,EAAM,cAAc,SACvC,GAAE,OAAS,EAAE,QAAU,EAAE,SAChD,OAAS,GAAI,EAAG,EAAI,EAAM,MAAM,OAAQ,IACpC,GAAI,EAAM,MAAM,GAAG,QAAS,CACxB,GAAI,GAAM,EAAM,MAAM,GAAG,IACrB,EAAM,EAAM,MAAM,GAAG,IAMzB,GALI,OAAO,MAAM,IACb,GAAM,EAAM,cAAc,SAE1B,OAAO,MAAM,IACb,GAAM,EAAM,cAAc,SAC1B,EAAM,EAAK,CACX,GAAI,GAAI,EACR,EAAM,EACN,EAAM,EAEV,GAAI,GAAK,EAAE,OAAS,EAAE,QAAU,KAAK,MAAO,GAAM,EAAM,cAAc,SAAW,IAAU,EACvF,EAAI,KAAK,MAAO,GAAM,GAAO,IAAU,EAC3C,EAAE,kBAAkB,EAAM,MAAM,GAAG,UAAW,KAAK,aAAa,QAAS,EAAI,KAAK,aAAa,MAAQ,KAAK,aAAa,QAAU,KAAK,aAAa,QAAU,EAAG,IAI9K,eAAe,EAAG,EAAG,EAAO,CACxB,GAAI,CAAC,EAAM,QACP,OAEJ,GAAI,GAAS,AADD,GAAM,IAAM,EAAM,KACP,GAAE,MAAQ,EAAE,QAAU,EAAE,SAC/C,OAAS,GAAI,EAAG,EAAI,EAAM,MAAM,OAAQ,IACpC,GAAI,EAAM,MAAM,GAAG,QAAS,CACxB,GAAI,GAAM,EAAM,MAAM,GAAG,IACrB,EAAM,EAAM,MAAM,GAAG,IAKzB,GAJI,OAAO,MAAM,IACb,GAAM,EAAM,KACZ,OAAO,MAAM,IACb,GAAM,EAAM,KACZ,EAAM,EAAK,CACX,GAAI,GAAI,EACR,EAAM,EACN,EAAM,EAEV,GAAI,GAAK,EAAE,QAAU,KAAK,MAAO,GAAM,EAAM,KAAO,IAAU,EAC9D,EAAE,kBAAkB,EAAM,MAAM,GAAG,UAAW,EAAI,KAAK,aAAa,QAAW,GAAM,GAAO,GAAU,EAAG,KAAK,aAAa,OAAS,KAAK,aAAa,QAAU,KAAK,aAAa,gBAKvL,WAAU,EAAG,EAAG,EAAM,EAAO,EAAY,CAC5C,GAAI,CAAC,EAAK,QACN,SAAK,WAAa,EAEX,EAAK,WAEhB,GAAI,GAAQ,EAAK,cAAc,QAAU,EAAK,cAAc,QACxD,EAAS,EAAU,GAAE,OAAS,EAAE,QAAU,EAAE,SAC5C,EAAW,EAAK,UAAY,GAAM,YAAY,KAC9C,EAAI,EAAW,EAAE,QAAU,EAAS,EAAE,MAAQ,EAAE,QAAU,EAC9D,AAAK,GACD,EAAE,WAAW,EAAK,IAAK,EAAG,EAAE,QAAS,EAAG,EAAE,OAAS,EAAE,SACzD,GAAI,GAAS,GAAmB,GAAc,OAC9C,EAAO,cAAgB,EACvB,EAAO,UAAY,EAAW,EAA2D,EACzF,GAAI,GAAY,EAAK,cAAc,KAAQ,KAAK,MAAM,EAAK,cAAc,MAAQ,EAAK,cAAc,MACpG,AAAI,EAAY,GACZ,IAAa,EAAK,cAAc,MAEpC,GAAI,GAAe,IAAS,GAAY,EAAK,cAAc,UAAY,EAAK,cAAc,MAAS,GAAK,EACxG,AAAK,GACD,GAAE,kBAAoB,AAAe,EAAmB,WAC5D,GAAI,GAAY,EACZ,EAAiB,EAGrB,GAFI,EAAK,cAAc,UAAY,GAC/B,GAAkB,CAAC,EAAK,cAAc,WACtC,EAAY,EAAE,OAEd,OAAS,GAAI,EAAG,EAAI,EAAW,IAAK,CAChC,GAAI,GAAI,KAAK,MAAO,GAAY,EAAI,EAAK,cAAc,KAAO,EAAK,cAAc,SAAW,IAAU,EACtG,GAAI,GAAK,EAAG,CACR,EAAI,EAAE,OAAS,EAAE,QAAU,EAC3B,GAAI,GAAI,EAAY,EAAI,EAAK,cAAc,KAC3C,AAAK,GACI,GAAK,UAAe,GAAI,GAAO,EAAK,cAAc,SAAW,IAC9D,EAAE,WAAW,EAAK,QAAS,EAAE,QAAS,EAAG,EAAE,MAAQ,EAAE,QAAS,GAC7D,KAAK,IAAI,GAAK,MAAS,EAAK,eAC7B,EAAE,WAAW,EAAK,IAAK,EAAE,QAAS,EAAG,EAAE,MAAQ,EAAE,QAAS,GAE9D,EAAE,WAAW,EAAK,IAAK,EAAM,GAAY,GAAK,GAAI,EAAG,EAAM,GAAY,EAAI,IAAK,IAEpF,GAAI,GAAQ,EAAE,QAAQ,GAClB,EAAQ,EAAE,cAAc,EAAO,EAAK,KAAM,KAG9C,GAFI,EAAM,MAAQ,GACd,GAAY,EAAM,OAClB,CAAC,EAAY,CACb,GAAI,GAAI,GAAmB,GAAM,EAAK,GAAW,GAAK,GAAI,GAC1D,EAAE,aAAa,EAAO,EAAK,KAAM,EAAK,KAAK,MAAO,EAAG,KAKrE,GAAI,EAAK,OAAO,OAAS,GAAI,CACzB,GAAI,GAAO,EAAE,cAAc,EAAK,OAAO,MAAO,EAAK,OAAO,KAAM,KAChE,GAAI,CAAC,EAAY,CACb,GAAI,GAAS,GAAmB,GAAc,OAC9C,EAAO,UAAY,EACnB,EAAO,cAAgB,EACvB,EAAO,SAAW,EAClB,GAAI,GAAU,EAAM,GAAY,CAAC,EAAY,EAAK,OAAS,EAAY,EAAK,OAAS,IAAM,EACvF,EAAW,EAAE,QAAW,GAAE,OAAS,EAAE,QAAU,EAAE,SAAW,GAAM,EACtE,EAAE,UAAU,EAAS,EAAS,EAAW,CAAC,KAAK,GAAK,EAAI,KAAK,GAAK,GAClE,EAAE,aAAa,EAAK,OAAO,MAAO,EAAK,OAAO,KAAM,EAAK,OAAO,KAAK,MAAO,GAAmB,GAAM,EAAG,GAAI,GAC5G,EAAE,iBAGN,GAAa,EAAK,OAEtB,SAAK,WAAc,IAAa,GAAK,GAE9B,EAAK,WAEhB,iBAAiB,EAAG,EAAG,EAAQ,EAAQ,CACnC,GAAI,GAAQ,EAAO,IAAM,EAAO,IAC5B,EAAQ,EAAc,eAAe,EAAO,EAAO,KAAK,MAAM,eAC9D,EAAS,EAAU,GAAE,MAAQ,EAAE,QAAU,EAAE,SAC3C,EAAc,GAAQ,EAAM,MAAS,GAAK,EAC1C,EAAY,EAAM,KAAQ,KAAK,MAAM,EAAO,IAAM,EAAM,MAC5D,AAAI,EAAY,EAAO,KACnB,IAAa,EAAM,MACvB,EAAE,kBAAoB,AAAe,EAAmB,UACxD,GAAI,GAAI,EAAE,OAAS,EAAE,QACrB,EAAE,WAAW,KAAK,WAAW,IAAK,EAAE,QAAS,EAAE,OAAS,EAAE,QAAU,EAAG,EAAE,MAAQ,EAAE,QAAS,EAAE,OAAS,EAAE,QAAU,GACnH,GAAI,GACA,EAAI,EACR,EAAG,CACC,GAAI,GAAI,EAAc,aAAa,GAKnC,GAJI,EAAM,KAAO,GAAK,OAElB,GAAI,EAAc,WAAW,GAAI,MAAK,EAAE,cAAe,EAAE,WAAY,KAErE,GAAK,EAAO,IAAK,CACjB,GAAI,GAAI,EAAE,QAAU,KAAK,MAAO,GAAI,EAAO,KAAO,GAClD,EAAE,WAAW,KAAK,WAAW,IAAK,EAAG,EAAG,EAAG,EAAI,GAC/C,AAAI,GAAU,GAAM,WAChB,EAAQ,EAAc,aAAa,GAAG,SAAS,EAAM,QAGrD,EAAQ,EAAc,aAAa,GAAG,SAAS,GAEnD,GAAI,GAAQ,EAAE,cAAc,EAAO,KAAK,WAAW,KAAM,KACzD,EAAE,WAAW,EAAO,KAAK,WAAW,KAAM,KAAK,WAAW,KAAK,MAAO,GAAmB,GAAO,EAAI,EAAM,MAAQ,EAAK,EAAI,EAAM,OAAS,IAE9I,GAAK,EAAM,WACN,EAAI,EAAO,WAEjB,QAAO,EAAG,EAAO,EAAa,EAAW,CAC5C,GAAI,GACJ,GAAI,EAAM,eAAiB,EAAc,cAAc,SACnD,AAAI,EAAM,aAAe,GAAM,WAC3B,EAAQ,EAAc,aAAa,GAAG,SAAS,EAAY,QAG3D,EAAQ,EAAE,eAGb,CACD,GAAI,GAAQ,GAAU,eAAkB,MAAK,MAAM,IAAQ,GAAI,EAAM,WAAa,KAClF,EAAS,EAAQ,EAAK,IAAM,GAAI,IAAU,CAAC,GAAO,SAAS,EAAY,QAAU,GAAI,IAAU,GAAO,SAAS,EAAY,QAE/H,MAAO,GAEX,UAAU,EAAG,EAAG,EAAO,EAAY,CAC/B,GAAI,EAAE,MAAQ,EAAE,QAAU,EAAE,QAAU,GAClC,MAAO,GAEX,GAAI,GAAe,GAAmB,GAAc,OACpD,EAAa,UAAY,EACzB,GAAI,GAAa,EAAM,UAAY,GAAM,YAAY,OACjD,EAAI,EAAa,EAAE,OAAS,EAAE,QAAU,EAAE,QAC9C,AAAK,GACD,EAAE,WAAW,EAAM,IAAK,EAAE,QAAS,EAAG,EAAE,MAAQ,EAAE,QAAS,GAC/D,GAAI,GAAQ,EAAM,IAAM,EAAM,IAC1B,EAAS,EAAU,GAAE,MAAQ,EAAE,QAAU,EAAE,SAC3C,EAAc,GAAQ,EAAM,MAAS,GAAK,EAC1C,EAAY,EACZ,EAAY,EAAc,eAC9B,OAAS,GAAI,EAAG,EAAI,KAAK,QAAQ,OAAQ,IACrC,AAAK,KAAK,QAAQ,GAAG,UACjB,GAAY,EAAc,QAAQ,EAAW,KAAK,QAAQ,GAAG,YAIrE,GADA,EAAM,SAAW,EAAU,IACvB,EAAM,eAAiB,EAAc,cAAc,SACnD,EAAY,EAAM,KAAQ,KAAK,MAAM,EAAM,IAAM,EAAM,MACvD,EAAU,IAAM,EAAM,IACtB,EAAU,IAAM,EAAM,QAErB,CACD,GAAI,OAAO,MAAM,EAAU,KACvB,MAAO,GACX,EAAY,EAAU,IAAM,EAAM,KAAQ,KAAK,MAAO,GAAM,IAAM,EAAM,UAAY,EAAM,MAE9F,AAAI,EAAY,EAAM,KAClB,IAAa,EAAM,MACvB,GAAI,GAAa,EACjB,AAAI,EAAM,eAAiB,EAAc,cAAc,UACnD,GAAa,GAEjB,EAAM,SAAW,EAAU,IAAM,EAAU,IAE3C,GAAI,GAAc,EAAM,WAAW,EAAU,IAAM,EAAU,IAAK,EAAM,IAAM,EAAM,KACpF,AAAK,GACD,GAAE,kBAAoB,AAAe,EAAmB,WAC5D,GAAI,GAAa,EACb,EACJ,EAAM,KAAO,EAAY,KAEzB,GAAI,GAAI,WAAW,EAAU,YAC7B,EAAQ,EAAO,OAAO,EAAG,EAAO,EAAa,GAC7C,GAAI,GAAQ,EAAE,cAAc,EAAO,EAAM,KAAM,KAE3C,EAAM,EACV,KAAQ,EAAO,GAAE,MAAQ,EAAE,QAAU,EAAE,SAAW,EAAa,EAAM,OACjE,IAEJ,GAAI,GAAQ,KAAK,MAAO,GAAI,GAAc,EAAM,OAAS,EACrD,EAAY,EAChB,EAAG,CACC,GAAI,GAAI,EAAc,aAAa,GACnC,GAAK,EAAM,KAAO,GAAK,OAAW,EAAM,eAAiB,EAAc,cAAc,SACpF,CACG,GAAI,EAAM,MAAQ,IAAM,MAAO,CAC3B,GAAI,GAAI,EAAE,WACV,EAAI,EAAc,WAAW,GAAI,MAAK,EAAE,cAAiB,GAAI,EAAI,EAAI,GAAI,EAAG,QAG5E,GAAI,EAAc,WAAW,GAAI,MAAK,EAAE,cAAe,EAAE,WAAY,IACzE,GAAI,EAAI,EACJ,SAIR,GAAI,GAAK,EAAM,IAAK,CAChB,GAAI,GAAI,EAAE,QAAU,KAAK,MAAO,GAAI,EAAM,KAAO,IAAU,EAC3D,AAAI,GAAK,EAAE,MAAQ,EAAE,SACZ,IACG,GAAM,UACN,EAAE,WAAW,EAAM,QAAS,EAAG,EAAE,QAAS,EAAG,EAAE,OAAS,EAAE,SAC9D,EAAE,WAAW,EAAM,IAAK,EAAG,EAAK,GAAa,EAAI,IAAK,EAAG,EAAK,GAAa,GAAK,KAEpF,EAAQ,EAAO,OAAO,EAAG,EAAO,EAAa,GAE7C,EAAQ,EAAE,cAAc,EAAO,EAAM,KAAM,KACvC,EAAM,OAAS,GACf,GAAa,EAAM,QAClB,GACG,EAAQ,GAAO,GAGf,EAAE,aAAa,EAAO,EAAM,KAAM,EAAM,KAAK,MAAO,GAAmB,GAAO,EAAG,EAAK,GAAa,EAAM,CAAC,EAAM,QAAW,GAAK,GAAI,IAOpJ,GAFA,EAAY,EACZ,GAAK,EAAM,KACP,EAAI,EACJ,SACJ,UACK,GAAK,EAAM,KACpB,GAAI,EAAM,OAAO,OAAS,GAAI,CAC1B,GAAI,GAAO,EAAE,cAAc,EAAM,OAAO,MAAO,EAAM,OAAO,KAAM,KAClE,GAAI,CAAC,EAAY,CACb,GAAI,GAAW,EAAE,QAAW,GAAE,MAAQ,EAAE,QAAU,EAAE,QAAU,EAAK,OAAS,GAAM,EAC9E,EAAW,EAAa,EAAE,OAAS,EAAE,QAAU,EAAa,EAAI,EAAE,QAAU,EAAa,EAAK,OAAS,IAC3G,EAAE,WAAW,EAAM,OAAO,MAAO,EAAM,OAAO,KAAM,EAAM,OAAO,KAAK,MAAO,GAAmB,GAAO,EAAS,IAEpH,GAAc,EAAK,QAAU,EAEjC,SAAM,YAAe,IAAc,GAAK,GAEjC,EAAM,YAEjB,WAAW,EAAc,EAAQ,CAC7B,GAAI,GAAQ,EAAO,IAAM,EAAO,IAC5B,EAAQ,EAAa,MAAQ,EAAa,QAAU,EAAa,QACrE,MAAI,GAAQ,EACD,EAAQ,EACZ,EAEX,gBAAgB,EAAG,EAAc,EAAQ,CACrC,GAAI,GAAW,GACX,EAAQ,EAAO,IAAM,EAAO,IAC5B,EAAS,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAE3F,GAAI,EAAQ,EAAG,CACX,GAAI,GAAY,KAAK,WAAW,EAAc,GAC9C,GAAI,EAAY,EACZ,GAAI,EAAO,eAAiB,EAAc,cAAc,SAAU,CAC9D,GAAI,GAAO,EAAc,aAAa,GAClC,EAAO,EAAO,EAAK,YACnB,EAAK,EAAK,UAAU,WACpB,EAAK,EAAK,WAAW,WACzB,AAAI,EAAG,OAAS,GACZ,GAAK,IAAM,GACf,GAAI,GAAK,EAAK,aAAa,WAC3B,AAAI,EAAG,OAAS,GACZ,GAAK,IAAM,GACf,GAAI,GAAK,EAAK,aAAa,WAC3B,AAAI,EAAG,OAAS,GACZ,GAAK,IAAM,GACf,GAAI,GAAK,KAAK,MAAM,EAAK,kBAAoB,IAAI,WACjD,AAAI,EAAG,OAAS,GACZ,GAAK,IAAM,GACf,GAAI,GAAI,KAAK,MAAM,EAAK,kBAAoB,KAAK,WACjD,AAAI,GAAS,OACT,IAAY,EAAO,IAAM,GAC7B,AAAI,EAAY,GACZ,GAAa,IAAY,GAAK,IAAM,IAAM,EAAK,IAAM,EAAK,IAAM,EAAK,IAAM,EAE1E,AAAI,EAAY,EACjB,GAAa,IAAY,GAAK,IAAM,IAAM,EAAK,IAAM,EAAK,IAAM,EAAK,IAAM,EAE1E,AAAI,EAAY,GACjB,GAAa,IAAY,GAAK,IAAM,IAAM,EAAK,IAAM,EAAK,IAAM,EAE/D,AAAI,EAAY,KACjB,GAAa,IAAY,GAAK,IAAM,IAAM,EAAK,IAAM,EAEhD,EAAY,OACjB,IAAa,IAAY,GAAK,IAAM,IAAM,EAAK,SAElD,CACD,GAAI,GAAS,EAAc,eAAe,EAAO,SAAU,EAAO,GAC9D,EAAQ,GAAU,eAAkB,MAAK,MAAM,IAAO,GAAI,EAAO,WAAa,KAClF,GAAa,EAAQ,EAAK,IAAM,GAAI,IAAU,CAAC,GAAO,SAAS,GAAU,GAAI,IAAU,GAAO,SAAS,IAInH,MAAO,GAEX,gBAAgB,EAAG,EAAe,EAAgB,EAAQ,CACtD,GAAI,CAAC,KAAK,aAAa,QACnB,OAEJ,GAAI,GAAI,KAAK,qBAab,GAZI,GAAK,MAGL,EAAE,GAAK,KAAK,aAAa,SAGzB,EAAE,GAAK,KAAK,aAAa,SAGzB,EAAE,GAAK,KAAK,YAAY,MAAQ,KAAK,aAAa,SAGlD,EAAE,GAAK,KAAK,YAAY,OAAS,KAAK,aAAa,QACnD,OAEJ,EAAE,QAAQ,GAAmB,GAAW,EAAG,EAAG,EAAe,IAC7D,GAAI,GAAY,EAAO,mBAAmB,KAAK,aAAc,GACzD,EAAQ,GACR,EAAY,GACZ,EAAY,GAAI,OAAM,KAAK,QAAQ,QACnC,EAAW,GAAI,OAAM,KAAK,QAAQ,QACtC,OAAS,GAAI,EAAG,EAAI,KAAK,QAAQ,OAAQ,IACrC,GAAK,KAAK,QAAQ,GAAG,SAAa,CAAC,KAAK,QAAQ,GAAG,SAAW,CAC1D,GAAI,GAAK,KAAK,QAAQ,GAAG,iBAAiB,EAAU,EAAG,IACvD,AAAI,GAAM,MACN,GAAS,GAAK,EACd,EAAU,GAAK,EAAO,mBAAmB,KAAK,aAAc,EAAS,GAAI,KAAK,MAAM,KAAK,QAAQ,GAAG,YAAY,KAAM,KAAK,MAAM,KAAK,QAAQ,GAAG,YAAY,MACzJ,GAAY,GAAM,EAAQ,KAAK,IAAI,EAAU,GAAG,EAAI,EAAE,KACtD,GAAQ,KAAK,IAAI,EAAU,GAAG,EAAI,EAAE,GAC/B,MAAK,aAAa,mBAAqB,GACtC,GAAS,KAAK,aAAa,mBACxB,KAAK,IAAI,EAAU,GAAG,EAAI,EAAE,GAAK,KAAK,aAAa,oBACxD,GAAY,KAMhC,GAAI,GAAa,EAAG,CAChB,GAAI,GAAM,EAAU,GAAW,EAAI,KAAK,aAAa,SAAW,GAAM,EAClE,EAAM,EAAU,GAAW,EAAI,KAAK,aAAa,SAAW,GAAM,EAClE,EAAK,KAAK,aAAa,SAC3B,EAAE,YAAY,KAAK,QAAQ,GAAW,MAAO,EAAI,EAAI,EAAI,GACzD,EAAE,YAAY,KAAK,aAAa,IAAK,EAAI,EAAI,EAAI,GACjD,GAAI,GACA,EACJ,AAAI,EAAE,EAAI,KAAK,aAAa,QAAW,GAAgB,KAAK,aAAa,QAAU,KAAK,aAAa,SAAW,EAC5G,EAAK,GAEL,EAAK,EACT,AAAI,EAAE,EAAI,KAAK,aAAa,QAAW,GAAiB,KAAK,aAAa,QAAU,KAAK,aAAa,SAAW,EAC7G,EAAK,GAEL,EAAK,EACT,GAAI,GAAO,EAAU,GAAW,EAAI,EAAM,MAAK,aAAa,aAAe,MAAS,EAChF,EAAO,EAAU,GAAW,EAAI,EAAK,KAAK,aAAa,cAAiB,EAC5E,EAAE,WAAW,KAAK,aAAa,IAAM,EAAU,GAAW,EAAI,EAAK,KAAQ,KAAK,aAAa,SAAW,GAAM,EAAI,EAAU,GAAW,EAAI,EAAK,KAAQ,KAAK,aAAa,SAAW,GAAM,EAAI,EAAU,GAAW,EAAI,EAAK,KAAK,aAAa,cAAiB,EAAI,EAAU,GAAW,EAAI,EAAK,KAAK,aAAa,cAAiB,GACrU,EAAE,WAAW,KAAK,aAAa,IAAM,EAAU,GAAW,EAAI,EAAK,KAAK,aAAa,cAAiB,EAAI,EAAU,GAAW,EAAI,EAAK,KAAK,aAAa,cAAiB,EAAG,EAAK,GACnL,GAAI,GAAW,GAGf,GAFI,KAAK,aAAa,eAClB,IAAY,KAAK,QAAQ,GAAW,OAAS;AAAA,GAC7C,KAAK,aAAa,cAAe,CACjC,GAAI,GAAI,EAAS,GAAW,EAC5B,GAAY,KAAK,gBAAgB,EAAG,KAAK,aAAc,GAAU;AAAA,EAKrE,GAAI,KAAK,aAAa,cAAc,UAAY,GAAY,cAAc,kBAAkB,SACxF,GAAY,EAAS,GAAW,EAAE,WAAa,KAAK,QAAQ,GAAW,SAEtE,CACD,GAAI,GAAW,KAAK,aAAa,cAAc,YAC3C,EAAY,CAAC,KAAK,MAAM,OAAO,IACnC,GAAY,EAAS,GAAW,EAAE,QAAQ,GAAa,KAAK,QAAQ,GAAW,KAEnF,GAAI,GAAQ,EAAE,cAAc,EAAU,KAAK,aAAa,KAAM,KAC1D,EAAc,EAAM,MAAQ,EAAI,KAAK,aAAa,QAAU,KAAK,aAAa,gBAC9E,EAAe,EAAM,OAAS,EAAI,KAAK,aAAa,QAAU,KAAK,aAAa,gBACpF,AAAI,EAAK,EACL,GAAE,kBAAkB,KAAK,aAAa,QAAS,EAAK,EAAO,IAAe,GAAI,EAAY,GAC1F,EAAE,kBAAkB,KAAK,aAAa,IAAK,EAAK,EAAO,IAAe,GAAI,EAAY,GACtF,EAAE,aAAa,EAAU,KAAK,aAAa,KAAM,KAAK,aAAa,KAAK,MAAQ,EAAM,KAAK,aAAa,SAAY,EAAI,EAAO,IAAe,GAAK,KAAK,aAAa,SAAY,IAGjL,GAAE,kBAAkB,KAAK,aAAa,QAAS,EAAM,EAAY,EAAO,IAAe,GAAI,EAAY,GACvG,EAAE,kBAAkB,KAAK,aAAa,IAAK,EAAM,EAAY,EAAO,IAAe,GAAI,EAAY,GACnG,EAAE,aAAa,EAAU,KAAK,aAAa,KAAM,KAAK,YAAY,KAAK,MAAQ,EAAM,KAAK,aAAa,QAAU,GAAe,EAAI,EAAO,IAAe,GAAK,KAAK,aAAa,SAAY,KAsBzM,YAAY,EAAG,EAAG,EAAQ,EAAe,EAAgB,CACrD,GAAI,KAAK,OAAO,QAAQ,QAAU,EAC9B,OACJ,EAAE,QAAQ,GAAmB,GAAW,EAAE,QAAS,EAAE,QAAS,EAAE,MAAQ,EAAE,QAAU,EAAE,QAAS,EAAE,OAAS,EAAE,QAAU,EAAE,UACxH,GAAI,GAAa,EAAO,mBAAmB,EAAG,GAAmB,GAAM,EAAE,QAAS,EAAE,OAAS,EAAE,UAC3F,EAAW,EAAO,mBAAmB,EAAG,GAAmB,GAAM,EAAE,MAAQ,EAAE,QAAS,EAAE,UACxF,EAAM,GAAE,OAAS,EAAE,QAAU,EAAE,SAAW,IAC1C,EAAY,GAChB,EAAE,kBAAoB,AAAe,EAAmB,UACxD,OAAS,GAAI,EAAG,EAAI,KAAK,OAAO,QAAQ,OAAQ,IAC5C,GAAI,KAAK,OAAO,QAAQ,GAAG,QAAS,CAChC,AAAI,EAAY,GACZ,GAAY,KAAK,WAAW,KAAK,aAAc,IACnD,GAAI,GAAW,GACX,EAAO,EAYX,GAXA,AAAI,KAAK,OAAO,QAAQ,GAAG,eAAiB,EAAc,cAAc,SACpE,AAAI,KAAK,OAAO,SAAW,EACvB,EAAO,KAAK,OAAO,QAAQ,GAAG,UAAY,KAAK,OAAO,SAGtD,EAAW,GAIf,EAAO,KAAK,OAAO,QAAQ,GAAG,UAE7B,EAAO,EAAW,EAAI,IAAM,GAAe,EAAO,EAAS,EAAI,IAAM,GAAc,EAAU,CAE9F,GAAI,GAAY,AADR,EAAO,mBAAmB,EAAG,GAAI,IAAQ,EAAM,IACrC,GAAM,EACpB,EAAY,EAAE,OAAS,EAAE,QAAW,KAAK,OAAO,QAAQ,GAAG,UAAY,GAAQ,EAC/E,EAAW,KAAK,OAAO,QAAQ,GAAG,KAAK,QAAQ,MAAO;AAAA,GACtD,EAAM,GAAI,MACd,GAAI,EAAS,QAAQ,MAAQ,EAAG,CAC5B,GAAI,EAAS,QAAQ,iBAAmB,EAAG,CAGvC,GAAI,GAAI,KAAK,OAAO,QAAQ,GAAG,eAAiB,EAAc,cAAc,SAAW,EAAc,oBAAoB,KAAK,OAAO,QAAQ,GAAG,UAAW,GACrJ,KAAK,gBAAgB,KAAK,OAAO,QAAQ,GAAG,UAAW,KAAK,aAAc,GAChF,EAAW,EAAS,QAAQ,eAAgB,GAEhD,GAAI,EAAS,QAAQ,WAAa,EAC9B,OAAS,GAAI,EAAG,EAAI,KAAK,QAAQ,OAAQ,IACrC,GAAK,KAAK,QAAQ,GAAG,SAMjB,EAAW,EAAS,QAAQ,SAAY,GAAI,GAAG,WAAa,IAAK,QANtC,CAC3B,GAAI,GAAK,KAAK,QAAQ,GAAG,iBAAiB,EAAM,IAC5C,EAAM,GAAM,KAAS,EAAG,EAAG,QAAQ,GAAK,KAC5C,EAAW,EAAS,QAAQ,SAAY,GAAI,GAAG,WAAa,IAAK,GAO7E,GAAI,EAAS,QAAQ,UAAY,EAC7B,OAAS,GAAI,EAAG,EAAI,KAAK,QAAQ,OAAQ,IACrC,AAAK,KAAK,QAAQ,GAAG,SAIjB,EAAW,EAAS,QAAQ,QAAW,GAAI,GAAG,WAAa,IAAK,IAHhE,EAAW,EAAS,QAAQ,QAAW,GAAI,GAAG,WAAa,IAAK,KAAK,QAAQ,GAAG,MAO5F,GAAI,EAAS,QAAQ,YAAc,EAC/B,OAAS,GAAI,EAAG,EAAI,KAAK,QAAQ,OAAQ,IACrC,AAAK,KAAK,QAAQ,GAAG,SAIjB,EAAW,EAAS,QAAQ,UAAa,GAAI,GAAG,WAAa,IAAK,IAHlE,EAAW,EAAS,QAAQ,UAAa,GAAI,GAAG,WAAa,IAAK,KAAK,QAAQ,GAAG,QAO9F,AAAI,KAAK,OAAO,QAAQ,GAAG,mBAAqB,MAC5C,GAAW,KAAK,OAAO,QAAQ,GAAG,kBAAkB,IAG5D,GAAI,GAAQ,EAAE,cAAc,EAAU,KAAK,OAAO,QAAQ,GAAG,KAAM,KAC/D,EAAc,EAAM,MAAQ,EAAI,KAAK,OAAO,QAAQ,GAAG,QAAU,KAAK,OAAO,QAAQ,GAAG,gBACxF,EAAe,EAAM,OAAS,EAAI,KAAK,OAAO,QAAQ,GAAG,QAAU,KAAK,OAAO,QAAQ,GAAG,gBAC9F,EAAE,kBAAkB,KAAK,OAAO,QAAQ,GAAG,QAAS,EAAY,IAAc,GAAI,EAAY,IAAe,GAAI,GAAc,EAAG,GAAe,GACjJ,EAAE,kBAAkB,KAAK,OAAO,QAAQ,GAAG,IAAK,EAAY,IAAc,GAAI,EAAY,IAAe,GAAI,GAAc,EAAG,GAAe,GAC7I,GAAI,GACJ,OAAQ,KAAK,OAAO,QAAQ,GAAG,eACtB,IAAO,UAAU,KAClB,EAAQ,EAAY,IAAc,GAAK,KAAK,OAAO,QAAQ,GAAG,QAC9D,UACC,IAAO,UAAU,MAClB,EAAQ,EAAY,IAAc,GAAK,KAAK,OAAO,QAAQ,GAAG,QAC9D,cAEA,EAAQ,EACR,MAKR,GAHA,EAAE,aAAa,EAAU,KAAK,OAAO,QAAQ,GAAG,KAAM,KAAK,OAAO,QAAQ,GAAG,KAAK,MAAO,GAAmB,GAAO,EAAO,GAAW,KAAK,OAAO,QAAQ,GAAG,cAC5J,EAAE,WAAW,KAAK,OAAO,QAAQ,GAAG,IAAK,EAAW,EAAE,SAAY,EAAG,EAAU,EAAY,IAAe,IAC1G,EAAE,WAAW,KAAK,OAAO,QAAQ,GAAG,IAAK,EAAU,EAAY,IAAe,GAAI,EAAW,EAAE,OAAS,EAAE,SAAY,GAClH,KAAK,OAAO,QAAQ,GAAG,UAAY,EAAG,CACtC,GAAI,KAAK,OAAO,QAAQ,GAAG,UAAY,GAAI,CACvC,GAAI,GAAW,CACX,GAAmB,GAAQ,EAAW,KAAK,OAAO,QAAQ,GAAG,UAAa,EAAY,IAAe,IACrG,GAAmB,GAAQ,EAAW,KAAK,OAAO,QAAQ,GAAG,UAAa,EAAY,IAAe,IACrG,GAAmB,GAAO,EAAY,EAAY,IAAe,GAAK,KAAK,OAAO,QAAQ,GAAG,YAEjG,EAAE,YAAY,KAAK,OAAO,QAAQ,GAAG,WAAY,GAErD,GAAI,KAAK,OAAO,QAAQ,GAAG,UAAY,GAAI,CACvC,GAAI,GAAW,CACX,GAAmB,GAAQ,EAAW,KAAK,OAAO,QAAQ,GAAG,UAAa,EAAY,IAAe,IACrG,GAAmB,GAAQ,EAAW,KAAK,OAAO,QAAQ,GAAG,UAAa,EAAY,IAAe,IACrG,GAAmB,GAAO,EAAY,EAAY,IAAe,GAAK,KAAK,OAAO,QAAQ,GAAG,YAEjG,EAAE,YAAY,KAAK,OAAO,QAAQ,GAAG,WAAY,MAMrE,EAAE,YAEN,eAAe,EAAG,EAAG,EAAQ,EAAS,EAAe,EAAgB,CACjE,GAAI,KAAK,YAAY,QAAU,EAE/B,GAAE,QAAQ,GAAmB,GAAW,EAAE,QAAS,EAAE,QAAS,EAAE,MAAQ,EAAE,QAAU,EAAE,QAAS,EAAE,OAAS,EAAE,QAAU,EAAE,UACxH,OAAS,GAAI,EAAG,EAAI,KAAK,YAAY,OAAQ,IACzC,GAAI,KAAK,YAAY,GAAG,QAAS,CAC7B,GAAI,GAAI,KAAK,YAAY,GACzB,GAAI,EAAE,YAAc,EAAQ,OAAQ,CAChC,GAAI,GAAiB,EAAE,MAAQ,EAAI,EAAE,QAAU,EAAE,gBACjD,AAAI,EAAiB,KACjB,GAAiB,KACrB,GAAI,GAAQ,EAAE,cAAc,EAAE,KAAM,EAAE,KAAM,GAAkB,GAC1D,EAAa,EAAM,MAAQ,EAAI,EAAE,QAAU,EAAE,gBAC7C,EAAc,EAAM,OAAS,EAAI,EAAE,QAAU,EAAE,gBAC/C,EAAI,EACR,OAAQ,EAAE,wBACD,IAAU,mBAAmB,WAC9B,EAAI,EAAE,QACN,UACC,IAAU,mBAAmB,YAC9B,EAAI,EAAE,MAAQ,EAAE,QAChB,UACC,IAAU,mBAAmB,UAE9B,GAAI,GAAS,AADD,GAAO,IAAM,EAAO,KACT,GAAE,MAAQ,EAAE,QAAU,EAAE,SAC/C,EAAI,EAAE,QAAU,KAAK,MAAO,GAAE,kBAAoB,EAAO,KAAO,IAAU,EAC1E,MAER,GAAI,GAAI,EACR,OAAQ,EAAE,sBACD,IAAU,iBAAiB,UAC5B,EAAI,EAAE,QACN,UACC,IAAU,iBAAiB,aAC5B,EAAI,EAAE,OAAS,EAAE,QACjB,UACC,IAAU,iBAAiB,UAC5B,EAAI,EAAE,OAAS,EAAE,QAAU,KAAK,MAAO,GAAE,kBAAoB,EAAQ,EAAE,aAAa,MAAQ,EAAQ,EAAE,aAAa,OAAS,EAC5H,MAER,OAAQ,EAAE,mBACD,IAAU,gBAAgB,OAC3B,GAAK,EAAa,EAAE,iBACpB,UACC,IAAU,gBAAgB,QAC3B,GAAK,EAAE,iBACP,cAEA,GAAM,EAAc,EACpB,MAER,OAAQ,EAAE,mBACD,IAAU,cAAc,MACzB,GAAK,EAAc,EAAE,eACrB,UACC,IAAU,cAAc,MACzB,GAAK,EAAE,eACP,cAEA,GAAM,EAAe,EACrB,MAER,EAAE,kBAAkB,EAAE,QAAS,GAAK,EAAG,GAAK,EAAG,GAAc,EAAG,GAAe,GAC3E,EAAE,gBAAkB,GACpB,EAAE,kBAAkB,EAAE,IAAK,GAAK,EAAG,GAAK,EAAG,GAAc,EAAG,GAAe,GAC/E,GAAI,GAAK,GAAmB,GAAc,OAC1C,OAAQ,EAAE,oBACD,AAAe,GAAa,UAAU,KACvC,EAAG,cAAgB,EACnB,EAAG,UAAY,EACf,UACC,AAAe,GAAa,UAAU,MACvC,EAAG,cAAgB,EACnB,EAAG,UAAY,EACf,cAEA,EAAG,cAAgB,EACnB,EAAG,UAAY,EACf,MAER,GAAI,GAAO,GAAmB,GAAY,EAAI,EAAE,QAAU,EAAE,gBAAkB,GAAM,EAAI,EAAI,EAAE,QAAU,EAAE,gBAAkB,GAAM,EAAG,EAAM,QAAU,EAAK,GAAM,QAAU,GAAK,GAC/K,EAAE,eAAe,EAAE,KAAM,EAAE,KAAM,EAAE,KAAK,MAAO,EAAM,OAGrD,MAAM,IAAI,YAAW,+BAAiC,EAAE,WAAa,sBAKrF,OAAO,EAAG,EAAK,EAAK,CAChB,GAAK,EAAM,IAAQ,EAAM,GACrB,MAAO,GAIX,GAAI,GAAc,KAAK,aAAa,QAChC,EAAc,KAAK,aAAa,QACpC,KAAK,aAAa,MAAQ,EAC1B,KAAK,aAAa,OAAS,EAC3B,KAAK,aAAa,QAAU,EAC5B,KAAK,aAAa,QAAU,EAC5B,EAAE,cAAgB,AAAe,EAAe,YAChD,GAAI,GAAgB,EAIpB,OAAS,GAAI,EAAG,EAAI,KAAK,OAAO,OAAQ,IACpC,GAAI,KAAK,OAAO,GAAG,QAAS,CAExB,GAAI,GAAM,CADF,EAAE,cAAc,IAAK,KAAK,OAAO,GAAG,KAAM,KACtC,OAAS,GAAK,GAAM,EAChC,AAAI,EAAgB,GAChB,GAAgB,GAG5B,KAAK,aAAa,QAAW,KAAK,OAAO,UAAY,GAAM,YAAY,IAAO,EAAI,EAClF,KAAK,aAAa,QAAW,KAAK,OAAO,UAAY,GAAM,YAAY,OAAU,EAAI,EAEhF,KAAK,aAAa,SACnB,KAAK,gBAAgB,EAAG,EAAK,EAAK,KAAK,cAE3C,KAAK,qBAAqB,EAAG,KAAK,kBAAmB,EAAK,EAAK,GAAO,KAAK,cACvE,KAAK,aAAa,SAAW,GAC7B,MAAK,aAAa,QAAU,GAC5B,KAAK,aAAa,SAAW,GAC7B,MAAK,aAAa,QAAU,GAEhC,GAAI,GAAI,KAAK,UAAU,KAAK,aAAc,EAAG,KAAK,OAAQ,IAC1D,AAAI,KAAK,OAAO,UAAY,GAAM,YAAY,IAC1C,KAAK,aAAa,SAAW,EAE7B,KAAK,aAAa,SAAW,EACjC,KAAK,aAAa,KAAO,KAAK,OAAO,IAErC,GAAI,GACJ,OAAS,GAAI,EAAG,EAAI,KAAK,OAAO,OAAQ,IAAK,CACzC,EAAI,EAAc,eAClB,OAAS,GAAI,EAAG,EAAI,KAAK,QAAQ,OAAQ,IACrC,GAAK,KAAK,QAAQ,GAAG,YAAc,GAAO,CAAC,KAAK,QAAQ,GAAG,SACvD,OAAS,GAAI,EAAG,EAAI,KAAK,QAAQ,GAAG,SAAS,OAAQ,IACjD,EAAI,EAAc,QAAQ,EAAG,EAAO,WAAW,KAAK,OAAO,IAAK,KAAK,OAAO,IAAK,KAAK,QAAQ,GAAG,SAAS,GAAG,KAAM,KAAK,QAAQ,GAAG,SAAS,GAAG,QAI3J,KAAK,OAAO,GAAG,oBAAoB,GAGvC,AAAI,KAAK,aAAa,SAAW,GAC7B,MAAK,aAAa,QAAU,GAC5B,KAAK,aAAa,SAAW,GAC7B,MAAK,aAAa,QAAU,GAChC,OAAS,GAAI,EAAG,EAAI,KAAK,OAAO,OAAQ,IAAK,CACzC,GAAI,GAAK,EAAO,UAAU,KAAK,aAAc,EAAG,KAAK,OAAO,GAAI,EAAG,IACnE,KAAK,aAAa,SAAY,KAAK,OAAO,GAAG,UAAY,GAAM,YAAY,KAAQ,EAAK,EACxF,KAAK,aAAa,SAAY,KAAK,OAAO,GAAG,UAAY,GAAM,YAAY,MAAS,EAAK,EAE7F,GAAI,KAAK,WAAW,QAAS,CACzB,AAAK,IAAe,KAAK,aAAa,SAAa,GAAe,KAAK,aAAa,UAEhF,MAAK,eAAiB,MAE1B,GAAI,GAAM,KAAK,WAAW,eAAiB,KAAK,YAAY,OAAS,KAAU,EAC3E,EAAQ,KAAK,MAAM,UAAY,GAAM,YAAY,OAAS,EAAI,EAClE,KAAK,WAAW,YAAY,EAAK,EAAK,KAAK,aAAa,QAAS,KAAK,aAAa,QAAS,KAAK,aAAa,OAAS,EAAK,KAAK,aAAa,QAAU,EAAO,KAAK,aAAa,QAAU,GAC3L,KAAK,aAAa,SAAW,EAGjC,AAAK,MAAK,eAAiB,KAAK,aAAa,SAAa,KAAK,kBAAoB,KAAK,aAAa,UACjG,MAAK,SAAW,KAChB,KAAK,cAAgB,KAAK,aAAa,QACvC,KAAK,iBAAmB,KAAK,aAAa,SAE1C,KAAK,UAAY,MACjB,MAAK,SAAW,GAAmB,IAAqB,KAAK,UAAW,KAAK,YAEjF,EAAE,kBAAkB,KAAK,SAAU,KAAK,aAAa,QAAS,KAAK,aAAa,QAAS,KAAK,aAAa,MAAQ,KAAK,aAAa,QAAU,KAAK,aAAa,QAAS,KAAK,aAAa,OAAS,KAAK,aAAa,QAAU,KAAK,aAAa,SAC/O,KAAK,iBAAmB,GACpB,MAAK,YAAc,MACnB,MAAK,WAAa,GAAmB,GAAK,KAAK,aAAc,KAAK,mBACtE,EAAE,kBAAkB,KAAK,WAAY,KAAK,aAAa,QAAS,KAAK,aAAa,QAAS,KAAK,aAAa,MAAQ,KAAK,aAAa,QAAU,KAAK,aAAa,QAAS,KAAK,aAAa,OAAS,KAAK,aAAa,QAAU,KAAK,aAAa,UAGzP,EAAE,QAAQ,GAAmB,GAAW,KAAK,aAAa,QAAS,KAAK,aAAa,QAAS,KAAK,aAAa,MAAQ,KAAK,aAAa,QAAU,KAAK,aAAa,QAAS,KAAK,aAAa,OAAS,KAAK,aAAa,QAAU,KAAK,aAAa,UACxP,OAAS,GAAI,EAAG,EAAI,KAAK,OAAO,OAAQ,IACpC,KAAK,eAAe,KAAK,aAAc,EAAG,KAAK,OAAO,IAE1D,KAAK,eAAe,KAAK,aAAc,EAAG,KAAK,OAC/C,EAAE,YAEF,KAAK,UAAU,KAAK,aAAc,EAAG,KAAK,OAAQ,IAElD,GAAI,GAAa,EACb,EAAc,EAElB,OAAS,GAAI,EAAG,EAAI,KAAK,OAAO,OAAQ,IAAK,CACzC,GAAI,GAAK,EAAO,UAAU,KAAK,aAAc,EAAG,KAAK,OAAO,GAAK,KAAK,OAAO,GAAG,UAAY,GAAM,YAAY,KAAQ,EAAa,EAAa,IAChJ,AAAI,KAAK,OAAO,GAAG,UAAY,GAAM,YAAY,MAC7C,IAAc,GACd,KAAK,OAAO,GAAG,UAAY,GAAM,YAAY,OAC7C,IAAe,GAMvB,EAAE,QAAQ,GAAmB,GAAW,KAAK,aAAa,QAAS,KAAK,aAAa,QAAS,KAAK,aAAa,MAAQ,KAAK,aAAa,QAAU,KAAK,aAAa,QAAS,KAAK,aAAa,OAAS,KAAK,aAAa,QAAU,KAAK,aAAa,UAExP,KAAK,aAAa,MAAS,MAAK,aAAa,MAAQ,KAAK,aAAa,QAAU,KAAK,aAAa,SAAY,MAAK,OAAO,IAAM,KAAK,OAAO,KAC7I,GAAI,GAAS,KACT,EAAY,EACZ,EAAa,EACb,EAAa,EAAO,mBAAmB,KAAK,aAAc,GAAmB,GAAM,KAAK,aAAa,QAAS,KAAK,aAAa,OAAS,KAAK,aAAa,UAC3J,EAAW,EAAO,mBAAmB,KAAK,aAAc,GAAmB,GAAM,KAAK,aAAa,MAAQ,KAAK,aAAa,QAAS,KAAK,aAAa,UACxJ,EAAa,EAAW,EACxB,EAAW,EAAS,EACxB,OAAS,GAAI,EAAG,EAAI,KAAK,QAAQ,OAAQ,IACrC,GAAK,KAAK,QAAQ,GAAG,SAAY,CAAE,KAAK,QAAQ,GAAG,SAAW,CAG1D,GAAI,GAAa,KAAK,QAAQ,GAAG,WACjC,EAAS,KAAK,QAAQ,GAAG,IACzB,KAAK,aAAa,KAAO,KAAK,OAAO,GAAY,cAAc,QAC/D,KAAK,OAAO,KAAK,QAAQ,GAAG,YAAY,KAAO,KAAK,aAAa,KACjE,GAAI,GAAQ,KAAK,OAAO,GAAY,cAAc,QAAU,KAAK,OAAO,GAAY,cAAc,QAClG,AAAI,GAAS,GACT,GAAQ,EACR,KAAK,aAAa,MAAQ,EAAQ,GAEtC,KAAK,aAAa,MAAS,MAAK,aAAa,OAAS,KAAK,aAAa,QAAU,KAAK,aAAa,SAAY,EAChH,KAAK,OAAO,KAAK,QAAQ,GAAG,YAAY,KAAO,KAAK,aAAa,MACjE,EAAE,QAAQ,4BAA8B,EAAE,YAC1C,OAAS,GAAI,EAAG,EAAI,KAAK,QAAQ,GAAG,SAAS,OAAQ,IACjD,GAAa,EAAO,mBAAmB,KAAK,aAAc,EAAG,EAAQ,KAAK,QAAQ,GAAG,SAAS,GAAG,KAAM,KAAK,QAAQ,GAAG,SAAS,GAAG,MAAO,EAAY,GACtJ,GAAc,KAAK,QAAQ,GAAG,SAAS,GAAG,MAStD,GADA,EAAE,YACE,KAAK,WAAW,QAAS,CAGzB,EAAE,QAAQ,mBACV,GAAI,GAAI,KAAK,WAAW,SAEpB,EAAQ,EAAc,eAC1B,OAAS,GAAI,EAAG,EAAI,KAAK,QAAQ,OAAQ,IACrC,AAAK,KAAK,QAAQ,GAAG,UACjB,GAAQ,EAAc,QAAQ,EAAO,KAAK,QAAQ,GAAG,YAI7D,GAFA,KAAK,WAAW,OAAS,EAAc,OAAO,EAAO,MACrD,EAAE,MAAS,GAAE,MAAQ,EAAE,QAAU,EAAE,SAAY,MAAK,WAAW,OAAO,IAAM,KAAK,WAAW,OAAO,KAC7F,KAAK,gBAAkB,GACrB,CAAC,KAAK,aAAa,SAAa,CAAC,KAAK,WAAW,SACjD,KAAK,gBAAkB,MAAU,YAA4B,GAAe,CAChF,EAAE,QAAQ,oBACN,KAAK,gBAAkB,MACvB,MAAK,eAAiB,MAC1B,KAAK,eAAiB,SAAS,cAAc,UAE7C,KAAK,eAAe,MAAQ,EAAE,MAC9B,KAAK,eAAe,OAAS,EAAE,OAC/B,KAAK,eAAiB,EACtB,GAAI,GAUJ,GATA,AAAI,YAA4B,GAC5B,EAAK,EAGL,EAAK,GAAmB,IAAU,KAAK,eAAgB,EAAE,MAAO,EAAE,OAAQ,IAI9E,EAAG,kBAAkB,KAAK,WAAW,QAAS,EAAE,QAAS,EAAE,QAAS,EAAE,MAAQ,EAAE,QAAU,EAAE,QAAS,EAAE,OAAS,EAAE,QAAU,EAAE,SACzH,KAAK,MAAM,MAAM,OAAS,GAAM,KAAK,WAAW,eAAgB,CAEjE,GAAI,GAAS,AADD,MAAK,WAAW,OAAO,IAAM,KAAK,WAAW,OAAO,KACzC,GAAE,MAAQ,EAAE,QAAU,EAAE,SAC/C,OAAS,IAAI,EAAG,GAAI,KAAK,MAAM,MAAM,OAAQ,KACzC,GAAI,KAAK,MAAM,MAAM,IAAG,QAAS,CAC7B,GAAI,IAAM,KAAK,MAAM,MAAM,IAAG,IAC1B,GAAM,KAAK,MAAM,MAAM,IAAG,IAC9B,AAAI,MAAM,KACN,IAAM,KAAK,WAAW,OAAO,KAC7B,MAAM,KACN,IAAM,KAAK,WAAW,OAAO,KACjC,EAAG,kBAAkB,KAAK,MAAM,MAAM,IAAG,UAAW,EAAE,QAAY,IAAM,KAAK,WAAW,OAAO,KAAO,GAAU,EAAG,EAAE,SAAW,EAAK,IAAM,IAAO,GAAU,EAAG,EAAE,OAAS,EAAE,QAAU,EAAE,UAIpM,GAAK,EAAc,UAAU,KAAK,WAAW,SAAc,KAAK,WAAW,OAAO,IAAM,KAAK,WAAW,OAAO,IAAO,EACrH,CACG,GAAI,GACA,EACJ,EAAE,KAAO,KAAK,WAAW,OAAO,IAChC,GAAI,IAAwB,EAAO,GAAE,OAAS,EAAE,QAAU,EAAE,SACxD,GAAa,EAAO,mBAAmB,EAAG,GAAmB,GAAM,EAAE,QAAS,EAAE,OAAS,EAAE,UAC3F,GAAW,EAAO,mBAAmB,EAAG,GAAmB,GAAM,EAAE,MAAQ,EAAE,QAAS,EAAE,UACxF,GAAa,GAAW,EACxB,GAAW,GAAS,EACxB,GAAI,KAAK,WAAW,eAAiB,GAAU,cAAc,MACzD,OAAS,GAAI,EAAG,EAAI,KAAK,QAAQ,OAAQ,IACrC,GAAI,CAAC,KAAK,QAAQ,GAAG,SAAU,CAC3B,EAAG,QAAQ,uBAAyB,EAAE,YACtC,EAAE,KAAO,KAAK,QAAQ,GAAG,WAAW,IACpC,GAAI,IAAa,KAAK,QAAQ,GAAG,WAIjC,GAHA,EAAS,KAAK,QAAQ,GAAG,aACzB,EAAM,KAAK,QAAQ,GAAG,WAAW,IACjC,EAAM,KAAK,QAAQ,GAAG,WAAW,IAC7B,EAAM,GAAO,EACb,EAAE,KAAO,EAAM,GACf,EAAM,EAAM,OAEX,CACD,GAAI,GAAQ,EAAM,EAClB,GAAO,EAAQ,GACf,GAAO,EAAQ,GAEnB,EAAE,KAAO,EACT,EAAE,MAAS,GAAE,OAAS,EAAE,QAAU,EAAE,SAAY,GAAM,GACtD,OAAS,GAAI,EAAG,EAAI,KAAK,QAAQ,GAAG,SAAS,OAAQ,IACjD,GAAa,EAAO,mBAAmB,EAAG,EAAI,EAAQ,KAAK,QAAQ,GAAG,SAAS,GAAG,KAAM,KAAK,QAAQ,GAAG,SAAS,GAAG,MAAO,GAAY,SAMnJ,QAAS,GAAI,EAAG,EAAI,KAAK,OAAO,OAAQ,IAAK,CACzC,GAAI,IAAS,EAAc,eAC3B,OAAS,GAAI,EAAG,EAAI,KAAK,QAAQ,OAAQ,IACrC,AAAK,KAAK,QAAQ,GAAG,YAAc,GAAO,CAAC,KAAK,QAAQ,GAAG,UACvD,IAAS,EAAc,QAAQ,GAAQ,KAAK,QAAQ,GAAG,aAG/D,GAAS,EAAc,OAAO,GAAQ,EAAI,EAAI,IAC9C,EAAM,KAAK,OAAO,GAAG,IACjB,MAAM,IACN,GAAM,GAAO,KACjB,EAAM,KAAK,OAAO,GAAG,IACjB,MAAM,IACN,GAAM,GAAO,KACb,OAAO,MAAM,IACb,GAAM,EACN,EAAM,GAEN,EAAM,GAAO,GACb,GAAM,EAAM,GACZ,EAAM,EAAM,IAEhB,EAAE,KAAO,EACT,EAAE,MAAS,GAAE,OAAS,EAAE,QAAU,EAAE,SAAY,GAAM,GACtD,OAAS,GAAI,EAAG,EAAI,KAAK,QAAQ,OAAQ,IACrC,GAAK,KAAK,QAAQ,GAAG,YAAc,GAAO,CAAC,KAAK,QAAQ,GAAG,UAAc,KAAK,QAAQ,GAAG,QAAU,CAC/F,EAAG,QAAQ,uBAAyB,EAAE,YACtC,EAAS,KAAK,QAAQ,GAAG,aACzB,OAAS,IAAI,EAAG,GAAI,KAAK,QAAQ,GAAG,SAAS,OAAQ,KACjD,GAAa,EAAO,mBAAmB,EAAG,EAAI,EAAQ,KAAK,QAAQ,GAAG,SAAS,IAAG,KAAM,KAAK,QAAQ,GAAG,SAAS,IAAG,MAAO,GAAY,KAM3J,OAAS,GAAI,EAAG,EAAI,KAAK,OAAO,QAAQ,OAAQ,IAC5C,GAAI,KAAK,OAAO,QAAQ,GAAG,QAAS,CAChC,GAAI,IAAI,EAAO,mBAAmB,EAAG,GAAI,IAAQ,KAAK,OAAO,QAAQ,GAAG,UAAa,MAAK,OAAO,QAAQ,GAAG,eAAiB,EAAc,cAAc,SAAW,KAAK,OAAO,SAAW,GAAI,IAC/L,EAAG,WAAW,KAAK,OAAO,QAAQ,GAAG,aAAc,GAAE,EAAG,EAAE,QAAS,GAAE,EAAG,EAAE,OAAS,EAAE,SAG7F,AAAI,KAAK,WAAW,gBAAkB,GAClC,EAAG,WAAW,KAAK,WAAW,UAAW,EAAE,QAAS,EAAE,QAAS,EAAE,MAAQ,EAAE,QAAS,EAAE,SAG1F,KAAK,iBAAiB,EAAG,EAAI,KAAK,WAAW,OAAQ,KAAK,MAAM,aAChE,KAAK,WAAW,eAAe,EAAE,KAAM,EAAE,KAAM,EAAE,MAAO,EAAE,OAE9D,AAAM,YAA4B,IAC9B,EAAG,UAGX,GAAI,GAAS,EAAE,MAAQ,EAAE,QAAU,EAAE,QAAU,EAC3C,EAAS,EAAE,MAAQ,EAAE,QAAU,EAAE,QAAU,EAC3C,EAAU,GAAmB,GAAW,EAAE,QAAS,EAAE,QAAU,EAAG,EAAQ,GAC1E,EAAU,GAAmB,GAAW,EAAE,QAAS,EAAE,QAAS,EAAQ,GAC1E,EAAE,QAAQ,GACJ,YAA4B,IAK9B,EAAE,UAAU,KAAK,eAAgB,EAAS,EAAS,GAKnD,KAAK,WAAW,gBAAkB,GAClC,GAAE,WAAW,KAAK,WAAW,UAAW,EAAE,QAAU,EAAG,EAAE,QAAS,EAAE,QAAU,EAAG,EAAE,OAAS,EAAE,QAAU,GACxG,EAAE,WAAW,KAAK,WAAW,UAAW,EAAE,MAAQ,EAAE,QAAS,EAAE,QAAS,EAAE,MAAQ,EAAE,QAAS,EAAE,OAAS,EAAE,QAAU,GACpH,EAAE,WAAW,KAAK,WAAW,UAAW,EAAE,QAAU,EAAG,EAAE,QAAS,EAAE,MAAQ,EAAE,QAAS,EAAE,UAE7F,GAAI,GAAiB,EAAO,mBAAmB,KAAK,aAAc,GAAmB,GAAM,KAAK,aAAa,QAAS,IAClH,EAAe,EAAO,mBAAmB,KAAK,aAAc,GAAmB,GAAM,KAAK,aAAa,MAAQ,KAAK,aAAa,QAAS,IAC1I,EAAc,EAAO,mBAAmB,KAAK,WAAW,SAAU,GAAI,IAAQ,EAAe,EAAG,IAChG,EAAY,EAAO,mBAAmB,KAAK,WAAW,SAAU,GAAI,IAAQ,EAAa,EAAG,IAChG,EAAE,cAAc,KAAK,WAAW,YAAa,GAAmB,GAAW,EAAY,EAAI,EAAG,EAAE,QAAS,EAAU,EAAI,EAAY,EAAI,EAAG,EAAE,OAAS,EAAE,QAAU,EAAE,QAAU,IAC7K,EAAE,WAAW,KAAK,WAAW,gBAAkB,EAAY,EAAI,GAAM,EAAI,EAAE,SAAY,EAAI,EAAY,EAAI,GAAM,EAAI,EAAE,OAAS,EAAE,QAAW,GAC7I,EAAE,WAAW,KAAK,WAAW,gBAAkB,EAAU,EAAI,GAAM,EAAI,EAAE,SAAY,EAAI,EAAU,EAAI,GAAM,EAAI,EAAE,OAAS,EAAE,QAAW,GACzI,EAAE,YAKN,MAAI,MAAK,aAAa,SAClB,KAAK,gBAAgB,EAAG,EAAK,EAAK,KAAK,cAC3C,EAAE,kBAAoB,AAAe,EAAmB,yBACxD,KAAK,YAAY,KAAK,aAAc,EAAG,KAAK,MAAO,EAAK,GACxD,KAAK,qBAAqB,EAAG,KAAK,kBAAmB,EAAK,EAAK,GAAM,KAAK,cAC1E,KAAK,eAAe,KAAK,aAAc,EAAG,KAAK,MAAO,KAAK,OAAQ,EAAK,GACxE,KAAK,gBAAgB,EAAG,EAAK,EAAK,KAAK,OACvC,KAAK,kBAAkB,EAAG,EAAK,GAcxB,EAEX,QAAQ,EAAQ,EAAG,CACf,GAAI,EAAE,MAAQ,YAAa,CACvB,GAAI,GAAQ,GAAO,MAAK,OAAO,IAAM,KAAK,OAAO,KACjD,KAAK,OAAO,WAAW,KAAK,OAAO,IAAM,EAAO,KAAK,OAAO,IAAM,GAClE,KAAK,SAET,GAAI,EAAE,MAAQ,aAAc,CACxB,GAAI,GAAQ,GAAO,MAAK,OAAO,IAAM,KAAK,OAAO,KACjD,KAAK,OAAO,WAAW,KAAK,OAAO,IAAM,EAAO,KAAK,OAAO,IAAM,GAClE,KAAK,SAET,AAAI,EAAE,MAAQ,WACV,KAAK,WAAW,GAAmB,GAAM,KAAK,YAAY,OAAS,EAAG,KAAK,YAAY,QAAU,GAAI,IAErG,EAAE,MAAQ,aACV,KAAK,WAAW,GAAmB,GAAM,KAAK,YAAY,OAAS,EAAG,KAAK,YAAY,QAAU,GAAI,KAG7G,WAAW,EAAK,EAAO,CACnB,GAAI,GAAa,KAAK,IAAI,KAAM,EAAQ,KACpC,EAAY,KAAK,aAAa,MAAQ,EAI1C,GAHK,EAAY,KAAK,aAAa,OAAW,EAAY,KAGrD,AADc,MAAK,OAAO,IAAM,KAAK,OAAO,KAC7B,EAAc,GAAK,IAAQ,MAC3C,OACJ,KAAK,aAAa,MAAU,GAAI,EAAI,KAAK,aAAa,SAAW,KAAK,aAAa,MAAW,GAAI,EAAI,KAAK,aAAa,SAAW,EACnI,GAAI,GAAQ,KAAK,OAAO,IAAM,KAAK,OAAO,IAC1C,KAAK,OAAO,WAAW,KAAK,aAAa,KAAM,KAAK,aAAa,KAAO,EAAQ,GAChF,KAAK,aAAa,MAAQ,EAC1B,KAAK,SAET,gBAAgB,EAAQ,EAAG,CACvB,GAAI,GAAI,KAAK,cAAc,YAAY,AAAe,GAAQ,YAAY,EAAE,MAAO,EAAE,QAAQ,UACzF,EAAK,EAAE,EACP,EAAK,EAAE,EACX,KAAK,WAAW,GAAmB,GAAM,EAAI,GAAK,EAAE,OAAS,EAAI,KAAO,KACxE,EAAE,mBAGV,EAAO,gCAAkC,GACzC,EAAO,cAAgB,KCv7HvB,YAAoB,CAChB,aAAc,CACV,KAAK,YAAc,EACnB,KAAK,YAAc,EACnB,KAAK,WAAa,EAClB,KAAK,SAAW,EAChB,KAAK,QAAU,EACf,KAAK,QAAU,EACf,KAAK,UAAY,EACjB,KAAK,aAAe,EACpB,KAAK,eAAiB,GAAmB,GAAW,EAAG,EAAG,EAAG,GAC7D,KAAK,YAAc,GAAmB,GAAc,OACpD,KAAK,kBAAoB,GAAmB,GAAW,EAAG,EAAG,EAAG,GAChE,KAAK,eAAiB,GAAmB,GAAc,OACvD,KAAK,kBAAoB,GAAmB,GAAW,EAAG,EAAG,EAAG,GAChE,KAAK,eAAiB,GAAmB,GAAc,OACvD,KAAK,SAAW,GAChB,KAAK,SAAW,GAChB,KAAK,MAAQ,KAGd,gBAAyC,EAAc,IACtD,MAAM,CAAE,MAAO,MAAK,QACpB,KAAI,EAAO,CACX,GAAK,GAAS,KAAK,MAAU,CAAC,AAAe,EAAc,oBACvD,KAAM,IAAI,YAAW,mCAAqC,KAAK,KAAK,WAAa,KAErF,KAAK,KAAO,EACR,KAAK,YAAc,KAAK,MACxB,MAAK,YAAc,KAAK,MAC5B,KAAK,YAEL,MAAM,CAAE,MAAO,MAAK,QACpB,KAAI,EAAO,CACX,GAAK,GAAS,KAAK,MAAU,CAAC,AAAe,EAAc,oBACvD,KAAM,IAAI,YAAW,gCAAkC,KAAK,KAAK,WAAa,KAElF,KAAK,KAAO,EACR,KAAK,YAAc,KAAK,MACxB,MAAK,YAAc,KAAK,MAC5B,KAAK,YAEL,YAAY,CACZ,MAAI,MAAK,YAAc,MACnB,MAAK,WAAa,GAAmB,GAAK,KAAK,aAAc,KAAK,kBAClE,KAAK,WAAW,SAAW,EAC3B,KAAK,WAAW,OAAS,GAEtB,KAAK,cAEZ,cAAc,CAAE,MAAO,MAAK,gBAC5B,aAAY,EAAO,CACnB,KAAK,aAAe,EACpB,KAAK,WAAa,KAClB,KAAK,YAEL,mBAAmB,CAAE,MAAO,MAAK,qBACjC,kBAAiB,EAAO,CACxB,KAAK,kBAAoB,EACzB,KAAK,SAAW,KAChB,KAAK,YAEL,mBAAmB,CAAE,MAAO,MAAK,qBACjC,kBAAiB,EAAO,CACxB,KAAK,kBAAoB,EACzB,KAAK,SAAW,KAChB,KAAK,YAEL,kBAAkB,CAAE,MAAO,MAAK,oBAChC,iBAAgB,EAAO,CACvB,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,sCACzB,KAAK,iBAAmB,EACxB,KAAK,WAAa,KAClB,KAAK,MAAQ,KACb,KAAK,YAEL,gBAAgB,CAAE,MAAO,MAAK,kBAC9B,eAAc,EAAO,CACrB,KAAK,eAAiB,EACtB,KAAK,YAEL,iBAAiB,CAAE,MAAO,MAAK,mBAC/B,gBAAe,EAAO,CACtB,KAAK,gBAAkB,EACvB,KAAK,YAEL,YAAY,CAAE,MAAO,MAAK,cAC1B,WAAU,EAAO,CACjB,GAAI,EAAQ,EACR,KAAM,IAAI,YAAW,sCACzB,KAAK,WAAa,KAAK,IAAI,KAAK,IAAI,EAAO,IAAK,GAChD,KAAK,MAAQ,KACb,KAAK,YAEL,WAAW,CAAE,MAAO,MAAK,aACzB,UAAS,EAAO,CAChB,GAAI,GAAS,EACT,KAAM,IAAI,YAAW,kCACzB,KAAK,UAAY,KAEjB,QAAQ,CAAE,MAAO,MAAK,UACtB,OAAM,EAAO,CACb,KAAK,OAAS,EACd,KAAK,YAEL,SAAS,CAAE,MAAO,MAAK,WACvB,QAAO,EAAO,CACd,KAAK,QAAU,EACf,KAAK,YAEL,SAAS,CAAE,MAAO,MAAK,WACvB,QAAO,EAAO,CACd,KAAK,QAAU,EACf,KAAK,YAEL,OAAO,CAAE,MAAO,MAAK,SACrB,aAAa,CAAE,MAAO,MAAK,eAC3B,aAAa,CAAE,MAAO,MAAK,eAC3B,YAAW,EAAO,CAClB,KAAK,YAAc,EACnB,KAAK,MAAQ,KACb,KAAK,YAEL,cAAc,CAAE,MAAO,MAAK,gBAC5B,aAAY,EAAO,CACnB,KAAK,aAAe,EACpB,KAAK,MAAQ,KACb,KAAK,SAAW,KAChB,KAAK,SAET,eAAe,EAAQ,CAAE,KAAK,MAAQ,KACtC,YAAY,EAAa,EAAM,EAAa,CACxC,MAAM,EAAa,GACnB,KAAK,YAAc,EACnB,KAAK,KAAO,EACZ,KAAK,KAAO,IACZ,KAAK,iBAAmB,EACxB,KAAK,aAAe,GAAmB,IACvC,KAAK,WAAa,KAClB,KAAK,aAAe,AAAe,EAAO,MAC1C,KAAK,SAAW,KAChB,KAAK,kBAAoB,AAAe,EAAO,SAAS,IAAK,IAAK,IAAK,KACvE,KAAK,kBAAoB,AAAe,EAAO,SAAS,IAAK,IAAK,IAAK,KACvE,KAAK,iBAAmB,EACxB,KAAK,eAAiB,KACtB,KAAK,gBAAkB,KACvB,KAAK,WAAa,GAClB,KAAK,UAAY,GACjB,KAAK,OAAS,EACd,KAAK,QAAU,AAAe,EAAO,MACrC,KAAK,QAAU,AAAe,EAAO,IACrC,KAAK,MAAQ,KACb,KAAK,YAAc,KACnB,KAAK,YAAc,GACnB,KAAK,MAAQ,KACb,KAAK,mBAAqB,GAAI,IAC9B,KAAK,aAAe,GAAY,YAAY,UAC5C,KAAK,YAAc,GAAmB,IAAM,KAAM,KAAM,KAAK,IAAI,EAAY,MAAO,EAAY,QAAU,GAAI,IAAM,CAAE,KAAK,eAAe,KAAK,eAC/I,KAAK,aAAe,EACpB,KAAK,MAAQ,GAAmB,IAAM,KAAM,KAAM,KAAK,IAAI,EAAY,MAAO,EAAY,QAAU,EAAG,MACvG,KAAK,WAAa,AAAe,EAAa,WAAW,eACzD,GAAI,GAAI,GAAmB,IAAU,EAAa,EAAY,MAAO,EAAY,OAAQ,IACrF,EAAI,KAAK,sBAAsB,EAAG,EAAY,MAAO,EAAY,OAAQ,KAAK,cAClF,EAAE,UAEN,oBAAqB,CACjB,KAAK,SAAW,KAChB,KAAK,MAAQ,KAEjB,sBAAsB,EAAG,EAAK,EAAK,EAAc,CAC7C,GAAO,EAAa,QAAU,EAAa,QAC3C,GAAO,EAAa,QAAU,EAAa,QAC3C,GAAI,GAAI,EAAM,EAAI,KAAK,iBACnB,EAAI,EAAM,EAAI,KAAK,iBACnB,EAAU,EAAM,EAChB,EAAc,EACd,EAAa,EACb,EAAW,EACX,EAAU,EACV,EAAiB,GAAmB,GAAW,EAAG,EAAG,EAAG,GACxD,EAAc,GAAmB,GAAc,OAC/C,EAAc,EACd,EAAe,EACf,EAAK,GAAmB,IAAO,KAAM,IACrC,EAAK,GAAmB,IAAO,KAAM,IAazC,OAZA,KAAK,mBAAmB,MAAQ,KAAK,gBAAkB,KAAO,KAAK,OAAO,QAAQ,GAAK,KAAK,eAAe,KAAM,KAAK,QAClH,KAAK,aACL,MAAK,mBAAmB,SAAW,KAAK,iBAAmB,KAAO,KAAK,KAAK,QAAQ,GAAK,KAAK,gBAAgB,KAAM,KAAK,MACzH,KAAK,mBAAmB,SAAW,KAAK,iBAAmB,KAAO,KAAK,KAAK,QAAQ,GAAK,KAAK,gBAAgB,KAAM,KAAK,MACzH,EAAK,EAAE,cAAc,KAAK,mBAAmB,SAAU,KAAK,YAAa,KACzE,EAAK,EAAE,cAAc,KAAK,mBAAmB,SAAU,KAAK,YAAa,KACzE,KAAK,mBAAmB,eAAiB,GAAmB,GAAc,OAC1E,KAAK,mBAAmB,eAAiB,GAAmB,GAAc,OAC1E,EAAe,EAAG,OACd,EAAG,OAAS,GACZ,GAAe,EAAG,SAElB,KAAK,kBACJ,IAAY,YAAY,UACzB,EAAI,EAAI,EACR,EAAI,EAAI,EACR,EAAc,EACV,EAAc,EAAI,KAAK,kBACvB,GAAc,EAAI,KAAK,iBACvB,EAAc,EAAI,KAAK,iBACvB,GAAc,EAAI,KAAK,iBAC3B,EAAa,KAAK,GAAK,EACvB,EAAW,KAAK,GAChB,KAAK,mBAAmB,UAAY,EACpC,KAAK,mBAAmB,aAAe,EACvC,EAAU,EAAa,QAAU,EACjC,EAAU,EAAa,QAAU,EAAM,EAAI,EAAc,EAAI,EAAe,KAAK,iBACjF,EAAc,EAAe,KAAM,KAAK,YAAc,IACtD,EAAiB,GAAmB,GAAY,EAAU,GAAgB,EAAI,EAAU,GAAgB,EAAG,GAAe,EAAG,GAAe,GAC5I,EAAY,UAAY,EACxB,EAAY,cAAgB,EACxB,KAAK,aACL,MAAK,mBAAmB,kBAAoB,GAAmB,GAAY,EAAY,GAAc,EAAc,EAAG,OAAS,GAAO,EAAI,EAAU,KAAK,kBAAqB,EAAI,EAAG,MAAQ,GAAM,EAAI,EAAe,GAAM,GAC5N,KAAK,mBAAmB,eAAe,UAAY,EACnD,KAAK,mBAAmB,eAAe,cAAgB,EACvD,KAAK,mBAAmB,kBAAoB,GAAmB,GAAY,EAAU,KAAK,kBAAqB,EAAI,EAAU,EAAe,GAAc,EAAc,EAAG,OAAS,GAAM,EAAI,EAAe,GAAM,EAAI,EAAG,MAAQ,GAAM,GACxO,KAAK,mBAAmB,eAAe,UAAY,EACnD,KAAK,mBAAmB,eAAe,cAAgB,EACvD,KAAK,mBAAmB,eAAe,YAAc,GAEzD,UACC,IAAY,YAAY,WACzB,EAAI,EAAI,EACR,GAAI,GAAK,GAAmB,IAAO,KAAM,IACzC,EAAK,EAAE,cAAc,KAAK,mBAAmB,MAAO,KAAK,MAAO,KAChE,EAAe,EAAI,EAAK,KAAK,gBACzB,EAAc,EAAI,KAAK,kBACvB,GAAc,EAAI,KAAK,kBACvB,EAAc,EAAI,KAAK,iBACvB,GAAc,EAAI,KAAK,iBAC3B,EAAa,EACb,EAAW,KAAK,GAChB,EAAU,EAAc,KAAK,iBAAmB,EAChD,EAAc,EAAe,KAAM,KAAK,YAAc,IACtD,KAAK,mBAAmB,UAAY,EACpC,KAAK,mBAAmB,aAAe,EACvC,EAAiB,GAAmB,GAAY,EAAU,GAAgB,EAAI,EAAU,KAAK,iBAAmB,EAAe,EAAG,QAAW,EAAI,EAAI,GAAgB,EAAI,EAAG,OAAS,GAAM,GAC3L,EAAY,UAAY,EACxB,EAAY,cAAgB,EACxB,KAAK,aACL,MAAK,mBAAmB,kBAAoB,GAAmB,GAAY,EAAY,GAAc,EAAc,EAAG,OAAS,GAAO,EAAI,EAAU,KAAK,kBAAqB,EAAI,EAAG,MAAQ,GAAM,EAAI,EAAe,GAAM,GAC5N,KAAK,mBAAmB,eAAe,UAAY,EACnD,KAAK,mBAAmB,eAAe,cAAgB,EACvD,KAAK,mBAAmB,kBAAoB,GAAmB,GAAY,EAAY,GAAc,EAAc,EAAG,OAAS,GAAO,EAAI,EAAU,KAAK,kBAAqB,EAAI,EAAG,MAAQ,GAAM,EAAI,EAAe,GAAM,GAC5N,KAAK,mBAAmB,eAAe,UAAY,EACnD,KAAK,mBAAmB,eAAe,cAAgB,GAE3D,UACC,IAAY,YAAY,WACzB,EAAc,EACV,EAAc,EAAI,GAClB,GAAc,EAAI,GAClB,EAAc,EAAI,GAClB,GAAc,EAAI,GACtB,KAAK,mBAAmB,UAAY,EACpC,KAAK,mBAAmB,aAAe,EACvC,EAAa,EACb,EAAW,EAAI,KAAK,GAAK,EACzB,EAAU,EAAa,QAAU,EAAM,EACvC,EAAc,EAAe,KAAM,KAAK,YAAc,IACtD,EAAiB,GAAmB,GAAY,EAAU,GAAgB,EAAI,EAAU,GAAgB,EAAI,EAAI,GAAgB,EAAI,EAAI,GAAgB,GACxJ,EAAY,UAAY,EACxB,EAAY,cAAgB,EACxB,KAAK,aACL,MAAK,mBAAmB,kBAAoB,GAAmB,GAAY,EAAU,KAAK,kBAAqB,EAAI,EAAW,GAAc,EAAc,EAAG,QAAU,GAAM,EAAI,EAAG,MAAQ,GAAM,EAAI,EAAG,OAAS,GAAM,GACxN,KAAK,mBAAmB,eAAe,UAAY,EACnD,KAAK,mBAAmB,eAAe,cAAgB,EACvD,KAAK,mBAAmB,kBAAoB,GAAmB,GAAY,EAAW,GAAc,EAAc,EAAG,QAAU,GAAM,EAAI,EAAU,KAAK,kBAAqB,EAAI,EAAG,OAAS,GAAM,EAAI,EAAG,MAAQ,GAAM,GACxN,KAAK,mBAAmB,eAAe,UAAY,EACnD,KAAK,mBAAmB,eAAe,cAAgB,EACvD,KAAK,mBAAmB,eAAe,YAAc,GAEzD,UACC,IAAY,YAAY,WAezB,GAdA,EAAc,EACV,EAAe,EAAI,IAAO,GAC1B,GAAe,EAAI,IAAO,GAC1B,EAAc,EAAI,GAClB,GAAc,EAAI,GACtB,KAAK,mBAAmB,UAAY,EACpC,KAAK,mBAAmB,aAAe,EAAc,GACrD,EAAU,EAAa,QAAU,EAAc,KAAK,iBAAmB,EACvE,EAAa,CAAC,KAAK,GAAK,EACxB,EAAW,EAAI,KAAK,GAAK,EACzB,EAAc,EAAe,KAAM,KAAK,YAAc,IACtD,EAAiB,GAAmB,GAAY,EAAU,GAAgB,EAAI,EAAU,GAAgB,EAAI,EAAI,GAAgB,EAAI,EAAI,GAAgB,GACxJ,EAAY,UAAY,EACxB,EAAY,cAAgB,EACxB,KAAK,YAAa,CAClB,GAAI,GAAK,KAAK,IAAI,EAAc,KAAK,IAAI,IACrC,EAAK,EAAc,KAAK,IAAI,KAAK,IAAI,IAAe,EAAI,KAAK,IAAK,GAAc,GAAe,KAAK,IAAI,GAAc,GAC1H,KAAK,mBAAmB,kBAAoB,GAAmB,GAAY,EAAU,GAAO,EAAI,EAAU,EAAK,EAAe,GAAM,EAAI,EAAG,MAAQ,GAAM,EAAI,EAAe,GAAM,GAClL,KAAK,mBAAmB,eAAe,UAAY,EACnD,KAAK,mBAAmB,eAAe,cAAgB,EACvD,KAAK,mBAAmB,kBAAoB,GAAmB,GAAY,EAAU,EAAK,EAAG,OAAU,EAAI,EAAU,EAAK,EAAe,GAAM,EAAI,EAAG,MAAQ,GAAM,EAAI,EAAe,GAAM,GAC7L,KAAK,mBAAmB,eAAe,UAAY,EACnD,KAAK,mBAAmB,eAAe,cAAgB,EAE3D,MAER,YAAK,mBAAmB,YAAc,EACtC,KAAK,mBAAmB,YAAc,EACtC,KAAK,mBAAmB,WAAa,EACrC,KAAK,mBAAmB,SAAW,EACnC,KAAK,mBAAmB,QAAU,EAClC,KAAK,mBAAmB,QAAU,EAClC,KAAK,mBAAmB,eAAiB,EACzC,KAAK,mBAAmB,YAAc,EAC/B,KAAK,mBAEhB,OAAO,EAAG,EAAG,EAAG,CACZ,KAAK,aAAe,GAAmB,IACvC,EAAE,cAAgB,AAAe,EAAe,YAChD,EAAE,kBAAoB,AAAe,EAAmB,UACxD,KAAK,qBAAqB,EAAG,KAAK,kBAAmB,EAAG,EAAG,GAAO,KAAK,cACvE,GAAI,GAAI,KAAK,sBAAsB,EAAG,EAAG,EAAG,KAAK,cACjD,GAAI,KAAK,OAAS,KAAM,CAEpB,GAAI,GAAa,AADG,EAAI,EAAE,YAAc,KAAK,GAAO,GAAE,SAAW,EAAE,YAAe,GAAI,KAAK,IAC3D,KAAK,kBAAqB,EACtD,EAAY,GAAE,SAAW,EAAE,YAAc,EAC7C,KAAK,MAAQ,GAAI,OAAM,EAAK,GAAY,IACxC,GAAI,GAAI,EACR,OAAS,GAAI,EAAG,GAAK,EAAW,IAAK,CACjC,GAAI,GAAI,EAAE,WAAa,EAAI,EAC3B,KAAK,MAAM,KAAO,GAAmB,GAAQ,EAAE,QAAU,EAAE,YAAc,KAAK,IAAI,GAAM,EAAE,QAAU,EAAE,YAAc,KAAK,IAAI,IAEjI,OAAS,GAAI,EAAW,GAAK,EAAG,IAAK,CACjC,GAAI,GAAI,EAAE,WAAa,EAAI,EAC3B,KAAK,MAAM,KAAO,GAAmB,GAAQ,EAAE,QAAU,EAAE,YAAc,KAAK,IAAI,GAAM,EAAE,QAAU,EAAE,YAAc,KAAK,IAAI,KAWrI,GARI,KAAK,UAAY,MACjB,MAAK,SAAW,GAAmB,IAAqB,KAAK,kBAAmB,KAAK,oBAErF,KAAK,YAAc,MACnB,MAAK,WAAa,GAAmB,GAAK,KAAK,aAAc,KAAK,kBAClE,KAAK,WAAW,SAAW,AAAe,EAAK,SAAS,OAE5D,EAAE,YAAY,KAAK,SAAU,KAAK,OAC9B,KAAK,aAAe,KAAK,OAAQ,CACjC,GAAI,GAAO,KAAK,UAAa,MAAK,KAAO,KAAK,MAAQ,IACtD,AAAI,KAAK,IAAI,KAAK,OAAS,KAAK,aAAe,EAC3C,KAAK,YAAc,KAAK,OAEvB,AAAI,KAAK,YAAc,KAAK,OAC7B,KAAK,aAAe,EAGpB,KAAK,aAAe,EAG5B,GAAI,GAAI,KAAK,YACb,GAAI,GAAK,KAAK,KAAM,CAChB,AAAI,EAAI,KAAK,MACT,GAAI,KAAK,MACb,GAAI,GAAe,GAAI,KAAK,MAAS,MAAK,KAAO,KAAK,KAClD,EAAa,EAAE,WAAc,GAAE,SAAW,EAAE,YAAc,EAE1D,EAAa,AADG,EAAI,EAAE,YAAc,KAAK,GAAO,GAAa,EAAE,YAAe,GAAI,KAAK,IAC3D,KAAK,kBAAqB,EACtD,EAAY,GAAa,EAAE,YAAc,EACzC,EAAK,GAAI,OAAM,EAAK,GAAY,IAChC,EAAI,EACR,OAAS,GAAI,EAAG,GAAK,EAAW,IAAK,CACjC,GAAI,GAAI,EAAE,SAAW,EAAI,EACzB,EAAG,KAAO,GAAmB,GAAQ,EAAE,QAAU,EAAE,YAAc,KAAK,IAAI,GAAM,EAAE,QAAU,EAAE,YAAc,KAAK,IAAI,IAEzH,OAAS,GAAI,EAAW,GAAK,EAAG,IAAK,CACjC,GAAI,GAAI,EAAE,SAAW,EAAI,EACzB,EAAG,KAAO,GAAmB,GAAQ,EAAE,QAAU,EAAE,YAAc,KAAK,IAAI,GAAM,EAAE,QAAU,EAAE,YAAc,KAAK,IAAI,IAEzH,GAAI,GACJ,GAAI,KAAK,SAAW,KAAK,QACrB,EAAI,GAAmB,GAAY,KAAK,aAEvC,CACD,GAAI,GAAK,KAAK,QAAQ,MAClB,EAAK,KAAK,QAAQ,IAClB,EAAK,KAAK,QAAQ,WAClB,EAAK,KAAK,QAAQ,WAClB,EAAK,KAAK,QAAQ,MAClB,EAAK,KAAK,QAAQ,IAClB,EAAK,KAAK,QAAQ,WAClB,EAAK,KAAK,QAAQ,WAClB,EAAK,KAAK,MAAM,EAAM,GAAK,GAAM,IAAgB,EAAK,IACtD,EACJ,AAAI,KAAK,IAAI,EAAK,IAAO,IACrB,EAAK,EAAM,GAAK,GAAM,GAAgB,EAGtC,GAAK,EAAK,IAAO,GAAK,EAAK,KAAO,GAAgB,EAC9C,EAAI,KACJ,IAAK,MAEb,GAAI,GAAK,EAAM,GAAK,GAAM,GAAgB,EACtC,EAAK,EAAM,GAAK,GAAM,GAAgB,EAE1C,EAAI,GAAmB,GAAY,GAAmB,GAAO,GAAM,EAAG,EAAG,EAAG,IAEhF,EAAE,YAAY,EAAG,GAErB,MAAI,MAAK,iBAAmB,GACxB,EAAE,YAAY,KAAK,WAAY,KAAK,OACxC,EAAE,eAAe,KAAK,mBAAmB,MAAO,KAAK,MAAO,KAAK,MAAM,MAAO,EAAE,eAAgB,EAAE,aAC9F,KAAK,aAIL,GAAE,eAAe,KAAK,mBAAmB,SAAU,KAAK,YAAa,KAAK,YAAY,MAAO,KAAK,mBAAmB,kBAAmB,KAAK,mBAAmB,gBAChK,EAAE,eAAe,KAAK,mBAAmB,SAAU,KAAK,YAAa,KAAK,YAAY,MAAO,KAAK,mBAAmB,kBAAmB,KAAK,mBAAmB,iBAEpK,KAAK,qBAAqB,EAAG,KAAK,kBAAmB,EAAG,EAAG,GAAM,KAAK,cACtE,KAAK,kBAAkB,EAAG,EAAG,GACtB,EAEX,yBAA0B,CACtB,AAAI,KAAK,aAAe,KAAK,QACzB,KAAK,WAGjB,AAAC,UAAU,EAAa,CAEpB,eAAiD,EAAU,CACvD,YAAY,EAAO,EAAe,EAAW,CACzC,MAAM,EAAO,EAAe,IAGpC,EAAY,oBAAsB,EAClC,eAAyC,EAAM,EAE/C,EAAY,UAAY,GAAI,GAAoB,YAAa,UAC7D,EAAY,WAAa,GAAI,GAAoB,aAAc,WAC/D,EAAY,WAAa,GAAI,GAAoB,aAAc,WAC/D,EAAY,WAAa,GAAI,GAAoB,aAAc,WAC/D,EAAY,YAAc,IAC3B,IAAgB,IAAc",
  "names": []
}
